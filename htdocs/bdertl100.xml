<?xml version="1.0" encoding="UTF-8"?>
<doc>
   <assembly>bdertl</assembly>
   <members>
      <member name="T:BDE.SPParamDesc">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <type namespace="DRIntf">SPParamDesc</type> describes a parameter to a stored procedure that is accessed using dbExpress.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">P<type namespace="DRIntf">SPParamDesc</type> is a pointer to a parameter descriptor. <type namespace="DRIntf">SPParamDesc</type> is a parameter descriptor that describes a parameter for a stored procedure. <type namespace="DRIntf">SPParamDesc</type> includes the following members:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Member</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iParamNum</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The ordinal position of the parameter.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>szName</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The name of the parameter</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iArgType</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The type of the parameter (input, output, and so on)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iDataType</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The data type of the parameter</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iUnits1</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The size for the datatype (number of characters, digits, etc)</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iUnits2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Number of decimal places if datatype is BCD</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>iLen</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>The number of bytes needed to store a parameter value</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:DBTables.EDBEngineError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">EDBEngineError</class> is the exception class for Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine errors.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">EDBEngineError</class> is raised whenever a BDE error occurs. Its <property namespace="dbtables" class="edbengineerror">Errors</property> property contains <class namespace="dbtables">TDBError</class> objects.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <class namespace="dbtables">EDBEngineError</class> exceptions are raised at design time, they appear in a special dialog (in Delphi, TDBEngineErrorDlg) that displays the complete stack of BDE errors. At runtime, unhandled <class namespace="dbtables">EDBEngineError</class> exceptions generate the same message box as other exceptions.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="EDBEngineError">Create</method>s an instance of <method namespace="dbtables" class="EDBEngineError">EDBEngineError</method> using a specified BDE error code.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="EDBEngineError">Create</method> calls the <method namespace="dbtables" class="EDBEngineError">Create</method> method inherited from Exception (using an empty string) to construct an initialized instance of <method namespace="dbtables" class="EDBEngineError">EDBEngineError</method>. It then creates a <class namespace="dbtables">TDBError</class> instance for each error in the BDE error stack and builds a single string containing all the error messages. If the BDE is uninitialized when <method namespace="dbtables" class="EDBEngineError">Create</method> is called, the method generates only one generic error message and one <class namespace="dbtables">TDBError</class> instance.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Disposes of the <method namespace="dbtables" class="EDBEngineError">EDBEngineError</method> instance and each <class namespace="dbtables">TDBError</class> instance.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="EDBEngineError">Destroy</method> first disposes of each <class namespace="dbtables">TDBError</class> instance referenced in the <property namespace="dbtables" class="edbengineerror">Errors</property> property, then calls the inherited destructor to dispose of the <method namespace="dbtables" class="EDBEngineError">EDBEngineError</method> instance itself.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ErrorCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the total number of errors contained in the <property namespace="dbtables" class="edbengineerror">Errors</property> property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="dbtables" class="EDBEngineError">ErrorCount</property> as an upper bound when iterating through the errors in the error stack.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Errors">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the entire Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine error stack.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbtables" class="EDBEngineError">Errors</property> is an index of <class namespace="dbtables">TDBError</class> objects. The first error has an index value of 0.</para>
         </comments>
      </member>
      <member name="T:DBTables.ENoResultSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">ENoResultSet</class> is the exception class for unsuccessful attempts to open a dataset query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">ENoResultSet</class> is raised by <class namespace="dbtables">TQuery</class> when an attempt is made to open the query without a SELECT statement.</para>
         </comments>
      </member>
      <member name="T:DBTables.TDBError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">TDBError</class> represents Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine errors for the <class namespace="dbtables">EDBEngineError</class> exception class.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <class namespace="dbtables">TDBError</class> object is a container for the information pertaining to one database error. One or more <class namespace="dbtables">TDBError</class> objects are contained in the <property namespace="dbtables" class="edbengineerror">Errors</property> property (EDBEngineError).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An <class namespace="dbtables">EDBEngineError</class> exception is raised when Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) or a database back-end accessed via the BDE produces an error condition on execution of a database operation. Information about each error involved in an error condition (such as an error code and error message) is passed by the BDE to the <class namespace="dbtables">EDBEngineError</class> object. If the error occurs at the level of a database system accessed by the BDE (such as InterBase, Oracle, or Sybase), the error information is passed through the BDE to the application's exception object. EDBEngineError reads the stack of database engine errors and creates a separate <class namespace="dbtables">TDBError</class> object to represent each one. These <class namespace="dbtables">TDBError</class> objects are contained in the <property namespace="dbtables" class="edbengineerror">Errors</property> property of <class namespace="dbtables">EDBEngineError</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When an error condition originates with a database system accessed through the BDE, there will typically be two <class namespace="dbtables">TDBError</class> objects in <property namespace="dbtables" class="edbengineerror">Errors</property>. The first will be the BDE version of the error and the second the database system's version of the same error. In both cases, the <property namespace="dbtables" class="tdberror">Category</property>, <property namespace="dbtables" class="tdberror">ErrorCode</property>, and <property namespace="dbtables" class="tdberror">SubCode</property> properties will contain the same values: the BDE error code for the particular type of error condition. In the <class namespace="dbtables">TDBError</class> object for the BDE's version of the error the NativeCode property is empty and the text for the <property namespace="dbtables" class="tdberror">Message</property> property contains the BDE error message the type type of error that occurred. In the <class namespace="dbtables">TDBError</class> object for the database system's version of the error, the NativeCode property contains the database systems specific error code and the <property namespace="dbtables" class="tdberror">Message</property> property text provided by the database system (and not the BDE).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, when a violation of an InterBase CHECK constraint occurs (an error condition that originates with InterBase and not the BDE), the error message provided by the BDE is the generic "General SQL error," while the error message provided by InterBase is a more explanatory error like "Operation violates CHECK constraint INTEG_30 on view or table EMPLOYEE."</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It is also possible to have only BDE type errors in the <class namespace="dbtables">TDBError</class> objects. This is usually only applicable to use of local table types (dBASE, Paradox, and FoxPro), where the BDE is the database back-end and there is no external database system used.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The categories and subcodes for BDE errors are defined in bde.int (Delphi) or bde.hpp (C++). For error information provided by a database system other than the BDE, consult the vendor-supplied documentation for the specific database system for definition or clarification.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Initializes an instance of <method namespace="dbtables" class="TDBError">TDBError</method> using error information returned by the BDE.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TDBError">TDBError</method>'s <method namespace="dbtables" class="TDBError">Create</method> method is called by the <class namespace="dbtables">EDBEngineError</class> constructor, just as <method namespace="dbtables" class="TDBError">TDBError</method> objects are freed by the <class namespace="dbtables">EDBEngineError</class> destructor. Application's should never have cause for calling <method namespace="dbtables" class="TDBError">Create</method> directly, except in the case of custom exception-handling objects descending from or similar to the <class namespace="dbtables">EDBEngineError</class> exception object.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Category">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the category of error referenced by <property namespace="dbtables" class="tdberror">ErrorCode</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbtables" class="TDBError">Category</property> contains the high byte of the BDE error code. Combined with the low byte of the BDE error code (in the <property namespace="dbtables" class="tdberror">SubCode</property> property) this produces the whole BDE error code (also contained in the <property namespace="dbtables" class="tdberror">ErrorCode</property> property).</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ErrorCode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the error code returned by the BDE.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="dbtables" class="TDBError">ErrorCode</property> to determine the error code returned by the BDE. The value of <property namespace="dbtables" class="TDBError">ErrorCode</property> is the combination of the high byte of the BDE error code (also in the <property namespace="dbtables" class="tdberror">Category</property> property) and the low byte (in the <property namespace="dbtables" class="tdberror">SubCode</property> property).</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SubCode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the subcode of the error referenced by <property namespace="dbtables" class="tdberror">ErrorCode</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbtables" class="TDBError">SubCode</property> contains the low byte of the BDE error code. Combined with the high byte of the BDE error code (in the <property namespace="dbtables" class="tdberror">Category</property> property) this produces the whole BDE error code (also contained in the <property namespace="dbtables" class="tdberror">ErrorCode</property> property).</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Message">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the text of the error message.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbtables" class="TDBError">Message</property> contains the remote server message for native (server) errors or the BDE message associated with <property namespace="dbtables" class="tdberror">ErrorCode</property> for non-server errors. To determine which type of message is contained in the <property namespace="dbtables" class="TDBError">Message</property> property, inspect the <property namespace="dbtables" class="tdberror">NativeError</property> property. A zero value there indicates a message provided by the BDE. A nonzero value indicates a message provided by the database system (server).</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.NativeError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the remote error code returned from the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="dbtables" class="TDBError">NativeError</property> to determine whether the error represents a remote error received from the database server. If <property namespace="dbtables" class="TDBError">NativeError</property> is 0, the error is not a server error.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Values in the <property namespace="dbtables" class="TDBError">NativeError</property> property originate with the database system and not the BDE. Refer to vendor documentation for the specific database system used.</para>
         </comments>
      </member>
      <member name="T:DBTables.TLocale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">
                  
                  <type namespace="DRIntf">TLocale</type> is the type for the Locale or <property namespace="dbtables" class="tdbdataset">DBLocale</property> property.</condition>
            
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">The <type namespace="DRIntf">TLocale</type> type is the type of a Locale or <property namespace="dbtables" class="tdbdataset">DBLocale</property> property. It is used for direct calls to BDE. These properties are only used or needed when making direct calls to the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine.</condition>
            
            </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <condition os="Windows">Do not confuse <type namespace="DRIntf">TLocale</type> with the TSysLocale type that represents a Windows locale. <type namespace="DRIntf">TLocale</type> is specific to the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine.</condition>
               
               </para>
            
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TBDECallback">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">TBDECallback</class> is a wrapper for a Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) callback function.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use a <class namespace="dbtables">TBDECallback</class> object to register a callback function with the BDE. Callbacks allow an application to instruct the BDE to take specific actions in response to events that occur during a BDE function call.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, the <class namespace="dbtables">TBatchMove</class> object may encounter problems when executing the corresponding BDE batch operation. A callback function can respond to those problems by instructing the BDE to generate a problems table or to trim the data so that the operation succeeds.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To use a <class namespace="dbtables">TBDECallback</class> object, take the following steps:</para>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="number">
               
               <item>
                  
                  <para>Create an instance of <class namespace="dbtables">TBDECallback</class> to register the callback with the BDE.</para>
               
               </item>
               
               <item>
                  
                  <para>Call the BDE function in which the pertinent events take place. For example, create an instance of <class namespace="dbtables">TBatchMove</class>, and call its <method namespace="dbtables" class="tbatchmove">Execute</method> method.</para>
               
               </item>
               
               <item>
                  
                  <para>When the BDE function returns, destroy the <class namespace="dbtables">TBDECallback</class> object to unregister the callback function.</para>
               
               </item>
            
            </list>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBDECallback">Create</method>s an instance of <method namespace="dbtables" class="TBDECallback">TBDECallback</method> and registers the specified callback with the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbtables" class="TBDECallback">Create</method> to register a callback with the BDE. <method namespace="dbtables" class="TBDECallback">Create</method> a <method namespace="dbtables" class="TBDECallback">TBDECallback</method> object before calling any BDE function that should use the callback to respond to events.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the BDE encounters the type of event indicated by the CBType parameter, the function specified by the CallbackEvent parameter is called. The CallbackEvent function receives a pointer to a callback descriptor. The type of the callback descriptor varies depending on the CBType. The Delphi application must allocate the memory for the callback descriptor. A pointer to this memory is passed in as the CBBuf parameter, and its size is given by the CBBufSize parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Chain parameter indicates whether this callback function should replace any other callbacks of this CBType. When Chain is false, the CallbackEvent function replaces any callbacks registered for the CBType. When Chain is true, the CallbackEvent function is called in addition to other registered callbacks.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="dbtables" class="tbdedataset">Handle</property> parameter is an optional parameter indicating the database cursor associated with the BDE function that may generate the callback. Provide a <property namespace="dbtables" class="tbdedataset">Handle</property> to make the callback specific to function calls for that cursor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The types of callback descriptors associated with each CBType are given in the following table. For more information, see the BDE documentation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CBTypeUsagecallback descriptor</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>CBType</th>
                        
                  <th>Usage</th>
                        
                  <th>callback descriptor</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbGENPROGRESS</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Respond to information about progress during large batch operations. For example, implement a progress bar or cancel button. Return cbrABORT to cancel, cbrCONTINUE to continue.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>CBPROGRESSDesc</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbRESTRUCTURE</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Instruct BDE on how to proceed with situations encountered during a table restructure. </para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return cbrYES, to proceed with the default handling, cbrNO to proceed without the default behavior, cbrABORT to cancel the restructure.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbBATCHRESULT</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Instruct BDE on how to proceed with situations encountered during a batch operation. Return cbrYES, to proceed with the default handling, cbrNO to proceed without the default behavior, cbrABORT to cancel the batch operation.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>RESTCbDesc</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbTABLECHANGED</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Respond to notifications that a table has changed. The return value is ignored.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>not used</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbCANCELQRY</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return cbrABORT to cancel a long running query, or cbrCONTINUE to keep going. The callback is called periodically during the execution of the query.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>not used</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbINPUTREQ</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Instruct BDE on how to respond when a file (such as a lookup table) is missing. Indicate the chosen behavior in the CBInputDesc and return cbrCONTINUE.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>CBInputDesc</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbDBASELOGIN</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Enter a password for an encrypted dBASE table and return cbrCONTINUE.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>CBLoginDesc</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbFIELDRECALC</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Respond to notifications that fields need to be recalculated. The return value is ignored.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>not used</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbTRACE</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Respond to trace information about the actions taken by the BDE. The return value is ignored.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>TRACEDesc</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbDBLOGIN</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Log in to a database server. Return cbrCONTINUE.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>not used.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cbDELAYEDUPD</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Respond to the notification when cached updates fail to write a modified record to the database. Return cbrABORT to cancel all cached updates, cbrSKIP or cbrCONTINUE to discard the failed update and continue posting records, cbrRETRY to try the failed commit again.</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>DELAYUPDCbDesc</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The VCL uses many BDE callback functions. Calling <method namespace="dbtables" class="TBDECallback">Create</method> with Chain set to false may disable the expected behavior of some objects.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Unregisters the callback and destroys an instance of <method namespace="dbtables" class="TBDECallback">TBDECallback</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="dbtables" class="TBDECallback">Destroy</method> directly in an application. Instead, call Free, which checks that the <method namespace="dbtables" class="TBDECallback">TBDECallback</method> object is not nil and only then calls <method namespace="dbtables" class="TBDECallback">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBDECallback">Destroy</method> unregisters the callback before freeing the memory associated with the <method namespace="dbtables" class="TBDECallback">TBDECallback</method> object. After unregistering the callback, any previous callback of the same type will be reinstated.</para>
         </comments>
      </member>
      <member name="T:DBTables.TSessionList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TSessionList</class> manages one or more Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) sessions in a database application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TSessionList</class> to manage session components in applications that provide multiple sessions. The library automatically creates a globally accessible default session list component named <property namespace="dbtables" class="tsessionlist">Sessions</property> for all database applications. In a multi-session application there can be more than one active session, but only one session can be current at a time. <class namespace="DBTables">TSessionList</class> enables an application to switch current sessions.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Applications should not instantiate additional session list components.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FindSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Searches the list of sessions for a specified session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSessionList">FindSession</method> to determine whether or not a specified session exists. SessionName specifies the session to search for.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">FindSession</method> compares the <property namespace="dbtables" class="tsession">SessionName</property> parameter to the <property namespace="dbtables" class="tsession">SessionName</property> property for each session component in the session list. If a match is found, <method namespace="DBTables" class="TSessionList">FindSession</method> returns a pointer to the session component. If an application passes an empty string in <property namespace="dbtables" class="tsession">SessionName</property>, <method namespace="DBTables" class="TSessionList">FindSession</method> returns the default session, <property namespace="dbtables" class="tdatabase">Session</property>. If a match is not found, <method namespace="DBTables" class="TSessionList">FindSession</method> returns nil (Delphi) or NULL (C++).</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.OpenSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Makes an existing session active, or creates a new session component and makes it active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSessionList">OpenSession</method> to make an existing session active, or to create a new session and make it active. SessionName specifies the name of the session to open.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">OpenSession</method> calls <method namespace="dbtables" class="tsessionlist">FindSession</method> to see if the session specified in the <property namespace="dbtables" class="tsession">SessionName</property> parameter already exists. If it finds a match, it starts that session if necessary, and makes the session active. If <method namespace="DBTables" class="TSessionList">OpenSession</method> does not find an existing session, it creates a new session using the name specified in the <property namespace="dbtables" class="tsession">SessionName</property> parameter, starts the session, and makes it active.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In either case, <method namespace="DBTables" class="TSessionList">OpenSession</method> returns a session object.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">Create</method>s an instance of a <method namespace="DBTables" class="TSessionList">TSessionList</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not create instances of <method namespace="DBTables" class="TSessionList">TSessionList</method>. A default session list component, <property namespace="dbtables" class="tsessionlist">Sessions</property>, is automatically created for all database applications. Secondary session lists are not necessary.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">Create</method> calls its inherited constructor, creates an empty list object to keep track of session components, and both creates and initializes a critical section for opening databases.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetSessionNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of all available sessions.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSessionList">GetSessionNames</method> to retrieve a list of all available sessions. List is a string list object, created and maintained by the application, into which to store session names. Names returned by <method namespace="DBTables" class="TSessionList">GetSessionNames</method> correspond to the <property namespace="dbtables" class="tsession">SessionName</property> properties of all available sessions.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">Destroy</method>s the instance of a session list component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TSessionList">Destroy</method>. Delphi automatically handles the destruction of the default session list component, <property namespace="dbtables" class="tsessionlist">Sessions</property>, when an application closes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSessionList">Destroy</method> closes all session components, deletes the BDE critical section, and calls its inherited destructor.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.CurrentSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a pointer to the current session component</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSessionList">CurrentSession</property> to determine or specify which session in a database application is the current session. By default the current session is a pointer to the default session component, <property namespace="dbtables" class="tdatabase">Session</property>, that is created automatically by the library for all database applications. Setting <property namespace="DBTables" class="TSessionList">CurrentSession</property> makes the specified session component the current one. While any number of sessions may be active, only one session can be current at a time.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Count">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of available sessions for the application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBTables" class="TSessionList">Count</property> to determine the current number of available sessions. <property namespace="DBTables" class="TSessionList">Count</property> is typically used to iterate through the list of available sessions to perform some universal action on all sessions. Used with the <property namespace="dbtables" class="tsessionlist">Sessions</property> property, which enables an application to access a session by index number, <property namespace="DBTables" class="TSessionList">Count</property> specifies the maximum number of index entries for <property namespace="dbtables" class="tsessionlist">Sessions</property> (<property namespace="DBTables" class="TSessionList">Count</property> - 1).</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Sessions">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists all active session components in the session list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSessionList">Sessions</property> to access available session components. Index specifies the session to access. Index must be in the range of zero to the current value of the <property namespace="dbtables" class="tsessionlist">Count</property> property minus one, or an EListError exception is raised describing the out of bounds condition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, an application might iterate through all available sessions in the list to perform a global action on them.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.List">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a specified session component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSessionList">List</property> to return a pointer to a specific session component managed by the session list. <property namespace="DBTables" class="TSessionList">List</property> does not change which session is current. SessionName specifies the session component to return, and must match the <property namespace="dbtables" class="tsession">SessionName</property> property of an existing session component. If no such session exists, <property namespace="DBTables" class="TSessionList">List</property> raises an EDatabaseError exception with a message specifying the invalid session name.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To prevent raising an exception, call the <method namespace="dbtables" class="tsessionlist">FindSession</method> method instead of using the <property namespace="DBTables" class="TSessionList">List</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TTraceFlags">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TTraceFlags and TTraceFlags indicate the types of messages that pass between an application and the InterBase server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TTraceFlags is a set of TTraceFlag values. The following table lists the possible values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfQPrepare</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor Prepare statements.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfQExecute</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor ExecSQL statements.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfError</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor server error messages. Such messages may include an error code.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfStmt</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor all SQL statements.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfConnect</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor database connect and disconnect operations, including allocation of connection handles, and freeing connection handles.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfTransact</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor transaction statements, such as StartTransaction, Commit, and Rollback.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfBlob</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor operations on blob data types.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfService</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor messages to one of the IB services.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>tfMisc</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Monitor any statements not covered by other flag options.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:DBTables.TSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TSession</class> provides global management of a group of database connections in an application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TSession</class> to manage a group of database connections within an application. There are three uses for <class namespace="DBTables">TSession</class>: standard, multiple net files for Paradox, and multi-threaded database applications.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The library automatically creates a globally accessible default <class namespace="DBTables">TSession</class> component named <property namespace="dbtables" class="tdatabase">Session</property> for all database applications. The default session component handles standard database connections. An application can control the default session by accessing its properties, events, and methods at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Database applications that must simultaneously access Paradox tables located in different network locations can establish multiple sessions, one for each network location.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Finally, database applications that must establish multiple, concurrent connections to the same database, such as performing two queries against the same data at once, are multi-threaded applications. Multi-threaded applications must create and maintain one additional session component for each simultaneous connection to a single database server.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Applications that maintain multiple sessions can manage them through the <class namespace="DBTables">TSession</class>List component. A default session list component, called <property namespace="dbtables" class="tsessionlist">Sessions</property>—note the plural which distinguishes it from the default session component, <property namespace="dbtables" class="tdatabase">Session</property>—is automatically created for all database applications.</para>
            
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <class namespace="DBTables">TSession</class> implements the IDBSession interface, which allows the global PasswordDialog function to supply passwords to the component.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FindDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Searches a session's list of database components for a specified database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">FindDatabase</method> to determine whether or not a specified database is associated with a session. DatabaseName specifies the name of the database component for which to search.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">FindDatabase</method> compares DatabaseName to the DatabaseName property for each database component in a session's list. If a match is found, <method namespace="DBTables" class="TSession">FindDatabase</method> returns a pointer to the database component. Otherwise <method namespace="DBTables" class="TSession">FindDatabase</method> returns nil (Delphi) or NULL (C++).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can call <method namespace="DBTables" class="TSession">FindDatabase</method> to see if a database component already exists before creating a new database component for a session.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  DB: TDatabase;
begin
  DB := Session.FindDatabase('DBDEMOS');
if (DB = nil) then { database doesn't exist for session so,}
    DB := Session.OpenDatabase('DBDEMOS'); { create and open it}
if Assigned(DB) and DB.Active then begin
    DB.StartTransaction;
...
end;
end;</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetAliasDriverName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides the name of the database driver used by a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias associated with the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetAliasDriverName</method> to determine the BDE database driver used by a specific alias. AliasName is the name of the alias for which to return driver information.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For aliases corresponding to Paradox and dBASE tables, <method namespace="DBTables" class="TSession">GetAliasDriverName</method> returns "STANDARD". For ASCII tables the return value is "ASCIIDRV". For SQL databases, the driver name depends on the database server.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetPassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Invokes the <event namespace="dbtables" class="tsession">OnPassword</event> event handler for the session or displays the default password dialog box.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetPassword</method> to invoke the <event namespace="dbtables" class="tsession">OnPassword</event> event handler for the session and handle response logic when an application is working with password-protected Paradox files. If an <event namespace="dbtables" class="tsession">OnPassword</event> event handler is not defined, <method namespace="DBTables" class="TSession">GetPassword</method> displays the default password dialog box.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can use the return value of <method namespace="DBTables" class="TSession">GetPassword</method> to control program logic. <method namespace="DBTables" class="TSession">GetPassword</method> returns true if a user chooses OK, or false if the user chooses <method namespace="dbtables" class="tbdedataset">Cancel</method>.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">var
  rslt: Boolean;
begin
  rslt := Session.GetPassword;
try
if rslt then
      Table1.Open
else
      ShowMessage('No password given');
except
    ShowMessage('Could not open table!');
end;
ifnot Table1.Active then
    Application.Terminate;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">void __fastcall TForm1::OpenTableButtonClick(TObject *Sender)
{
bool rslt = Session-&gt;GetPassword();
try
  {
if (rslt)
      Table1-&gt;Open();
else
      ShowMessage("No password given");
  }
catch (...)
  {
    ShowMessage("Could not open table!");
  }
if (!Table1-&gt;Active)
    Application.Terminate();
}</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.IsAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether or not a string value corresponds to an existing Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) database alias known to the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">IsAlias</method> to determine if a string corresponds to the name of an existing BDE alias that can be used by the session. Name is the string to test.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <method namespace="DBTables" class="TSession">IsAlias</method> returns true, Name is a valid alias.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The aliases known to <method namespace="DBTables" class="TSession">IsAlias</method> depend on the session's <property namespace="dbtables" class="tsession">ConfigMode</property> property. If <property namespace="dbtables" class="tsession">ConfigMode</property> is cmAll, then all aliases are available to the session.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.OpenDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens an existing database, or creates a temporary database component and opens it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">OpenDatabase</method> to connect to a database for which a persistent database component already exists, or to create a temporary database component and connect to a database. DatabaseName specifies the database to open. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">OpenDatabase</method> makes the current session active, then calls <method namespace="dbtables" class="tsession">FindDatabase</method> to determine if the DatabaseName parameter corresponds to the DatabaseName property of an existing database component. If it does not, <method namespace="DBTables" class="TSession">OpenDatabase</method> creates a temporary database component, assigning the DatabaseName parameter to the DatabaseName property. Finally, <method namespace="DBTables" class="TSession">OpenDatabase</method> calls the <method namespace="dbtables" class="tsession">Open</method> method of the database to connect to a database server, then increments the session's database reference count by one.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">Create</method>s an instance of a <method namespace="DBTables" class="TSession">TSession</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TSession">Create</method> directly. The default session component, <property namespace="dbtables" class="tdatabase">Session</property>, is created automatically for all database applications. To create additional sessions for a multi-threaded database application at runtime call <property namespace="dbtables" class="tsessionlist">Sessions</property>.OpenSession instead of <method namespace="DBTables" class="TSession">Create</method>. OpenSession calls <method namespace="DBTables" class="TSession">Create</method> only if the session does not already exist. (At design time, create additional sessions by dropping them on a data module.)</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">Create</method> calls its inherited constructor and ensures that the session component cannot be inherited should the data module or form on which it is placed be stored in the Object Repository. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.AddAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias to the session for an SQL database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">AddAlias</method> at runtime to create a session-specific BDE alias for an SQL database server. Name is the unique name to assign to the alias. Driver is the name of the SQL Links database driver to use for the alias. List is a string list containing parameters for the alias.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session's <property namespace="dbtables" class="tsession">ConfigMode</property> property determines whether an alias is local to the session, or is available to all applications in the BDE persistent store as long as any BDE clients are active. To save an alias permanently, call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method before ending the session.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Although <method namespace="DBTables" class="TSession">AddAlias</method> can be used to create a Paradox or dBASE alias, <method namespace="dbtables" class="tsession">AddStandardAlias</method> provides a simpler method for Paradox and dBASE alias creation.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.AddDriver">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver to the session for an SQL database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">AddDriver</method> at runtime to create a BDE driver for an SQL database server. <method namespace="DBTables" class="TSession">AddDriver</method> can also be used to create ODBC driver entries. Name is the unique name to assign to the driver. List is a string list containing parameters for the alias.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session's <property namespace="dbtables" class="tsession">ConfigMode</property> property determines whether a driver is local to the session, or is available to all applications in the BDE persistent store as long as any BDE clients are active. To save a driver permanently, call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method before ending the session.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.AddStandardAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a standard Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias to the session for Paradox, dBASE, or ASCII tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">AddStandardAlias</method> at runtime to create a session-specific BDE alias for Paradox, dBASE or ASCII tables. Name is the unique name to assign to the alias. Path specifies the directory where the database is located. DefaultDriver is the name of the standard BDE driver to use for the alias. If set, DefaultDriver must be one of "Paradox," "DBASE," or "ASCIIDRV". If left blank DefaultDriver defaults to "Paradox". DefaultDriver is used when attempting to open a table that both does not have an extension and is defined as a table of type ttDefault.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session's <property namespace="dbtables" class="tsession">ConfigMode</property> property determines whether an alias is local to the session, or is available to all applications in the BDE persistent store as long as any BDE clients are active. the lifetime of the session. To save an alias permanently, call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method before ending the session.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To create an alias for an SQL database, call <method namespace="dbtables" class="tsession">AddAlias</method> instead of <method namespace="DBTables" class="TSession">AddStandardAlias</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.AddPassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds a password to the current session for accessing encrypted Paradox or dBase tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">AddPassword</method> to provide a password for a session prior to opening an encrypted Paradox or dBase table that requires a password. If an application opens a table that requires a password for access, the session does not have a password assigned to it, and the application does not provide its own <event namespace="dbtables" class="tsession">OnPassword</event> event handler, the library displays a dialog box prompting the user for a valid password before allowing table access.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, to provide the String literal "secret" as a password for the session:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Session.AddPassword('secret');</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Session-&gt;AddPassword("secret");</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an application defines its own <event namespace="dbtables" class="tsession">OnPassword</event> event handler, the handler should call this method to add passwords for the session. All passwords assigned by <method namespace="DBTables" class="TSession">AddPassword</method> should be deleted with <method namespace="dbtables" class="tsession">RemoveAllPasswords</method> or <method namespace="dbtables" class="tsession">RemovePassword</method> before an application closes.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Close">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Disconnects from all databases, and closes the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">Close</method> to end a session. <method namespace="DBTables" class="TSession">Close</method> disconnects from all active databases by freeing temporary database components, and calling the <method namespace="DBTables" class="TSession">Close</method> methods persistent database components, and then sets its own session handle to nil (Delphi) or NULL (C++).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Setting the <property namespace="dbtables" class="tsession">Active</property> property to false also closes a session.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CloseDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Closes a database connection associated with the current session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">CloseDatabase</method> to close a persistent database connection, or to close and free a temporary database connection. Database specifies the name of the database component for which to close the connection.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">CloseDatabase</method> decrements the specified database component's reference count, and then, if the reference count is zero and the database component's <property namespace="dbtables" class="tdatabase">KeepConnection</property> property is false, <method namespace="DBTables" class="TSession">CloseDatabase</method> either frees a temporary database component or closes the connection for a persistent database component.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DBTables" class="TSession">CloseDatabase</method> for a persistent database component does not close the connection. To close a connection for a persistent database component, call the database component's <method namespace="dbtables" class="tsession">Close</method> method directly.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Temporary database components are closed automatically when the last dataset associated with the database component is closed, but an application can call <method namespace="DBTables" class="TSession">CloseDatabase</method> prior to that time to force closure. Closing a connection established by a temporary database component does not free the component if the session's <property namespace="dbtables" class="tsession">KeepConnections</property> property is true (the default). To free temporary database components after closing their connections call <method namespace="dbtables" class="tsession">DropConnections</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DeleteAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias from the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">DeleteAlias</method> to remove a BDE alias from a session. Removing an alias makes the alias unavailable to the session, but does not remove it from the BDE configuration file if the alias was stored there when it was created. To remove an alias from the BDE configuration file follow the call to <method namespace="DBTables" class="TSession">DeleteAlias</method> with a call to <method namespace="dbtables" class="tsession">SaveConfigFile</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DeleteDriver">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver from the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">DeleteDriver</method> to remove a BDE driver from a session. Removing a driver makes the driver unavailable to the session, but does not remove it from the BDE configuration file if the driver was stored there when it was created. To remove a driver from the BDE configuration file follow the call to <method namespace="DBTables" class="TSession">DeleteDriver</method> with a call to <method namespace="dbtables" class="tsession">SaveConfigFile</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DropConnections">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees all temporary database components associated with a session if they are inactive.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBTables" class="TSession">DropConnections</method> to free all temporary database components that are currently inactive. If the <property namespace="dbtables" class="tsession">KeepConnections</property> property of the session is true (the default), then temporary database components created as needed for the session by the library at runtime are not automatically freed when their database connections are closed. <method namespace="DBTables" class="TSession">DropConnections</method> enables an application to free these components when they are no longer needed.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetAliasNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of persistent Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) aliases.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetAliasNames</method> to retrieve a list of persistent BDE aliases—those aliases that exist in persistent storage or in the BDE configuration file. List is a string list object, created and maintained by the application, into which to store the alias names.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session's <property namespace="dbtables" class="tsession">ConfigMode</property> property determines whether an alias created in the context of this session is reported by <method namespace="DBTables" class="TSession">GetAliasNames</method>. If <property namespace="dbtables" class="tsession">ConfigMode</property> is cmAll, aliases created within the session are reported.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetAliasParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the parameters associated with a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetAliasParams</method> to retrieve the BDE configuration parameters for a specified alias. AliasName is the name of the alias for which to retrieve parameters. List is a string list object, created and maintained by the application, into which to store the parameters.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetConfigParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) configuration information.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetConfigParams</method> to retrieve specific types of configuration information from the BDE configuration file used to initialize the application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Path represents the internal node structure of the BDE configuration file, and must always start at the root, denoted by a backslash. Each node must be separated from others by a backslash, and no node may be empty. For example, a Path of \SYSTEM\FORMATS\TIME, returns the time format used by the BDE configuration file.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Path can contain a replaceable string formatting symbol (%s) in one of its node designations. If it does, Section must contain the missing node information. In this case, <method namespace="DBTables" class="TSession">GetConfigParams</method> inserts the contents of Section into Path before calling the BDE for the requested information. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is a string list object, created and maintained by the application, into which to store the configuration information. For example, if Path is \DATABASES\%s\DB INFO, and Section is an alias name, then <method namespace="DBTables" class="TSession">GetConfigParams</method> returns the parameters for the alias in <property namespace="dbtables" class="tsessionlist">List</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For more information about the BDE Configuration File, see the online BDE help.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetDatabaseNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of persistent Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) aliases and the names of all databases components known to the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetDatabaseNames</method> to retrieve a sorted, combined list of persistent BDE aliases—those aliases that exist in persistent storage or in the BDE configuration file—and the names of all database components known to the session. List is a string list object, created and maintained by the application, into which to store the database and alias names.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetDriverNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of all Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) drivers available to the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetDriverNames</method> to retrieve the names of all BDE drivers that can be used by a session. List is a string list object, created and maintained by the application, into which to store the driver names.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetDriverParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the parameters for a specified Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetDriverParams</method> to retrieve a list of parameters associated with a specified BDE driver. DriverName is the BDE driver for which to return a parameter list. List is a string list object, created and maintained by the application, into which to store the driver parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The actual number of parameters returned by <method namespace="DBTables" class="TSession">GetDriverParams</method> depends on the specified driver. For example, for the STANDARD driver used by Paradox and dBASE, returns only a few parameters. For SQL Links drivers multiple parameters are returned.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of all fields in a specified table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetFieldNames</method> to retrieve a list of all the columns (fields) in a specified table. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DatabaseName is the name of the database that contains the table. It can be the name of an existing Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias, the name of a <class namespace="dbtables">TDatabase</class> component's DatabaseName property, or a fully qualified path name for the location of a Paradox or dBASE table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TableName is the name of the table for which you want to list the fields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is a string list object, created and maintained by the application, into which <method namespace="DBTables" class="TSession">GetFieldNames</method> adds the names of all fields in the table specified by <property namespace="dbtables" class="ttable">TableName</property>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetTableNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of tables associated with a specified database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetTableNames</method> to retrieve a list of the tables associated with a given database. DatabaseName specifies the name of the database from which to retrieve table names.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pattern specifies a delimiter string that restricts the tables returned to those that match the string. Pattern can include wildcard symbols. Pass an empty Pattern string to match all files not restricted by other criteria.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For searches on Paradox and dBASE, set Extensions to true to include filename extensions as part of the table name. For SQL-based databases, set Extension to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set SystemTables to true for SQL-based databases to return both data tables and the system tables that define the database structure. Set SystemTables to false for Paradox and dBASE tables.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is a string list object, created and maintained by the application, into which to return the table names.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetStoredProcNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of all stored procedures associated with a specified database component that is connected to an SQL database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">GetStoredProcNames</method> to retrieve a list of all stored procedures for a database component that is attached to an SQL database server. DatabaseName specifies the name of the database for which to retrieve stored procedure names. List is a string list object, created and maintained by the application, into which to return the stored procedure names.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <method namespace="DBTables" class="TSession">GetStoredProcNames</method> raises an exception if called on Paradox or dBASE databases.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ModifyAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds or changes parameters for a Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">ModifyAlias</method> to change the parameters for a specified BDE alias. Name is the name of the alias to modify. List is a string list object previously populated with parameter values to add or change. An application must create and maintain <property namespace="dbtables" class="tsessionlist">List</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populate <property namespace="dbtables" class="tsessionlist">List</property> with parameter strings before calling <method namespace="DBTables" class="TSession">ModifyAlias</method>. List need only contain the parameters to change. If <method namespace="DBTables" class="TSession">ModifyAlias</method> passes a parameter for which a value already exists, the new parameter replaces the existing one. New parameters that are not yet defined for the alias are added to the existing parameters. If <property namespace="dbtables" class="tsessionlist">List</property> is empty, <method namespace="DBTables" class="TSession">ModifyAlias</method> does not change any existing parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">ModifyAlias</method> changes the alias parameters for the session, but does not change them in the BDE configuration file. To modify a driver in the BDE configuration file, follow the call to <method namespace="DBTables" class="TSession">ModifyAlias</method> with a call to <method namespace="dbtables" class="tsession">SaveConfigFile</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ModifyDriver">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Adds or changes parameters for a Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">ModifyDriver</method> to change the parameters for a specified BDE database driver. Name is the name of the driver to modify. List is a string list object previously populated with parameter values to add or change. An application must create and maintain <property namespace="dbtables" class="tsessionlist">List</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populate <property namespace="dbtables" class="tsessionlist">List</property> with parameter strings before calling <method namespace="DBTables" class="TSession">ModifyDriver</method>. List need only contain the parameters to change. If <method namespace="DBTables" class="TSession">ModifyDriver</method> passes a parameter for which a value already exists, the new parameter replaces the existing one. New parameters that are not yet defined for the driver are added to the existing parameters. If <property namespace="dbtables" class="tsessionlist">List</property> is empty, <method namespace="DBTables" class="TSession">ModifyDriver</method> does not change any existing parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session's <property namespace="dbtables" class="tsession">ConfigMode</property> property determines whether a driver is local to the session, or is available to all applications in the BDE persistent store as long as any BDE clients are active. To save a driver permanently, call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method before ending the session.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Open">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Starts a session and makes it the current session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">Open</method> to start a session other than the default session in a database application. <method namespace="DBTables" class="TSession">Open</method> sets <property namespace="dbtables" class="tsession">Active</property> to true, triggers an <event namespace="dbtables" class="tsession">OnStartup</event> event handler for the session and initializes the <property namespace="dbtables" class="tsession">NetFileDir</property>, <property namespace="dbtables" class="tsession">PrivateDir</property>, and <property namespace="dbtables" class="tsession">ConfigMode</property> properties.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.RemoveAllPasswords">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes all passwords previously added to the current session for accessing encrypted Paradox tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">RemoveAllPasswords</method> to delete all current Paradox table passwords associated with the current session. Subsequent attempts to access encrypted Paradox tables fail unless an application first calls <method namespace="dbtables" class="tsession">AddPassword</method> to reestablish a password.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Ordinarily an application should call <method namespace="DBTables" class="TSession">RemoveAllPasswords</method> to remove all session-specific passwords it creates from the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) persistent store before terminating.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.RemovePassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes a single password previously added to the current session for accessing an encrypted Paradox table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">RemovePassword</method> to delete a single Paradox table password associated with the current session from the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) persistent store. Subsequent attempts to access the encrypted Paradox table fails unless an application first calls <method namespace="dbtables" class="tsession">AddPassword</method> to reestablish a password.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Session.AddPassword('secret');
Session.RemovePassword('secret');</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Session-&gt;AddPassword("secret");
Session-&gt;RemovePassword("secret");</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SaveConfigFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Writes the current information in the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) persistent store from memory to the BDE configuration file on disk.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TSession">SaveConfigFile</method> to write any BDE configuration changes currently in memory to the BDE configuration file on disk. When the BDE is first initialized, the current BDE configuration file is read into persistent storage in memory. Applications can read or modify the configuration file in memory, but modification exist only in memory, not on disk.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, if an application defines a new BDE alias with <method namespace="dbtables" class="tsession">AddAlias</method>, the alias exists in memory only for as long as the BDE resides in memory. To store the new alias for later use by all applications that use the BDE, call <method namespace="DBTables" class="TSession">SaveConfigFile</method>. <method namespace="DBTables" class="TSession">SaveConfigFile</method> overwrites the disk image of the configuration file with the in-memory image of the persistent configuration file.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a session's <property namespace="dbtables" class="tsession">ConfigMode</property> property is cmSession, added aliases cannot be saved to the BDE configuration file.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">Destroy</method>s the instance of a session component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TSession">Destroy</method> directly. For session components other than the default session, an application should call Free, which verifies that the session component is not nil before calling <method namespace="DBTables" class="TSession">Destroy</method>.</para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Never destroy the default session. Freeing of the default session is handled automatically when an application terminates.</para>
                  
            </warning>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSession">Destroy</method> performs the following actions before calling its inherited destructor:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Makes the session inactive, which closes all database connections.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes the session from the session list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Resets database session references, if necessary.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees the list of database components associated with the session.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ConfigMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) should handle aliases for the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TSession">ConfigMode</property> to specify how the BDE should handle aliases created using the <method namespace="dbtables" class="tsession">AddAlias</method> or <method namespace="dbtables" class="tsession">AddStandardAlias</method> methods within the context of a session. <property namespace="DBTables" class="TSession">ConfigMode</property> also determines which BDE aliases are reported to a session when an application calls the <method namespace="dbtables" class="tsession">GetAliasNames</method> method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The default setting for <property namespace="DBTables" class="TSession">ConfigMode</property> is cmAll, which is a constant that includes all possible set items defined in T<property namespace="DBTables" class="TSession">ConfigMode</property>s. The following table summarizes the possible BDE configuration modes that can be set for aliases:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Mode</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cfmVirtual</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>All aliases in the BDE configuration file, the BDE persistent store, and aliases local to the session are available to the session.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cfmPersistent</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Only aliases in the BDE configuration file, or that are added to the persistent store are available to the session.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>cfmSession</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Only aliases created within this session are available to the session.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The main purpose of <property namespace="DBTables" class="TSession">ConfigMode</property> is to enable an application to specify and restrict aliases at the session level.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For backward compatibility with the older T<property namespace="DBTables" class="TSession">ConfigMode</property>, use the constants cmVirtual, cmPersistent, cmSession, and cmAll. The first three correspond to the three T<property namespace="DBTables" class="TSession">ConfigMode</property>s values of the same names. The constant cmAll represents a <property namespace="DBTables" class="TSession">ConfigMode</property> setting of all three. The two command lines below, the first using T<property namespace="DBTables" class="TSession">ConfigMode</property>s values and the second using the corresponding constant, are functionally the same.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Session.ConfigMode := [cfmSession];
Session.ConfigMode := cmSession;</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Aliases created within a session are not automatically saved to the BDE configuration file. To save an alias to the configuration file, call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DatabaseCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of active database components currently associated with the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TSession">DatabaseCount</property> to determine the number of active database components associated with a session. As database connections are opened or closed during a session's life-span, this number can change. If <property namespace="DBTables" class="TSession">DatabaseCount</property> is zero, there are currently no active database components for the session.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TSession">DatabaseCount</property> is typically used with the <property namespace="dbtables" class="tsession">Databases</property> property to iterate through the current set of active databases in a session.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Databases">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides an indexed array of all active database component names for a session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">Databases</property> to access active database components associated with a session. An active database is one that is currently connected to a database server.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TSession">Databases</property> is typically used with the <property namespace="dbtables" class="tsession">DatabaseCount</property> property to iterate through the current set of active databases in a session. </para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) handle for the session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">Handle</property> only to bypass <property namespace="DBTables" class="TSession">TSession</property> methods and write directly to the BDE API. Many BDE function calls require a handle parameter. <property namespace="DBTables" class="TSession">Handle</property> is assigned an initial value when a session is activated.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through library components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Locale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) language driver for the session component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TSession">Locale</property> to determine the BDE language driver used by the session component. Applications that make direct calls to the BDE may need to pass <property namespace="DBTables" class="TSession">Locale</property> information as an API function parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not use this property unless an application requires BDE functionality not available through standard data access components.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TraceFlags">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the database operations to track with the SQL Monitor at runtime.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">TraceFlags</property> to specify which database operations the SQL Monitor should track in an application at runtime. <property namespace="DBTables" class="TSession">TraceFlags</property> is only meaningful for the SQL Monitor, which is provided to enable performance tuning and SQL debugging when working with remote SQL database servers.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Normally trace options are set from the SQL Monitor rather than setting <property namespace="DBTables" class="TSession">TraceFlags</property> in application code.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of a session component's <property namespace="DBTables" class="TSession">TraceFlags</property> property determines the initial settings of the <property namespace="DBTables" class="TSession">TraceFlags</property> property for database components associated with the session.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The T<property namespace="DBTables" class="TSession">TraceFlags</property> type defines the individual values that can be included in the <property namespace="DBTables" class="TSession">TraceFlags</property> property. The following table summarizes those values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Values</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfQPrepare</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor <method namespace="dbtables" class="tstoredproc">Prepare</method> statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfQExecute</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor ExecSQL statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfError</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor server error messages. Such messages may include an error code.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfStmt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor all SQL statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfConnect</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor database connect and disconnect operations, including allocation of connection handles, and freeing connection handles.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfTransact</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor transaction statements, such as <method namespace="dbtables" class="tdatabase">StartTransaction</method>, <method namespace="dbtables" class="tdatabase">Commit</method>, and <method namespace="dbtables" class="tdatabase">Rollback</method>.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor operations on blob data types.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfMisc</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor any statements not covered by other flag options.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfVendor</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor direct API function calls to the database server.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfDataIn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor data received from a server.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfDataOut</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor data sent to a server.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Because <property namespace="DBTables" class="TSession">TraceFlags</property> is a set property, an application can specify different combinations of flags to monitor different combinations of statements. For example, the following statement limits monitoring to database connections and SQL statement preparation:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">TraceFlags := [tfConnect, tfQPrepare];</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TraceFlags &lt;&lt; tfConnect &lt;&lt; tfQPrepare;</codeBlock>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Active">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether or not a session is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TSession">Active</property> at runtime for the default session, <property namespace="dbtables" class="tdatabase">Session</property>, to determine if it is active or not. <property namespace="DBTables" class="TSession">Active</property> is false by default, meaning there are no open database connections or datasets associated with the session. If <property namespace="DBTables" class="TSession">Active</property> is true, the session is active even if there are currently no active database connections.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the <property namespace="DBTables" class="TSession">Active</property> property at design time or runtime for additional session components in a database application. Setting <property namespace="DBTables" class="TSession">Active</property> to true starts the session and makes it the current session. Setting <property namespace="DBTables" class="TSession">Active</property> to true triggers an <event namespace="dbtables" class="tsession">OnStartup</event> event handler for the session and initializes the <property namespace="dbtables" class="tsession">NetFileDir</property>, <property namespace="dbtables" class="tsession">PrivateDir</property>, and <property namespace="dbtables" class="tsession">ConfigMode</property> properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Setting <property namespace="DBTables" class="TSession">Active</property> to false (the default), closes any open datasets, and disconnects from attached database servers.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application can close the default session by setting <property namespace="DBTables" class="TSession">Active</property> to false, but this is not recommended.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.AutoSessionName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether or not a unique session name is automatically generated for a session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TSession">AutoSessionName</property> to control whether or not a unique session name is automatically generated. <property namespace="DBTables" class="TSession">AutoSessionName</property> is intended to guarantee developers of multi-threaded applications that sessions spawned for each thread are unique at runtime. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TSession">AutoSessionName</property> is false (the default), the application must set the <property namespace="dbtables" class="tsession">SessionName</property> property for a session component. When <property namespace="DBTables" class="TSession">AutoSessionName</property> is true, <property namespace="DBTables" class="TSession">TSession</property> assigns the <property namespace="dbtables" class="tsession">SessionName</property> property automatically and replicates the session name across the <property namespace="dbtables" class="tsession">SessionName</property> properties of all dataset components in the data module or form where the session component appears. This allows applications to use sessions in data modules that are replicated over multiple threads. <property namespace="DBTables" class="TSession">TSession</property> constructs a session name by taking the current value of the Name property and appending an underscore (_) followed by a numeric value. For example, if Name is CustomerSession, then the <property namespace="DBTables" class="TSession">AutoSessionName</property> might be CustomerSession_2.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The following restrictions apply to <property namespace="DBTables" class="TSession">AutoSessionName</property>:</para>
                  
            </note>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="bullet">
                     
               <item>
                        
                  <para>You cannot set <property namespace="DBTables" class="TSession">AutoSessionName</property> for a session in a data module or form that contains more than one session component.</para>
                     
               </item>
                     
               <item>
                        
                  <para>You cannot add a session component to a data module or form that already contains a session component with <property namespace="DBTables" class="TSession">AutoSessionName</property> set to true.</para>
                     
               </item>
                     
               <item>
                        
                  <para>You cannot directly set the <property namespace="dbtables" class="tsession">SessionName</property> property of a session when <property namespace="DBTables" class="TSession">AutoSessionName</property> is true.</para>
                     
               </item>
                  
            </list>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeepConnections">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether or not a temporary database component created in the context of a session maintains a database server connection even if there are no active datasets associated with the database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">KeepConnections</property> to specify whether or not temporary database components created at runtime maintain server connections even when they have no active datasets. If <property namespace="DBTables" class="TSession">KeepConnections</property> is true (the default), the application maintains database connections until the application exits or calls the <method namespace="dbtables" class="tsession">DropConnections</method> method. For connections to remote database servers, or for applications that frequently open and close datasets, <property namespace="DBTables" class="TSession">KeepConnections</property> should remain true to reduce network traffic and speed up processing.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TSession">KeepConnections</property> is false, an application disconnects from a database when all datasets associated with a database component are closed. Dropping a connection releases system resources allocated to the connection, but if a dataset is later reopened that uses the same database, the connection must be reestablished and initialized.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Duration of server connection for a persistent database component is determined by the database component's <property namespace="dbtables" class="tdatabase">KeepConnection</property> property instead of the session's <property namespace="DBTables" class="TSession">KeepConnections</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.NetFileDir">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the directory that contains the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) network control file, PDOXUSRS.NET.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">NetFileDir</property> to specify the directory that contains the BDE network control file, PDOXUSRS.NET. This file governs the sharing of Paradox tables on network drives. All applications that share Paradox tables on a network directory must specify the same value for this property, and must have read, write, and create rights for the directory.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The library derives an initial value for <property namespace="DBTables" class="TSession">NetFileDir</property> from the BDE configuration file for the Paradox driver. Any value assigned to <property namespace="DBTables" class="TSession">NetFileDir</property> at design time or runtime overrides the BDE configuration setting.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Any value you assign to <property namespace="DBTables" class="TSession">NetFileDir</property> is not saved to the BDE configuration file. (Even if you call the <method namespace="dbtables" class="tsession">SaveConfigFile</method> method.)</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.PrivateDir">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the directory in which to store temporary table processing files generated by the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) for database components associated with a session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TSession">PrivateDir</property> to set the directory in which to store temporary table processing files for all database connections, such as those generated by the BDE to handle local SQL statements. Ordinarily this value is only set at runtime, so that a user's local hard disk is used to store temporary files. Local storage of these files improves performance. If no value is specified for <property namespace="DBTables" class="TSession">PrivateDir</property>, the BDE automatically stores temporary files in the directory current at the time the BDE was initialized.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For applications that run directly from a networked file server, the application should set <property namespace="DBTables" class="TSession">PrivateDir</property> to a user's local drive to improve performance and to prevent temporary files from being created on the server where they might conflict with temporary files created by other instances of the application.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SessionName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies a unique session name that can be used by database and dataset components to link to this session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TSession">SessionName</property> to a unique and meaningful name that can be used to link database and dataset components to the session. Database and dataset components each have corresponding <property namespace="DBTables" class="TSession">SessionName</property> properties that must either match the <property namespace="DBTables" class="TSession">SessionName</property> property of an active session or that be blank, indicating that they should be associated with the default session, <property namespace="dbtables" class="tdatabase">Session</property>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the Auto<property namespace="DBTables" class="TSession">SessionName</property> property is true, an application cannot set <property namespace="DBTables" class="TSession">SessionName</property> directly.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SQLHourGlass">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether or not the mouse cursor changes to an hourglass during BDE operations.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TSession">SQLHourGlass</property> to false if you do not want the mouse cursor to change to an hourglass while the BDE is waiting for an SQL server to perform an operation. This property must be set before the session is opened.</para>
         </comments>
      </member>
      <member name="E:DBTables.DBTables.OnPassword">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application attempts to open a Paradox table for the first time and the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) reports insufficient access rights.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBTables" class="TSession">OnPassword</event> event handler to take specific action when an application attempts to open a password-protected Paradox table for the first time. To gain access to the Paradox table, the event handler must pass a valid password to the BDE. The event handler should call the <method namespace="dbtables" class="tsession">AddPassword</method> method to make the password available to the session.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use Continue to conditionally finalize adding the password. If Continue is set to True, the password addition is attempted. If set to False, the attempt to add the password is abandoned.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an <event namespace="DBTables" class="TSession">OnPassword</event> event does not exist, but the BDE reports insufficient access rights, the library displays a default dialog box that prompts for a password.</para>
                  
            </note>
         </comments>
      </member>
      <member name="E:DBTables.DBTables.OnStartup">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application activates a session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBTables" class="TSession">OnStartup</event> event handler to take specific actions when an application activates a session. A session is activated by setting its <property namespace="dbtables" class="tsession">Active</property> property to true, or by opening a database or dataset associated with the session (both of which set <property namespace="dbtables" class="tsession">Active</property> to true).</para>
         </comments>
      </member>
      <member name="T:DBTables.TParamList">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">TParamList</class> manages a list of session parameters.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not use <class namespace="dbtables">TParamList</class> directly. <class namespace="dbtables">TParamList</class> is an internal object used to manage a list of session parameters for a <class namespace="dbtables">TSession</class> component. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TParamList">Create</method>s an instance of <method namespace="dbtables" class="TParamList">TParamList</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbtables" class="TParamList">Create</method> to instantiate a <method namespace="dbtables" class="TParamList">TParamList</method> object. Most applications do not need to create a <method namespace="dbtables" class="TParamList">TParamList</method> object because it is automatically created by <class namespace="dbtables">TSession</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Params is a string list containing the names of the parameters to create for the session. These parameters correspond to Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) configuration parameters.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TParamList">Destroy</method>s an instance of <method namespace="dbtables" class="TParamList">TParamList</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="dbtables" class="TParamList">Destroy</method> directly in an application. Instead, call Free, which checks for a nil reference before calling <method namespace="dbtables" class="TParamList">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TParamList">Destroy</method> frees the memory previously allocated for field descriptors and the buffer used by <method namespace="dbtables" class="TParamList">TParamList</method>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application should never need to destroy a <method namespace="dbtables" class="TParamList">TParamList</method> object. It is automatically destroyed when its parent session object is destroyed.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Buffer">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains all parameter strings for the parameter list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="dbtables" class="TParamList">Buffer</property> is used internally to store parameters in the the parameter list object. While applications can parse this list, there is usually no need to do so.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.FieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of session parameters in the parameter list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="dbtables" class="TParamList">FieldCount</property> to determine how many parameters there are for a session.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.FieldDescs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the field descriptors for each parameter maintained by the parameter list object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="dbtables" class="TParamList">FieldDescs</property> to determine the characteristics of each parameter maintained by the parameter list object. Applications usually have no need to access this property directly.</para>
         </comments>
      </member>
      <member name="T:DBTables.TDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TDatabase</class> provides discrete control over a connection to a single database in a BDE-based database application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TDatabase</class> when a BDE-based database application requires any of the following control over a database connection:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Persistent database connections</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Customized database server logins</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Transaction control</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Application-specific BDE aliases</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TDatabase</class> is especially important for the control it permits over database transaction processing with the BDE when connected to a remote SQL database server.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Explicit declaration of a <class namespace="DBTables">TDatabase</class> component for each database connection in an application is optional if the application does not need to explicitly control that connection. If a <class namespace="DBTables">TDatabase</class> component is not explicitly declared and instantiated for a database connection, a temporary database component with a default set of properties is created for it at runtime.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Execute">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDatabase">Execute</method>s an SQL statement.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBTables" class="TDatabase">Execute</method> to execute an SQL statement against the database without the overhead of using a <class namespace="dbtables">TQuery</class> object. <method namespace="DBTables" class="TDatabase">Execute</method> supports Data Definition Language (DDL) SQL statements and those Data Manipulation Language (DDL) SQL statements that do not return result sets. Examples of DDL statements include: CREATE INDEX, ALTER TABLE, and DROP DOMAIN. The DML statements that perform an action on data but do not return a result set are: INSERT, DELETE, and UPDATE.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SQL is a string value containing the statement to be executed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Params is a value of type TParams and lists any parameters used by the SQL statement. Parameter binding is by index only (not by name). The TParam objects in <property namespace="dbtables" class="tdatabase">Params</property> must be in the same order as the the parameters in the SQL statement to which each corresponds. Use the CreateParam method (TParams) to create one TParams object for each parameter in the SQL statement. Use properties and methods of TParam to configure each TParam and to give each a value prior to calling <method namespace="DBTables" class="TDatabase">Execute</method>. If the SQL statement does not include any parameters, pass a nil (Delphi) or NULL (C++) value for <property namespace="dbtables" class="tdatabase">Params</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cache specifies whether the prepared SQL statement is cached for reuse within the current transaction. Caching statements can speed their processing if they are used more than once in a transaction.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cursor allows you to execute a SELECT statement and from it create a Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) dataset. If SQL is a SELECT statement, Cursor returns the BDE cursor to the result set. Cursor is a pointer to an already existing BDE cursor. There is currently no provision in the VCL to assign the cursor created by this parameter to a dataset component (like <class namespace="dbtables">TTable</class>). This limits its use to cursors subsequently operated on using BDE API code. The result set returned in Cursor is always read-only. If the SQL statement does not return a result set, pass a nil (Delphi) or NULL (C++) value for Cursor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDatabase">Execute</method> returns the number of records affected by executing the SQL statement.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDatabase">Create</method>s an instance of a <method namespace="DBTables" class="TDatabase">TDatabase</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">Create</method> to instantiate a database component at runtime. An application can create a database component in order to control the component's existence and set its properties and events, or an application can let Delphi create temporary database components as needed at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component that is responsible for freeing the database instance. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ApplyUpdates">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Posts pending cached updates for specified datasets to the database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">ApplyUpdates</method> to post pending cached updates for a specific set of open datasets to the database server. <method namespace="DBTables" class="TDatabase">ApplyUpdates</method> is only meaningful if the <property namespace="dbtables" class="tbdedataset">CachedUpdates</property> property of a specified dataset is true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSets is a list of dataset names specifying the datasets for which to post pending updates. DataSets need not list every currently open dataset. For each listed dataset <method namespace="DBTables" class="TDatabase">ApplyUpdates</method> calls the dataset's <method namespace="DBTables" class="TDatabase">ApplyUpdates</method> and <method namespace="dbtables" class="tbdedataset">CommitUpdates</method> methods to post that dataset's pending cached updates.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applying updates is a two-phase process that takes place within the context of the database component's transaction control. When an application calls <method namespace="DBTables" class="TDatabase">ApplyUpdates</method>, the following events take place:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1A database transaction starts.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2Cached updates are written to the database (Phase 1).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the database write is successful:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1 <property namespace="dbtables" class="tdbdataset">Database</property> changes are committed, ending the transaction.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2 <property namespace="dbtables" class="tbdedataset">Cachedupdates</property> are committed, clearing the internal cache buffer (Phase 2).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the database write fails database changes are rolled back, ending the transaction.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The two-phased approach allows for effective error recovery, especially when updating multiple and interrelated datasets (for example, the datasets associated with a master/detail form).</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CloseDataSets">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Closes all datasets associated with the database component without disconnecting from the database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">CloseDataSets</method> to close all active datasets without disconnecting from the database server. Ordinarily, when an application calls <method namespace="dbtables" class="tsession">Close</method>, all datasets are closed, and the connection to the database server is dropped. Calling <method namespace="DBTables" class="TDatabase">CloseDataSets</method> instead of <method namespace="dbtables" class="tsession">Close</method> ensures that an application can close all active datasets without having to reconnect to the database server at a later time.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Commit">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Permanently stores updates, insertions, and deletions of data associated with the current transaction, and ends the current transactions.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">Commit</method> to permanently store to the database server all updates, insertions, and deletions of data associated with the current transaction and then end the transaction. The current transaction is the last transaction started by calling <method namespace="dbtables" class="tdatabase">StartTransaction</method>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Before calling <method namespace="DBTables" class="TDatabase">Commit</method>, an application may check the status of the <property namespace="dbtables" class="tdatabase">InTransaction</property> property. If an application calls <method namespace="DBTables" class="TDatabase">Commit</method> and there is no current transaction, an exception is raised.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FlushSchemaCache">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Flushes the cached schema information for a table. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">FlushSchemaCache</method> if the schema information for an SQL table is changed (for example, because a field, index, or table is added to or dropped from a database).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When an application opens an SQL table, schema information that describes the field names, field types, and index information is stored in memory. If an application changes the schema for an SQL table, it should call <method namespace="DBTables" class="TDatabase">FlushSchemaCache</method> to update the schema information in memory.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of fields in a table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">GetFieldNames</method> to retrieve a list of fields in a table. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TableName names the table whose field names you want added to the list.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is a TStrings descendant that receives the field names. Any existing strings are deleted from the list before <method namespace="DBTables" class="TDatabase">GetFieldNames</method> adds the names of all the fields in <property namespace="dbtables" class="ttable">TableName</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, the following line fills a list box with the names of all fields in the Employee table:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Database1.GetFieldNames('Employee', ListBox1.Items);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Database1-&gt;GetFieldNames("Employee", ListBox1-&gt;Items);</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetTableNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Populates a string list with the names of tables in the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">GetTableNames</method> to retrieve a list of tables in the associated database. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">List is a TStrings descendant that receives the table names. Any existing strings are deleted from the list before <method namespace="DBTables" class="TDatabase">GetTableNames</method> adds the names of all tables in the database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SystemTables specifies whether the list of table names should include only the database's system tables. If SystemTables is true, only the system tables are added to <property namespace="dbtables" class="tsessionlist">List</property>. If SystemTables is false, the list is filled with ordinary tables.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, the following line fills a list box with the names of all tables in the database:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Database1.GetTableNames(ListBox1.Items, False);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Database1-&gt;GetTableNames(ListBox1-&gt;Items, false);</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Rollback">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cancels all updates, insertions, and deletions for the current transaction and ends the transaction.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">Rollback</method> to cancel all updates, insertions, and deletions for the current transaction and to end the transaction. The current transaction is the last transaction started by calling <method namespace="dbtables" class="tdatabase">StartTransaction</method>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Before calling <method namespace="DBTables" class="TDatabase">Rollback</method>, an application may check the status of the <property namespace="dbtables" class="tdatabase">InTransaction</property> property. If an application calls <method namespace="DBTables" class="TDatabase">Rollback</method> and there is no current transaction, an exception is raised.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.StartTransaction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Begins a new transaction against the database server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">StartTransaction</method> to begin a new transaction against the database server. Before calling <method namespace="DBTables" class="TDatabase">StartTransaction</method>, an application should check the status of the <property namespace="dbtables" class="tdatabase">InTransaction</property> property and adjust the setting of the <property namespace="dbtables" class="tdatabase">TransIsolation</property> property as desired. If <property namespace="dbtables" class="tdatabase">InTransaction</property> is true, indicating that a transaction is already in progress, a subsequent call to <method namespace="DBTables" class="TDatabase">StartTransaction</method> without first calling <method namespace="dbtables" class="tdatabase">Commit</method> or <method namespace="dbtables" class="tdatabase">Rollback</method> to end the current transaction raises an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Updates, insertions, and deletions that take place after a call to <method namespace="DBTables" class="TDatabase">StartTransaction</method> are held by the server until an application calls <method namespace="dbtables" class="tdatabase">Commit</method> to save the changes or <method namespace="dbtables" class="tdatabase">Rollback</method> is to cancel them.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ValidateName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Raises an exception if a specified database is already open in the active session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDatabase">ValidateName</method> to prevent duplicate access to a database from within a single session. Name is a string containing the name of the database to test. If the database is already open, <method namespace="DBTables" class="TDatabase">ValidateName</method> raises the EDatabaseError exception. If the database is not open, the procedure returns, and the application continues processing.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Most applications should not need to call this method directly. It is called automatically each time a database is opened.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDatabase">Destroy</method>s the instance of a database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TDatabase">Destroy</method> directly in an application. Instead, call Free, which verifies that the database reference is not nil before calling <method namespace="DBTables" class="TDatabase">Destroy</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDatabase">Destroy</method> closes all active datasets and disconnects from the database server, if necessary. It then frees the string resources allocated for the <property namespace="dbtables" class="tdatabase">Params</property> and <property namespace="dbtables" class="tdatabase">DataSets</property> properties before calling its inherited destructor.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DataSets">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides an indexed array of all active datasets for a database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">DataSets</property> to access active datasets associated with a database component. An active dataset is one that is currently open.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a TBDEClientDataSet uses the connection component to connect to a database server, <property namespace="DBTables" class="TDatabase">DataSets</property> lists the internal dataset that the client dataset creates to access data, not the client dataset itself.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Directory">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the working directory for a Paradox or dBASE database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">Directory</property> at runtime to change or retrieve the working directory for a Paradox or dBASE database. This is the location these databases use to create temporary tables at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ordinarily a directory location is specified in the PATH parameter of the database alias (specified by the <property namespace="dbtables" class="tdatabase">AliasName</property> property). At runtime, however, some applications may need to change the working directory after a database is opened.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To change the value of <property namespace="DBTables" class="TDatabase">Directory</property> at runtime, a database must already be open, or an exception is raised. Clearing the current value of <property namespace="DBTables" class="TDatabase">Directory</property> sets its value to the original working directory specified when the database was first opened.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use <property namespace="DBTables" class="TDatabase">Directory</property> when connected to remote databases. An exception is raised in these circumstances. An exception is also raised if an application accesses <property namespace="DBTables" class="TDatabase">Directory</property> when the database is closed.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) database handle.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">Handle</property> only to bypass <property namespace="DBTables" class="TDatabase">TDatabase</property> methods and make direct calls to the directly to the BDE API. Many BDE function calls require a handle parameter. <property namespace="DBTables" class="TDatabase">Handle</property> is assigned an initial value when a database is opened.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IsSQLBased">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates if a database component is using either the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) SQL Links driver or the BDE ODBC socket.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDatabase">IsSQLBased</property> at runtime to determine if a database connection is using a BDE SQL Links driver, the ODBC socket, or the Paradox, dBASE, and ASCII text file STANDARD driver. If <property namespace="DBTables" class="TDatabase">IsSQLBased</property> is true, the connection is using an SQL Links driver or is using the ODBC socket to communicate with a third-party ODBC driver. If the connection uses the STANDARD driver, <property namespace="DBTables" class="TDatabase">IsSQLBased</property> is false.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.InTransaction">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a database transaction is in progress or not.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDatabase">InTransaction</property> at run-time to determine if a database transaction is currently in progress. <property namespace="DBTables" class="TDatabase">InTransaction</property> is true if a transaction is in progress, false otherwise.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of <property namespace="DBTables" class="TDatabase">InTransaction</property> cannot be changed directly. Calling <method namespace="dbtables" class="tdatabase">StartTransaction</method> sets <property namespace="DBTables" class="TDatabase">InTransaction</property> to true. Calling <method namespace="dbtables" class="tdatabase">Commit</method> or <method namespace="dbtables" class="tdatabase">Rollback</method> sets <property namespace="DBTables" class="TDatabase">InTransaction</property> to false.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Locale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) language driver for the database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDatabase">Locale</property> to determine the BDE language driver used by the database component. Applications that make direct calls to the BDE may also need to pass <property namespace="DBTables" class="TDatabase">Locale</property> information as an API function parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Language driver information may also be available as one of the values in the <property namespace="dbtables" class="tdatabase">Params</property> property when a database component is using a BDE alias.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Session">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the session component with which this database component is associated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">Session</property> to determine the session component that controls the database component. By default, a database component is associated with the default session component, <property namespace="DBTables" class="TDatabase">Session</property>, that is automatically created for all database applications. To assign a database component to a different session in a multi-threaded application, specify the name of a different session component in the <property namespace="DBTables" class="TDatabase">Session</property>Name property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Temporary">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a database component is a temporary one, created by the system as needed, or a persistent one explicitly created, managed, and freed within the application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDatabase">Temporary</property> to determine if a database component is a temporary one, created by the system as needed, or a persistent one explicitly created, managed, and freed within the application. <property namespace="DBTables" class="TDatabase">Temporary</property> is true if the system created the component, false otherwise.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A temporary database component is created when a dataset is opened and the dataset is not already associated with an existing database component. If <property namespace="DBTables" class="TDatabase">Temporary</property> remains true, then a temporary database component is freed when the dataset is closed. An application can prevent the destruction of a temporary database component by setting <property namespace="DBTables" class="TDatabase">Temporary</property> to false while the dataset is active, but the application is then responsible for closing the database when it is no longer needed.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SessionAlias">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether a database component is using a session alias.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDatabase">SessionAlias</property> to see if a database component is using a session alias. If <property namespace="DBTables" class="TDatabase">SessionAlias</property> is true, a session alias is in use. If false, a session alias is not in use.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session alias is automatically created for a database component if it</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Uses the <property namespace="dbtables" class="tdatabase">DriverName</property> and <property namespace="dbtables" class="tdatabase">Params</property> properties instead of the <property namespace="dbtables" class="tdatabase">AliasName</property> property, and the <property namespace="dbtables" class="tdatabase">Params</property> property contains any parameters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Overrides <property namespace="dbtables" class="tdatabase">Params</property> values supplied by a BDE alias in <property namespace="dbtables" class="tdatabase">AliasName</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session alias may also be created if an application permits the user to log into a server using a different user name than the one specified in the <property namespace="dbtables" class="tdatabase">Params</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A session alias exists only while the application is running. It is not stored in the BDE configuration file, and cannot be accessed from outside the application.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TraceFlags">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the database operations to track with the SQL Monitor at runtime.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">TraceFlags</property> to specify which database operations the SQL Monitor should track in an application at runtime. <property namespace="DBTables" class="TDatabase">TraceFlags</property> is only meaningful for the SQL Monitor, which is provided to enable performance tuning and SQL debugging when working with remote SQL database servers.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Normally trace options are set from the SQL Monitor rather than setting <property namespace="DBTables" class="TDatabase">TraceFlags</property> in application code.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The value of a session component's <property namespace="DBTables" class="TDatabase">TraceFlags</property> property determines the initial settings of the <property namespace="DBTables" class="TDatabase">TraceFlags</property> property for database components associated with the session.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The T<property namespace="DBTables" class="TDatabase">TraceFlags</property> type defines the individual values that can be included in the <property namespace="DBTables" class="TDatabase">TraceFlags</property> property. The following table summarizes those values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Values</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfQPrepare</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor Prepare statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfQExecute</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor ExecSQL statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfError</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor server error messages. Such messages may include an error code.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfStmt</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor all SQL statements.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfConnect</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor database connect and disconnect operations, including allocation of connection handles, and freeing connection handles.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfTransact</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor transaction statements, such as <method namespace="dbtables" class="tdatabase">StartTransaction</method>, <method namespace="dbtables" class="tdatabase">Commit</method>, and <method namespace="dbtables" class="tdatabase">Rollback</method>.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfBlob</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor operations on blob data types.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfMisc</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor any statements not covered by other flag options.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfVendor</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor direct API function calls to the database server.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfDataIn</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor data received from a server.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tfDataOut</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Monitor data sent to a server.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Because <property namespace="DBTables" class="TDatabase">TraceFlags</property> is a set property, an application can specify different combinations of flags to monitor different combinations of statements. For example, the following statement limits monitoring to database connections and SQL statement preparation:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">TraceFlags := [tfConnect, tfQPrepare];</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TraceFlags  &lt;&lt; tfConnect &lt;&lt; tfQPrepare;</codeBlock>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.AliasName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias used by this database connection.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">AliasName</property> to specify the name of an existing BDE alias for the database component. A BDE alias contains database configuration information for connection to a specific kind of database, such as InterBase, dBASE, or Paradox. The configuration information associated with a BDE alias differs by database type.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application sets <property namespace="DBTables" class="TDatabase">AliasName</property>, any value previously assigned to the <property namespace="dbtables" class="tdatabase">DriverName</property> property is cleared because the alias automatically specifies a driver name as one of its parameters. Other alias connection information is stored in the <property namespace="dbtables" class="tdatabase">Params</property> property when <property namespace="DBTables" class="TDatabase">AliasName</property> is set.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Attempting to set <property namespace="DBTables" class="TDatabase">AliasName</property> when the <property namespace="dbtables" class="tdatabase">Connected</property> property is true raises an exception.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application can specify the <property namespace="dbtables" class="tdatabase">DatabaseName</property>, <property namespace="dbtables" class="tdatabase">DriverName</property>, and <property namespace="dbtables" class="tdatabase">Params</property> properties rather than setting <property namespace="DBTables" class="TDatabase">AliasName</property> if the desired BDE alias configuration does not already exist. An application can also provide an application-specific "alias" name by setting <property namespace="dbtables" class="tdatabase">DatabaseName</property> when <property namespace="DBTables" class="TDatabase">AliasName</property> is already set.</para>
                  
            </note>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time double-click a <property namespace="DBTables" class="TDatabase">TDatabase</property> component to invoke the <property namespace="dbtables" class="tdbdataset">Database</property> editor and set the <property namespace="DBTables" class="TDatabase">AliasName</property>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Connected">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a database connection is active.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TDatabase">Connected</property> to true to establish a database connection without opening a dataset. Set <property namespace="DBTables" class="TDatabase">Connected</property> to false to close a database connection. An application can check <property namespace="DBTables" class="TDatabase">Connected</property> to determine the current status of a database connection. If <property namespace="DBTables" class="TDatabase">Connected</property> is true, the database connection is active; if false, and the <property namespace="dbtables" class="tdatabase">KeepConnection</property> property is also false, then the connection is inactive.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Set <property namespace="dbtables" class="tdatabase">KeepConnection</property> to true to avoid having to log in to the server each time a database connection is reopened.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DatabaseName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the database to associate with this database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">DatabaseName</property> to specify the name of the database to use with a database component. If <property namespace="DBTables" class="TDatabase">DatabaseName</property> is the same as an existing Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias, then the <property namespace="dbtables" class="tdatabase">AliasName</property> and <property namespace="dbtables" class="tdatabase">DriverName</property> properties need not be set. If <property namespace="DBTables" class="TDatabase">DatabaseName</property> does not match an existing BDE alias, then either the application must also supply a valid alias in the <property namespace="dbtables" class="tdatabase">AliasName</property> property in addition to the <property namespace="DBTables" class="TDatabase">DatabaseName</property>, or it must supply the <property namespace="dbtables" class="tdatabase">DriverName</property> and <property namespace="dbtables" class="tdatabase">Params</property> properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TDatabase">DatabaseName</property> can be a fully qualified path name when connecting to a Paradox or dBASE database.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Attempting to set <property namespace="DBTables" class="TDatabase">DatabaseName</property> when the <property namespace="dbtables" class="tdatabase">Connected</property> property is true raises an exception.</para>
                  
            </note>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time double-click a <property namespace="DBTables" class="TDatabase">TDatabase</property> component to invoke the <property namespace="dbtables" class="tdbdataset">Database</property> editor and set the <property namespace="DBTables" class="TDatabase">DatabaseName</property>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DriverName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the BDE driver for the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">DriverName</property> to specify the name of the BDE driver to use for databases connections that do not specify an <property namespace="dbtables" class="tdatabase">AliasName</property>, but that do specify a <property namespace="dbtables" class="tdatabase">DatabaseName</property>. <property namespace="DBTables" class="TDatabase">DriverName</property> must be a valid BDE driver (for instance, STANDARD, ORACLE, SYBASE, or INTERBASE).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an application sets <property namespace="DBTables" class="TDatabase">DriverName</property>, it must also specify connection parameters in the <property namespace="dbtables" class="tdatabase">Params</property> property. Ordinarily the alias specified in the <property namespace="dbtables" class="tdatabase">AliasName</property> property supplies connection parameters, but when <property namespace="DBTables" class="TDatabase">DriverName</property> is set, the <property namespace="dbtables" class="tdatabase">AliasName</property> property is automatically cleared to avoid BDE driver name contention.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Attempting to set <property namespace="DBTables" class="TDatabase">DriverName</property> when the <property namespace="dbtables" class="tdatabase">Connected</property> property is true raises an exception.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time double-click a <property namespace="DBTables" class="TDatabase">TDatabase</property> component to invoke the <property namespace="dbtables" class="tdbdataset">Database</property> editor and set the <property namespace="DBTables" class="TDatabase">DriverName</property>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Exclusive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables an application to gain sole access to a database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">Exclusive</property> to prevent other applications from accessing a Paradox or dBASE database while this application is using it. Before opening the database, set <property namespace="DBTables" class="TDatabase">Exclusive</property> to true. The default value for <property namespace="DBTables" class="TDatabase">Exclusive</property> is false, allowing other applications to use the opened database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TDatabase">Exclusive</property> is true and the application successfully opens the database, no other application can access it. If the database for which the application has requested exclusive access is already in use by another application, an exception is raised. To handle such exceptions, write an exception handler. All tables in the database are effectively opened exclusively, as other applications would be prevented from opening the database and the tables would be inaccessible.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A table database must be closed before changing the setting of the <property namespace="DBTables" class="TDatabase">Exclusive</property> property. Do not set <property namespace="DBTables" class="TDatabase">Exclusive</property> to true at design time if you also intend to set the <property namespace="dbtables" class="tdatabase">Connected</property> property to true at design time. In this case an exception is raised because the database is already in use by the IDE.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application can attempt to set <property namespace="DBTables" class="TDatabase">Exclusive</property> to true for SQL databases, but some SQL servers do not support exclusive database-locking. Others may grant an exclusive read/write lock, but still permit read-only access to other applications. For more information about exclusive locking of databases for a specific server, see the server's documentation.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.HandleShared">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether to share a database handle.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">HandleShared</property> to indicate that a database component can share its BDE handle in a session component. Set <property namespace="DBTables" class="TDatabase">HandleShared</property> to true to avoid namespace conflicts for database components that appear in a remote data module, or that appear in data modules you inherit from the Object Repository.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeepConnection">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether an application remains connected to a database even if no datasets are open.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">KeepConnection</property> to specify whether an application remains connected to a database even if no datasets are currently open. When <property namespace="DBTables" class="TDatabase">KeepConnection</property> is true (the default) the connection is maintained. For connections to remote database servers, or for applications that frequently open and close datasets, set <property namespace="DBTables" class="TDatabase">KeepConnection</property> to true to reduce network traffic, speed up applications, and avoid logging in to the server each time the connection is reestablished.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TDatabase">KeepConnection</property> is false a connection is dropped when there are no open datasets. Dropping a connection releases system resources allocated to the connection, but if a dataset is later opened that uses the database, the connection must be reestablished and initialized.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DBTables" class="TDatabase">KeepConnection</property> setting for temporary database components created automatically as needed is determined by the <property namespace="DBTables" class="TDatabase">KeepConnection</property>s property of <class namespace="dbtables">TSession</class>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Params">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains database connection parameters for the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) alias associated with the database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">Params</property> to examine or specify database connection parameters, such as path name, server name, schema-caching size, language driver, user name, and password. Actual parameters in <property namespace="DBTables" class="TDatabase">Params</property> differ depending on the current BDE alias and driver for the database component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TDatabase">Params</property> is a list of string items, each representing a different database connection parameter. If the <property namespace="dbtables" class="tdatabase">AliasName</property> property specifies a valid BDE alias, then <property namespace="DBTables" class="TDatabase">Params</property> automatically contains the parameters defined for that alias. If, instead of providing an alias, an application uses the <property namespace="dbtables" class="tdatabase">DriverName</property> property to provide a local alias, the application must provide <property namespace="DBTables" class="TDatabase">Params</property> values directly.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications can use <property namespace="DBTables" class="TDatabase">Params</property> to override the default settings supplied by a BDE alias.</para>
                  
            </note>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time double-click a <property namespace="DBTables" class="TDatabase">TDatabase</property> component to invoke the <property namespace="dbtables" class="tdbdataset">Database</property> editor and set <property namespace="DBTables" class="TDatabase">Params</property>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies that the database connection provides read-only access.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">ReadOnly</property> to specify whether the database connection should allow the application to update the tables and other metadata in the database. Set <property namespace="DBTables" class="TDatabase">ReadOnly</property> before opening the database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TDatabase">ReadOnly</property> is false (the default), the application can modify tables and database metadata (like indexes). When <property namespace="DBTables" class="TDatabase">ReadOnly</property> is true, applications can browse tables but cannot update them. The application is also prevented from creating or deleting metadata objects like tables and indexes.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>A <property namespace="DBTables" class="TDatabase">ReadOnly</property> property value of true should be used when accessing a dBASE or Paradox database on a read-only storage medium, such as a CD.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For SQL databases, if <property namespace="DBTables" class="TDatabase">ReadOnly</property> is true, you must also explicitly set the <property namespace="DBTables" class="TDatabase">ReadOnly</property> property to true for dataset components like <class namespace="dbtables">TTable</class> and <class namespace="dbtables">TQuery</class>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SessionName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the name of the session used by this database component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">SessionName</property> to specify the session with which a database component is associated. If <property namespace="DBTables" class="TDatabase">SessionName</property> is blank, a database component is automatically associated with the default session, <property namespace="dbtables" class="tdatabase">Session</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To associate a database component with a different session in a database application <property namespace="DBTables" class="TDatabase">SessionName</property> must matches the <property namespace="DBTables" class="TDatabase">SessionName</property> property of an existing session component.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TransIsolation">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the transaction isolation level for transactions managed by the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDatabase">TransIsolation</property> to specify the transaction isolation level for database transactions managed by the BDE. Transaction isolation level determines how a transaction interacts with other simultaneous transactions when they work with the same tables, and how much a transaction sees of the work performed by other transactions.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications that use passthrough SQL for handling transactions must pass a transaction isolation level directly to the database server using the appropriate SQL statement.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TDatabase">TransIsolation</property> can be any one of the three values summarized in the following table:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Isolation level</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tiDirtyRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Permits reading of uncommitted changes made to the database by other simultaneous transactions. Uncommitted changes are not permanent, and might be rolled back (undone) at any time. At this level a transaction is least isolated from the effects of other transactions.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tiReadCommitted</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Permits reading of committed (permanent) changes made to the database by other simultaneous transactions. This is the default <property namespace="dbtables" class="tdatabase">TransIsolation</property> property value.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Permits a single, one-time reading of the database. The transaction cannot see any subsequent changes made by other simultaneous transactions. This isolation level guarantees that once a transaction reads a record, its view of that record does not change unless it makes a modification to the record itself. At this level, a transaction is most isolated from other transactions.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Different database servers support different levels of transaction isolation. If an application sets <property namespace="DBTables" class="TDatabase">TransIsolation</property> to an unsupported level for a remote SQL server, the BDE uses the next highest level supported by that server. The following table summarizes the isolation levels supported by the servers recognized by the BDE:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ServerSpecified LevelActual Level</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Server</th>
                        
                  <th>Specified Level</th>
                        
                  <th>Actual Level</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Oracle</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiReadCommitted | tiReadCommitted | tiRepeatableRead (READONLY)</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Sybase, MS-SQL</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiReadCommitted | tiReadCommitted | Not supported</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DB2</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Informix</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>InterBase</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiReadCommitted | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>Paradox, dBASE, Access, FoxPro</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | tiReadCommitted | tiRepeatableRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>tiDirtyRead | Not supported | Not supported</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For local transactions against Paradox and dBASE, <property namespace="DBTables" class="TDatabase">TransIsolation</property> must be set to tiDirtyRead. Otherwise, an exception is raised.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If an application uses ODBC to interface with a server, the ODBC driver must also support the isolation level. For more information about supported isolation levels, see the documentation for the ODBC driver in question.</para>
         </comments>
      </member>
      <member name="E:DBTables.DBTables.OnLogin">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when an application connects to a database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBTables" class="TDatabase">OnLogin</event> event handler to take specific actions when an application attempts to connect to a database. When the LoginPrompt property is true, a database login is required. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If there is no <event namespace="DBTables" class="TDatabase">OnLogin</event> event handler, the current UserName is read from the <property namespace="dbtables" class="tdatabase">Params</property> property, and a standard Login dialog box opens. The dialog prompts for a user name and password combination, and then uses the values entered by the user to set the UserName and PASSWORD values in the <property namespace="dbtables" class="tdatabase">Params</property> property. These values are then passed to the remote server.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications that provide alternative <event namespace="DBTables" class="TDatabase">OnLogin</event> event handlers must set the UserName and PASSWORD values in LoginParams. LoginParams is a temporary string list and is freed automatically when no longer needed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The login dialog and <event namespace="DBTables" class="TDatabase">OnLogin</event> event only occur when the LoginPrompt property is true.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TDataSetUpdateObject">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TDataSetUpdateObject</class> is a base class for update objects used to update otherwise unupdatable queries or stored procedures in applications that cache updates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TDataSetUpdateObject</class> as a base class when creating customized update objects that update BDE datasets. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Apply">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDataSetUpdateObject">Apply</method> applies changes to the dataset specified by the <property namespace="dbtables" class="tdatasetupdateobject">DataSet</property> property.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Descendants of <method namespace="DBTables" class="TDataSetUpdateObject">TDataSetUpdateObject</method> implement the <method namespace="DBTables" class="TDataSetUpdateObject">Apply</method> method. This method is intended to perform the updates specified by the update object. Descendants introduce properties to describe the details of the updates that should be performed. The UpdateKind parameter indicates whether the update object should modify existing records, insert new records, or delete existing records.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the dataset that stores the cached updates to be applied by the update object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TDataSetUpdateObject">DataSet</property> is the dataset that stores the updates that this update object applies to a database server. The update object uses the dataset to obtain information about the original and updated field values.</para>
         </comments>
      </member>
      <member name="T:DBTables.TSQLUpdateObject">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TSQLUpdateObject</class> is the base class for classes that use an SQL command to apply cached updates on behalf of queries or stored procedures that can't post updates directly.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TSQLUpdateObject</class> as a base class when creating customized update objects that can update BDE datasets. <class namespace="DBTables">TSQLUpdateObject</class> adds support for accessing a SQL statement that applies an update to the properties and methods introduced by <class namespace="dbtables">TDataSetUpdateObject</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TSQLUpdateObject</class> is an abstract base class and cannot be instantiated.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the SQL statement that performs a specified update operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Override <method namespace="DBTables" class="TSQLUpdateObject">GetSQL</method> to allow the update object to access an SQL statement that applies an update of the type specified by UpdateKind. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TSQLUpdateObject">GetSQL</method> provides the underlying implementation for the SQL property in the descendant class <class namespace="dbtables">TUpdateSQL</class>.</para>
         </comments>
      </member>
      <member name="T:DBTables.TBDEDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Encapsulates Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) functionality for descendant dataset objects.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TBDEDataSet</class> is a dataset object that defines BDE functionality for a dataset. Applications never use <class namespace="DBTables">TBDEDataSet</class> objects directly. Instead they use the descendants of <class namespace="DBTables">TBDEDataSet</class> and <class namespace="dbtables">TDBDataSet</class>, such as <class namespace="dbtables">TQuery</class>, <class namespace="dbtables">TStoredProc</class>, and <class namespace="dbtables">TTable</class>, which inherit its database-related properties and methods.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Developers who create custom dataset components that work through the BDE may want to derive them directly from <class namespace="DBTables">TBDEDataSet</class> to inherit all the functionality of TDataSet and the BDE-related properties and methods of <class namespace="DBTables">TBDEDataSet</class>. To inherit control over database objects, however, most developers should derive custom dataset components that use the BDE from the immediate descendant of <class namespace="DBTables">TBDEDataSet</class>, <class namespace="dbtables">TDBDataSet</class>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.BookmarkValid">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Tests the validity of a specified bookmark.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">BookmarkValid</method> to determine if a specified bookmark is currently assigned a value. Bookmark specifies the bookmark to test.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">BookmarkValid</method> returns true if a bookmark is valid. Otherwise, it returns false.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CompareBookmarks">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the relationship between two bookmarks.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">CompareBookmarks</method> to determine if two bookmarks are identical. Bookmark1 and Bookmark2 are the bookmarks to compare. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the bookmarks differ, <method namespace="DBTables" class="TBDEDataSet">CompareBookmarks</method> returns -1 if Bookmark1 is less than Bookmark2, 1 if Bookmark1 is greater than Bookmark2, and 0 if the bookmarks are identical, nil (Delphi), or NULL (C++)</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ConstraintCallBack">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the callback function that allows the dataset to communicate with the BDE constraint layer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the address of <method namespace="DBTables" class="TBDEDataSet">ConstraintCallBack</method> as a parameter when making direct API calls to Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) functions that require a callback to provide information about the constraints on the dataset or its fields.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ConstraintsDisabled">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether constraints are enabled for a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">ConstraintsDisabled</method> to determine if constraints are currently disabled for a dataset. If <method namespace="DBTables" class="TBDEDataSet">ConstraintsDisabled</method> returns true, constraints are currently disabled. If false, constraints are currently enabled.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CreateBlobStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a <class namespace="dbtables">TBlobStream</class> object for reading or writing the data in a specified blob field.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">CreateBlobStream</method> to obtain a stream for reading data from or writing data to a binary large object (BLOB) field. The Field parameter must specify a TBlobField component from the Fields property array. The <property namespace="dbtables" class="tbatchmove">Mode</property> parameter specifies whether the stream will be used for reading, writing, or updating the contents of the field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Blob streams are created in a specific mode for a specific field on a specific record. Applications should create a new blob stream every time the record in the dataset changes rather than reusing an existing blob stream. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetCurrentRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the current record into a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications should not need to call <method namespace="DBTables" class="TBDEDataSet">GetCurrentRecord</method>. TDataSet automatically allocates a buffer for the active record. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">GetCurrentRecord</method> to copy the current record into a buffer allocated by the application. Buffer must be at least as big as the record size indicated by the <property namespace="dbtables" class="tbdedataset">RecordSize</property> property. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetBlobFieldData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reads BLOB data into a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">GetBlobFieldData</method> reads blob data from the field specified by FieldNo into a <property namespace="dbtables" class="tparamlist">Buffer</property>. The buffer is a dynamic array of bytes, so that it can grow to accommodate the size of the BLOB data. <method namespace="DBTables" class="TBDEDataSet">GetBlobFieldData</method> returns the size of the buffer.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetFieldData">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves the current value of a field into a buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Most applications do not need to call <method namespace="DBTables" class="TBDEDataSet">GetFieldData</method>. TField objects call this method to implement their GetData method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Field or FieldNo parameter indicates the field whose data should be fetched. Field specifies the component itself, while FieldNo indicates its field number. The <property namespace="dbtables" class="tparamlist">Buffer</property> parameter is a memory buffer with sufficient space to accept the value of the field as it exists in the database (unformatted and untranslated). NativeFormat indicates whether the dataset fetches the field in the library's native format for the field type. When NativeFormat is false, the dataset must convert the field value to the native type. This allows the field to handle data from different types of datasets (ADO-based, BDE-based, and so on) in a uniform manner.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">GetFieldData</method> returns a value that indicates whether the data was successfully fetched.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">GetFieldData</method> returns true if the buffer is successfully filled with the field's data, and false if the data could not be fetched.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Locate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Searches the dataset for a specified record and makes that record the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">Locate</method> to search a dataset for a specific record and position the cursor on it.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">KeyFields is a string containing a semicolon-delimited list of field names on which to search.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">KeyValues is a variant array containing the values to match in the key fields. If KeyFields lists a single field, KeyValues specifies the value for that field on the desired record. To specify multiple search values, pass a variant array as KeyValues, or construct a variant array on the fly using the VarArrayOf routine. For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">with CustTable do
  Locate('Company;Contact;Phone', VarArrayOf(['Sight Diver', 'P', '408-431-1000']), [loPartialKey]);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TLocateOptions Opts;
Opts.Clear();
Opts &lt;&lt; loPartialKey;
Variant locvalues[2];
locvalues[0] = Variant("Sight Diver");
locvalues[1] = Variant("P");</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">CustTable-&gt;Locate("Company;Contact", VarArrayOf(locvalues, 1), Opts);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Options is a set that optionally specifies additional search latitude when searching on string fields. If Options contains the loCaseInsensitive setting, then <method namespace="DBTables" class="TBDEDataSet">Locate</method> ignores case when matching fields. If Options contains the loPartialKey setting, then <method namespace="DBTables" class="TBDEDataSet">Locate</method> allows partial-string matching on strings in KeyValues. If Options is an empty set, or if the KeyFields property does not include any string fields, Options is ignored.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Locate</method> returns true if it finds a matching record, and makes that record the current one. Otherwise <method namespace="DBTables" class="TBDEDataSet">Locate</method> returns false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Locate</method> uses the fastest possible method to locate matching records. If the search fields in KeyFields are indexed and the index is compatible with the specified search options, <method namespace="DBTables" class="TBDEDataSet">Locate</method> uses the index. Otherwise <method namespace="DBTables" class="TBDEDataSet">Locate</method> creates a filter for the search.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Lookup">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves field values from a record that matches specified search values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">Lookup</method> to search for a record in the dataset in which specified fields contain specified values and return other field values from the found record. Unlike other dataset search methods, <method namespace="DBTables" class="TBDEDataSet">Lookup</method> performs its search without moving the record pointer of the dataset. This is useful when doing data validation on a record's data while the record is still in edit or insert mode.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">KeyFields is a string containing the names of the field or fields on which the search is predicated. If the search is based on more than one field, KeyFields is a list of field names delimited with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">KeyValues is a variant array containing the values to find in the fields specified in KeyFields. To specify multiple search values, pass KeyValues as a variant array as an argument, or construct a variant array on the fly using the VarArrayOf routine. These search values must be specified in the order of the fields in KeyFields to which each corresponds. For instance, the first value is used for the first field in KeyFields, the second value for the second field, and so on.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ResultFields is a string containing the names of the field or fields from which to return values. If values are to be returned from more than one field, ResultFields is a list of field names delimited with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Lookup</method> returns a variant array containing the values from the fields specified in ResultFields.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Lookup</method> uses the fastest possible method to locate matching records. If the search fields in KeyFields are indexed, <method namespace="DBTables" class="TBDEDataSet">Lookup</method> uses the index. Otherwise <method namespace="DBTables" class="TBDEDataSet">Lookup</method> creates a filter for the search.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The example below uses the <method namespace="DBTables" class="TBDEDataSet">Lookup</method> method to search the sample Paradox table Customer. The search is based on two fields: Company and State. The search is also based on the following two values in these two fields: "Blue Sports" and "OR". For the search to be successful, there must be a record where the Company field contains the value "Blue Sports" AND the field State contains "OR". If either criteria is not met, the search is unsuccessful (such a record does exist in this table, so the search will be successful). The values of the CustNo and Addr1 fields are returned by the execution of the <method namespace="DBTables" class="TBDEDataSet">Lookup</method> method. If the search is unsuccessful, the VarType function applied to the returned variant array returns varNull.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">procedure TForm1.Button1Click(Sender: TObject);
var
  V: Variant;
  C: Integer;
  A: String;
begin
  V := Table1.Lookup('Company;State',
    VarArrayOf(['Blue Sports', 'OR']),
    'CustNo;Addr1');
if not (VarType(V) in [varNull]) then begin
    C := V[0];
    A := V[1];
    ShowMessage(IntToStr(C) + #10 + A);
end
else
    ShowMessage('Search unsuccessful!');
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">int C;
AnsiString A;
Variant V;
V = Table1-&gt;Lookup("Company;State",
  VarArrayOf(OPENARRAY(Variant, ("Blue Sports","OR"))),
  "CustNo;Addr1");
if !(VarType(V) == varNull)
{
  C = V[0];
  A = V[1];
  ShowMessage(IntToStr(C) + #10 + A);
}
else
  ShowMessage("Search unsuccessful!");</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.IsSequenced">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">IsSequenced</method> indicates whether sequence numbers are available for database records.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">IsSequenced</method> to determine whether database records can be located by sequence numbers. When <method namespace="DBTables" class="TBDEDataSet">IsSequenced</method> is true, the dataset can navigate directly to a specific record by setting the <property namespace="dbtables" class="tbdedataset">RecNo</property> property. If <method namespace="DBTables" class="TBDEDataSet">IsSequenced</method> is false, the only way to navigate to a specific record is to start at the beginning and count records. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.UpdateStatus">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reports the update status for the current record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">UpdateStatus</method> to determine the update status for the current record in a dataset when cached updates are enabled. Update status can change frequently as records are edited, inserted, or deleted. <method namespace="DBTables" class="TBDEDataSet">UpdateStatus</method> offers a convenient method for applications to assess the current status before undertaking or completing operations that depend on the update status of individual records in the dataset.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Translate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a data string between the Microsoft ANSI character set, and the local code page (OEM character set).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the ToOem parameter is true, <method namespace="DBTables" class="TBDEDataSet">Translate</method> converts the source string from the ANSI character set to the OEM character set. If ToOem is false, <method namespace="DBTables" class="TBDEDataSet">Translate</method> converts the source string from the OEM character set to the Microsoft ANSI character set. By default, BDE datasets work with strings in the OEM character set. </para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Create</method>s an instance of a <method namespace="DBTables" class="TBDEDataSet">TBDEDataSet</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">Create</method> to instantiate a dataset component at runtime. Ordinarily applications instantiate <method namespace="DBTables" class="TBDEDataSet">TBDEDataSet</method> descendants, such as <class namespace="dbtables">TTable</class>, <class namespace="dbtables">TQuery</class>, or <class namespace="dbtables">TStoredProc</class>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Create</method>
                  
            </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Calls its inherited <method namespace="DBTables" class="TBDEDataSet">Create</method> method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the <property namespace="dbtables" class="tbdedataset">Locale</property> property of the dataset to the locale of the default session.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the <property namespace="dbtables" class="tbdedataset">CacheBlobs</property> property to true.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ApplyUpdates">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Writes a dataset's pending cached updates to the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">ApplyUpdates</method> to write a dataset's pending cached updates to a database. This method passes cached data to the database for storage, but the changes are not committed to the database. An application must explicitly call the database component's <method namespace="dbtables" class="tdatabase">Commit</method> method to commit the changes to the database if the write is successful, or call the database's <method namespace="dbtables" class="tdatabase">Rollback</method> method to undo the changes if there is an error.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Following a successful write to the database, and following a successful call to the database's <method namespace="dbtables" class="tdatabase">Commit</method> method, an application should call the <method namespace="dbtables" class="tbdedataset">CommitUpdates</method> method to clear the cached update buffer.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The preferred method for updating datasets is to call a database component's <method namespace="DBTables" class="TBDEDataSet">ApplyUpdates</method> method rather than to call each individual dataset's <method namespace="DBTables" class="TBDEDataSet">ApplyUpdates</method> method. The database component's <method namespace="DBTables" class="TBDEDataSet">ApplyUpdates</method> method takes care of committing and rolling back transactions and clearing the cache when the operation is successful.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Cancel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Cancel</method>s modifications to the current record if those changes are not yet posted.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">Cancel</method> to undo modifications made to one or more fields belonging to the current record. As long as those changes are not already posted to the database, <method namespace="DBTables" class="TBDEDataSet">Cancel</method> returns the record to its previous state, and sets the dataset state to dsBrowse.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Typically <method namespace="DBTables" class="TBDEDataSet">Cancel</method> is used to back out of changes in response to user request, or in field validation routines that back out illegal field values. The TDBNavigator object contains a <method namespace="DBTables" class="TBDEDataSet">Cancel</method> button that triggers a call to <method namespace="DBTables" class="TBDEDataSet">Cancel</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CancelUpdates">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Clears all pending cached updates from the cache and restores the dataset its prior state.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">CancelUpdates</method> to clear all pending cached updates from the cache and restore the dataset to the state it was in when the table was opened, cached updates were last enabled, or updates were last successfully applied to the database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When a dataset is closed, or the <property namespace="dbtables" class="tbdedataset">CachedUpdates</property> property is set to false, <method namespace="DBTables" class="TBDEDataSet">CancelUpdates</method> is called automatically.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To undo changes to a single record, call <method namespace="dbtables" class="tbdedataset">RevertRecord</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CommitUpdates">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Clears the cached updates buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">CommitUpdates</method> to clear the cached updates buffer after both a successful call to <method namespace="dbtables" class="tbdedataset">ApplyUpdates</method> and a database component's <method namespace="dbtables" class="tdatabase">Commit</method> method. Clearing the cache after applying updates ensures that the cache is empty except for records that could not be processed and were skipped by the <event namespace="dbtables" class="tbdedataset">OnUpdateRecord</event> or <event namespace="dbtables" class="tbdedataset">OnUpdateError</event> event handlers. An application can attempt to modify the records still in the cache.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Record modifications made after a call to <method namespace="DBTables" class="TBDEDataSet">CommitUpdates</method> repopulate the cached update buffer and require a subsequent call to <method namespace="dbtables" class="tbdedataset">ApplyUpdates</method> to move them to the database.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Applications that use a database component's <method namespace="dbtables" class="tbdedataset">ApplyUpdates</method> method to apply and commit pending updates for all datasets associated with the database component do not need to call <method namespace="DBTables" class="TBDEDataSet">CommitUpdates</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DisableConstraints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Disables application of server constraints on the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">DisableConstraints</method> to prevent, on a temporary basis, application of server constraints replicated to the dataset. For example, when an application iterates through a dataset, it may improve performance to disable constraints temporarily.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DBTables" class="TBDEDataSet">DisableConstraints</method> increments a reference count. As long as this reference count is greater than zero, constraints are disabled for the dataset. To prevent accidental disabling of constraints, always group a call to <method namespace="DBTables" class="TBDEDataSet">DisableConstraints</method> with a call to <method namespace="dbtables" class="tbdedataset">EnableConstraints</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.EnableConstraints">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables application of server constraints against dataset entries.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">EnableConstraints</method> to turn on application server constraints previously disabled by a call to <method namespace="dbtables" class="tbdedataset">DisableConstraints</method>.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DBTables" class="TBDEDataSet">EnableConstraints</method> decrements a reference count. When this reference count is zero constraints are enabled for the dataset. To prevent accidental disabling of constraints, always follow a call to <method namespace="dbtables" class="tbdedataset">DisableConstraints</method> with a matching call to <method namespace="DBTables" class="TBDEDataSet">EnableConstraints</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FetchAll">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves all records from the current cursor position to the end of the file and stores them locally.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">FetchAll</method> to reduce network traffic when using cached updates. <method namespace="DBTables" class="TBDEDataSet">FetchAll</method> calls CheckBrowseMode to post any pending changes, and then retrieves all records from the current cursor position to the end of the file, and store them locally.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ordinarily when cached updates are enabled, a transaction retrieves only as much data as it needs for display purposes. Each new fetch starts a new, read-only transaction. To consolidate transactions and reduce network traffic, an application can call <method namespace="DBTables" class="TBDEDataSet">FetchAll</method> to retrieve all data in a single transaction.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Using <method namespace="DBTables" class="TBDEDataSet">FetchAll</method> is not always appropriate. For example, when an application accesses a database used by many simultaneous clients and there is a high degree of contention for updating the same records, fetching all records at once may not be advantageous because some fetched records may be changed by other applications. Always weigh the advantages of reduced network traffic against the need for reduced record contention.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FlushBuffers">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Posts all changes that have been written to the record buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">FlushBuffers</method> to cause the dataset to post all pending changes to the database, including any cached updates. Use <method namespace="DBTables" class="TBDEDataSet">FlushBuffers</method> instead of CheckBrowseMode if it is important that cached record buffers are posted.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetIndexInfo">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves information about the current index into the index data fields of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">GetIndexInfo</method> to update information about the current index. Ordinarily an application does not need to call <method namespace="DBTables" class="TBDEDataSet">GetIndexInfo</method> because this routine is used internally to retrieve index information as needed. Some applications, however, may want to ensure that the index information used by the dataset is up-to-date.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">GetIndexInfo</method> queries the BDE for index information, including:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Whether the current index is a dBASE expression index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Whether the index is case insensitive.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The number of fields that make up the key for the index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The field map for the index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The size of the index key.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Number of fields and field map are not retrieved if the index is a dBASE expression index.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Post">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Writes a modified record to the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">Post</method> to write a modified record to the database. Dataset methods that change the dataset state, such as Edit, Insert, or Append, or that move from one record to another, such as First, Last, Next, and Prior automatically call <method namespace="DBTables" class="TBDEDataSet">Post</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.RevertRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Restores the current record in the dataset to an unmodified state when cached updates are enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBDEDataSet">RevertRecord</method> to undo changes made to the current record when cached updates are enabled. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To undo all changes to all pending updates in the cache, call <method namespace="dbtables" class="tbdedataset">CancelUpdates</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Destroy</method>s the instance of a dataset component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TBDEDataSet">Destroy</method> directly in an application. Usually destruction of datasets is handled automatically If an application creates its own instances of a dataset, however, the application should call Free, which checks that the dataset component is not nil before calling <method namespace="DBTables" class="TBDEDataSet">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBDEDataSet">Destroy</method> calls its inherited destructor if necessary, frees the resources allocated for the BDE asynchronous callback, and sets the <property namespace="dbtables" class="tbdedataset">UpdateObject</property> property for the dataset to nil.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.StmtHandle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) statement handle for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBDEDataSet">StmtHandle</property> for direct calls to the BDE that bypass the methods of this dataset. Some BDE API calls require a statement handle as a parameter. For example, <property namespace="DBTables" class="TBDEDataSet">TBDEDataSet</property> descendants use <property namespace="DBTables" class="TBDEDataSet">StmtHandle</property> when preparing a query or binding parameters. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Typically, applications do not need to access this property. In <property namespace="DBTables" class="TBDEDataSet">TBDEDataSet</property>, <property namespace="DBTables" class="TBDEDataSet">StmtHandle</property> is protected, and so unavailable to applications. Some descendants make this property public so that you can bypass the dataset methods and make direct calls to the BDE.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.CacheBlobs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether BLOB fields are cached in memory.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBDEDataSet">CacheBlobs</property> to specify whether to store BLOB images in memory to improve performance when scrolling through records that display BLOB images. <property namespace="DBTables" class="TBDEDataSet">CacheBlobs</property> is true by default, meaning that BLOBs are cached in memory. If an application does not need to display the BLOBs associated with records, then set <property namespace="DBTables" class="TBDEDataSet">CacheBlobs</property> to false to conserve system resources.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ExpIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a dataset is using a dBASE expression index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBTables" class="TBDEDataSet">ExpIndex</property> to determine if a dataset is using a dBASE expression index. If <property namespace="DBTables" class="TBDEDataSet">ExpIndex</property> is true, an expression index is in use; otherwise <property namespace="DBTables" class="TBDEDataSet">ExpIndex</property> is false.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) cursor handle for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBDEDataSet">Handle</property> only to bypass TDataSet methods and call directly into the BDE. Many BDE function calls require a cursor handle parameter. <property namespace="DBTables" class="TBDEDataSet">Handle</property> is assigned an initial value when a dataset is opened. If used with a BDE call that changes the current record position, call Resync immediately after returning from the BDE call.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through built-in components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeySize">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the size of the key for the current index of the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DBTables" class="TBDEDataSet">KeySize</property> to determine the size, in bytes, of the key for the current index. <property namespace="DBTables" class="TBDEDataSet">KeySize</property> varies depending on the number and type of fields that make up the current index.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Locale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) language driver for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TBDEDataSet">Locale</property> to determine the BDE language driver for the dataset. Applications that make direct calls to the BDE API may need to pass <property namespace="DBTables" class="TBDEDataSet">Locale</property> information as a function parameter.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Language driver information may also be available as one of the values in the Params property of the database component that owns the dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through built-in components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.UpdateObject">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the update object component used to update a read-only result set when cached updates are enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBDEDataSet">UpdateObject</property> to specify the T<property namespace="DBTables" class="TBDEDataSet">UpdateObject</property> component to use in an application that must be able to update a read-only result set returned by the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The BDE always attempts to provide an updatable, or "live" query result unless an application specifically requests a read-only view of data. In some cases, such as a query made against multiple tables, a live result set cannot be returned. In these cases, <property namespace="DBTables" class="TBDEDataSet">UpdateObject</property> can be used to specify a <class namespace="dbtables">TUpdateSQL</class> component that performs updates as a separate transaction that is transparent to the application.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.UpdatesPending">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the cached updates buffer contains records that are not yet applied.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TBDEDataSet">UpdatesPending</property> to check the status of the cached updates buffer. If <property namespace="DBTables" class="TBDEDataSet">UpdatesPending</property> is true, then there are edited, deleted, or inserted records to apply to the database. If <property namespace="DBTables" class="TBDEDataSet">UpdatesPending</property> is false, there are no records in the cache.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.UpdateRecordTypes">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the type of records visible in a dataset when cached updates are enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBDEDataSet">UpdateRecordTypes</property> to specify the records that are visible in a dataset when cached updates are enabled. <property namespace="DBTables" class="TBDEDataSet">UpdateRecordTypes</property> is a set that can have the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>rtModified</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Modified records are visible.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>rtInserted</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Inserted records are visible.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>rtDeleted</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Deleted records are visible.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>rtUnmodified</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Unmodified records are visible.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">By default, a dataset is created with an <property namespace="DBTables" class="TBDEDataSet">UpdateRecordTypes</property> set of [rtModified, rtInserted, rtUnmodified], meaning that all existing, edited, or inserted records are visible to the user.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application that must cycle through a dataset to undelete records may change <property namespace="DBTables" class="TBDEDataSet">UpdateRecordTypes</property> as part of an undelete method, so that deleted records are "visible" long enough to restore them to their previously undeleted conditions.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application might also use <property namespace="DBTables" class="TBDEDataSet">UpdateRecordTypes</property> like a filter to temporarily limit visible records to those added or inserted by the user during the current session.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.CachedUpdates">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether cached updates are enabled for a dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TBDEDataSet">CachedUpdates</property> enables or disables the use of cached updates for a dataset. If <property namespace="DBTables" class="TBDEDataSet">CachedUpdates</property> is true, cached updates are enabled. If <property namespace="DBTables" class="TBDEDataSet">CachedUpdates</property> is false, cached updates are disabled.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When cached updates are enabled, updates to a dataset (such as posting changes, inserting new records, or deleting records), are stored in an internal cache on the client machine instead of being written directly to the dataset's underlying database tables. When changes are complete, an application writes all cached changes to the database in the context of a single transaction.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Cached updates are most useful to client applications in two-tiered applications. The main benefits of enabling cached updates are:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fewer transactions and shorter transaction times.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Minimization of network traffic.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The potential drawbacks of enabling cached updates are:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Other applications can access and change the actual data on the server while users are editing local copies of the data, resulting in an update conflict when cached updates are applied to the database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Other applications cannot access data changes made by an application until its cached updates are applied to the database.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Instead of using cached updates, applications can obtain the same benefits with greater control by using a client dataset and a provider component.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When cached updates are enabled, data changes are stored in local memory. The storage medium is a Paradox format in-memory table. This has implications for applications run in a network environment in that the NET DIR parameter for the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver for Paradox needs to be set -- even though the application may be designed to use other database types. Failure to properly set this parameter can result in an <class namespace="dbtables">EDBEngineError</class> exception. There are two ways to set NET DIR. One is through the BDE configuration utility BDE Administrator (described in the BDE Administrator online help). The other way is through the <property namespace="dbtables" class="tsession">NetFileDir</property> property of <class namespace="dbtables">TSession</class>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="E:DBTables.DBTables.OnUpdateError">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs if an exception is generated when cached updates are applied to a database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> event handler to respond to exceptions generated while applying cached updates to a database.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Because there is a delay between the time a record is first cached and the time cached updates are applied, there is a possibility that another application may change one or more of the same records in the database before the cached changes can be applied. The Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) checks for this condition and raises an exception. <event namespace="DBTables" class="TBDEDataSet">TBDEDataSet</event> responds by calling the <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> event handler if it exists.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSet is the name of the dataset to which updates are applied.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E is a pointer to a <class namespace="dbtables">EDBEngineError</class> object from which an application can extract an error message and the actual cause of the error condition. The <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> handler can use this information to determine how to respond to the error condition.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UpdateKind indicates whether the error occurred while inserting, deleting, or modifying a record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UpdateAction indicates the action to take when the <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> handler exits. On entry into the handler, UpdateAction is always set to uaFail. If <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> can handle or correct the error, set UpdateAction to uaRetry before exiting the error handler. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The error handler can use the OldValue and NewValue properties TField to evaluate error conditions and set NewValue to a new value to reapply. In this case, set UpdateAction to uaRetry before exiting.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a call to <method namespace="dbtables" class="tbdedataset">ApplyUpdates</method> raises an exception and <method namespace="dbtables" class="tbdedataset">ApplyUpdates</method> is not called within the context of a exception block, an error message is displayed. If an <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> handler cannot correct the error condition and leaves UpdateAction set to uaFail, the error message is displayed twice. To prevent redisplay, set UpdateAction to uaAbort in the error handler.</para>
                  
            </note>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Important:The code in an <event namespace="DBTables" class="TBDEDataSet">OnUpdateError</event> handler must not call any methods that make a different record the current one.</para>
                  
            </warning>
         </comments>
      </member>
      <member name="E:DBTables.DBTables.OnUpdateRecord">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Occurs when cached updates are applied to a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Write an <event namespace="DBTables" class="TBDEDataSet">OnUpdateRecord</event> event handler to process updates that cannot be handled by a single update component, such as implementation of cascading updates, insertions, or deletions. This handler is also useful for applications that require additional control over parameter substitution in update components.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DataSet is the name of the dataset to which updates are applied.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UpdateKind indicates whether the current update is the insertion of a record, the deletion of a record, or the modification of a record.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UpdateAction indicates the action taken by the <event namespace="DBTables" class="TBDEDataSet">OnUpdateRecord</event> handler before it exits. On entry into the handler, UpdateAction is always set to uaFail. If <event namespace="DBTables" class="TBDEDataSet">OnUpdateRecord</event> is successful, it should set UpdateAction to uaApplied before exiting.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The code in an <event namespace="DBTables" class="TBDEDataSet">OnUpdateRecord</event> handler must not call any methods that make a different record the current one.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>As an alternate approach, application can use a client dataset and a provider component to handle cached updates. This alternative provides more support and greater control.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TNestedTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TNestedTable</class> encapsulates a dataset that is nested as a field within another table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TNestedTable</class> to access data contained in a nested dataset. A nested table inherits BDE functionality from <class namespace="dbtables">TBDEDataSet</class> and so uses the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) to access the nested table data. A nested table provides much of the functionality of a table component, except that the data it accesses is stored in a nested table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <class namespace="DBTables">TNestedTable</class> is used only for dataset fields in tables that have a BDE driver (such as Oracle8 tables). For example, detail sets nested in a client dataset use another client dataset instead.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TNestedTable">Create</method>s an instance of a <method namespace="DBTables" class="TNestedTable">TNestedTable</method> component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TNestedTable">Create</method> to instantiate a nested table declared in an application if it was not placed on a form at design time. <method namespace="DBTables" class="TNestedTable">Create</method> calls its inherited <method namespace="DBTables" class="TNestedTable">Create</method> constructor and sets ObjectView to True.</para>
         </comments>
      </member>
      <member name="T:DBTables.TDBDataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TDBDataSet</class> encapsulates database connectivity for descendant dataset objects.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TDBDataSet</class> defines database-related connectivity properties and methods for a dataset. Applications never use <class namespace="DBTables">TDBDataSet</class> objects directly. Instead they use the descendants of <class namespace="DBTables">TDBDataSet</class>, such as <class namespace="dbtables">TQuery</class>, <class namespace="dbtables">TStoredProc</class>, and <class namespace="dbtables">TTable</class>, which inherit its database-related properties and methods.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Developers who create custom dataset components may want to derive them from <class namespace="DBTables">TDBDataSet</class> to inherit to the database-specific properties of <class namespace="DBTables">TDBDataSet</class> in addition to all the functionality of TDataSet and the BDE-related properties and methods of <class namespace="dbtables">TBDEDataSet</class>. In this case, developers should examine the source code to study the protected methods of <class namespace="DBTables">TDBDataSet</class> that are not documented for this object.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CheckOpen">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Checks the result of a call to the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDBDataSet">CheckOpen</method> to determine if a call to the BDE returns an error when an attempt is made to access a dataset. Status is the return result of a previous call to the BDE.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDBDataSet">CheckOpen</method> returns true if access is successful. If Status indicates insufficient table rights when accessing a Paradox or dBASE table, <method namespace="DBTables" class="TDBDataSet">CheckOpen</method> calls the database session's <method namespace="dbtables" class="tsession">GetPassword</method> method to prompt the user for a password. If the dialog is successful, <method namespace="DBTables" class="TDBDataSet">CheckOpen</method> returns true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Otherwise <method namespace="DBTables" class="TDBDataSet">CheckOpen</method> returns false, indicating that dataset access failed.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.OpenDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens the database that contains the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDBDataSet">OpenDatabase</method> to connect to the database that contains the dataset, or to create a temporary database component and connect to a database. The <property namespace="dbtables" class="tdbdataset">DatabaseName</property> property specifies the database to open. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDBDataSet">OpenDatabase</method> makes the current session active, then determines whether the <property namespace="dbtables" class="tdbdataset">DatabaseName</property> property corresponds to the <property namespace="dbtables" class="tdbdataset">DatabaseName</property> property of an existing database component. If it does not, <method namespace="DBTables" class="TDBDataSet">OpenDatabase</method> creates a temporary database component, assigning the <property namespace="dbtables" class="tdbdataset">DatabaseName</property> parameter to the <property namespace="dbtables" class="tdbdataset">DatabaseName</property> property. Finally, <method namespace="DBTables" class="TDBDataSet">OpenDatabase</method> calls the <method namespace="dbtables" class="tsession">Open</method> method of the database to connect to a database server, then increments the session's database reference count by one.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDBDataSet">Create</method>s a new <method namespace="DBTables" class="TDBDataSet">TDBDataSet</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDBDataSet">Create</method> to instantiate a DB dataset at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDBDataSet">Create</method>:</para>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="bullet">
                     
               <item>
                        
                  <para>Set the <property namespace="dbtables" class="tdatabase">Locale</property> property of the dataset to the locale of the default session.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Sets the <property namespace="dbtables" class="tbdedataset">CacheBlobs</property> property to true.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Checks if the specified Owner is a database component, and if so, uses it to set the <property namespace="dbtables" class="tdbdataset">SessionName</property> and <property namespace="dbtables" class="tdbdataset">DatabaseName</property> properties.</para>
                     
               </item>
                  
            </list>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CloseDatabase">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Closes a database connection associated with the database session.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TDBDataSet">CloseDatabase</method> to close a persistent database connection, or to close and free a temporary database connection. Database specifies the name of the database component for which to close the connection.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TDBDataSet">CloseDatabase</method> decrements the specified database component's reference count, and then, if the reference count is zero and the database component's <property namespace="dbtables" class="tdatabase">KeepConnection</property> property is false, <method namespace="DBTables" class="TDBDataSet">CloseDatabase</method> either frees a temporary database component or closes the connection for a persistent database component.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Calling <method namespace="DBTables" class="TDBDataSet">CloseDatabase</method> for a persistent database component does not close the connection. To close a connection for a persistent database component, call the database component's <method namespace="dbtables" class="tsession">Close</method> method directly.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Temporary database components are closed automatically when the last dataset associated with the database component is closed, but an application can call <method namespace="DBTables" class="TDBDataSet">CloseDatabase</method> prior to that time to force closure. Closing a connection established by a temporary database component does not free the component if the session's <property namespace="dbtables" class="tsession">KeepConnections</property> property is true (the default). To free temporary database components after closing their connections call <method namespace="dbtables" class="tsession">DropConnections</method> method of the session.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DBFlags">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keeps track of the commands this dataset has active with the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applications can't use this protected property. <property namespace="DBTables" class="TDBDataSet">TDBDataSet</property> uses this property internally to keep track of the statements it has active with the current database connection. When <property namespace="DBTables" class="TDBDataSet">DBFlags</property> is empty, the dataset is not using the database connection.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.UpdateMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines how the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) finds records when updating to an SQL database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">UpdateMode</property> to specify the criteria to use when locating a record in the dataset. <property namespace="DBTables" class="TDBDataSet">UpdateMode</property> specifies whether modified records are located based on all columns (fields), on only the key fields, or on the key fields plus the original values of fields that have been modified.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Database">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the database component for which this dataset represents one or more tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">Database</property> to access the properties, events, and methods of the database component associated with this dataset. <property namespace="DBTables" class="TDBDataSet">Database</property> is a read-only property that is automatically set when the database specified by the <property namespace="DBTables" class="TDBDataSet">Database</property>Name property is opened.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DBHandle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) database handle for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DBTables" class="TDBDataSet">DBHandle</property> to determine the database handle for the dataset. <property namespace="DBTables" class="TDBDataSet">DBHandle</property> is only useful in applications that bypass database and dataset methods to write directly to the BDE API. Many BDE function calls require a handle parameter. <property namespace="DBTables" class="TDBDataSet">DBHandle</property> is assigned an initial value when a session is activated.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through standard data access components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DBLocale">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) language driver for the dataset component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TDBDataSet">DBLocale</property> to determine the BDE language driver used by the database component associated with which this dataset is associated. Applications that make direct calls to the BDE may need to pass <property namespace="DBTables" class="TDBDataSet">DBLocale</property> information as an API function parameter.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through standard data access components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DBSession">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the database session component associated with this dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">DBSession</property> to determine the session component that controls the database component with which this dataset component is associated. By default, a database component is associated with the default session component, <property namespace="dbtables" class="tdatabase">Session</property>, that is automatically created for all database applications.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) cursor handle for the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">Handle</property> only to bypass TDataSet methods and call directly into the BDE. Many BDE function calls require a cursor handle parameter. <property namespace="DBTables" class="TDBDataSet">Handle</property> is assigned an initial value when a dataset is opened. If used with a BDE call that changes the current record position, call Resync immediately after returning from the BDE call.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TBDEDataSet allows the <property namespace="DBTables" class="TDBDataSet">Handle</property> property to be set to an existing BDE cursor handle. Setting the <property namespace="DBTables" class="TDBDataSet">Handle</property> property is intended primarily for internal use. Descendant classes redeclare the <property namespace="DBTables" class="TDBDataSet">Handle</property> property to re-establish it as a read-only property</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through built-in components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.AutoRefresh">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether server-generated field values are refetched automatically.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TDBDataSet">AutoRefresh</property> is false (the default), values that the server creates for autoincrement fields and fields with default values when a record is posted are not automatically refetched by the dataset. Instead, the application must call the dataset's Refresh method to update these field values. When <property namespace="DBTables" class="TDBDataSet">AutoRefresh</property> is true, these field values are automatically refreshed without an explicit call to the Refresh method.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Some database drivers can't determine which fields are autoincrement fields or have default values. For these cases, you must provide this information by setting the AutoGenerateValue property of all fields that should be refreshed. Similarly, you must set the field components' AutoGenerateValue properties when the dataset represents a query or stored procedure.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DatabaseName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the database associated with this dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">DatabaseName</property> to specify the name of the database to associate with this dataset component. <property namespace="DBTables" class="TDBDataSet">DatabaseName</property> should match the name of a database component used in the application.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Attempting to set <property namespace="DBTables" class="TDBDataSet">DatabaseName</property> when a database already associated with this component is open raises an exception.</para>
                  
            </note>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time double-click a <class namespace="dbtables">TDatabase</class> component to invoke the <property namespace="dbtables" class="tdbdataset">Database</property> editor and set the <property namespace="DBTables" class="TDBDataSet">DatabaseName</property>.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SessionName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the name of the session with which this dataset is associated.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TDBDataSet">SessionName</property> to determine the session with which a dataset component is associated. <property namespace="DBTables" class="TDBDataSet">SessionName</property> is automatically set to the name of the <property namespace="DBTables" class="TDBDataSet">SessionName</property> property of the database component with which a dataset component is associated. If <property namespace="DBTables" class="TDBDataSet">SessionName</property> is blank, a dataset component is automatically associated with the default session, <property namespace="dbtables" class="tdatabase">Session</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To associate a dataset component with a different session, <property namespace="DBTables" class="TDBDataSet">SessionName</property> must match the <property namespace="DBTables" class="TDBDataSet">SessionName</property> property of an existing session component that is also used by the database component with which this dataset is associated.</para>
         </comments>
      </member>
      <member name="T:DBTables.TBatchMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">
                  
                  <type namespace="DRIntf">TBatchMode</type> indicates the type of batch operation to be performed on a database table.</condition>
            
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">
                  
                  <type namespace="DRIntf">TBatchMode</type> can take the following values:</condition>
            
            </para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Meaning</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>batAppend</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Append all records from the source table to the end of destination table. The destination and source tables must not have records with duplicate keys.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>batAppendUpdate</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>If a matching record exists in the destination table, replace it with the corresponding record from the source table. Otherwise, append records to the destination table. The destination table must have an index defined for matching records.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>batCopy</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Copy the structure and records from the source table into the destination table. If the destination table already exists, delete it and replace it with the new copy of the source.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>batDelete</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Delete all records in the destination table that also appear in the source table.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>batUpdate</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>If a matching record exists in the destination table, replace it with the corresponding record from the source table. The destination table must have an index defined for matching records.</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:DBTables.TLockType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">Indicates how a Paradox or dBASE table can be locked.</condition>
            
            </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <condition os="Windows">
                  
                  <type namespace="DRIntf">TLockType</type> identifies the type of a BDE lock on a Paradox or dBASE table. The following table lists the possible values:</condition>
            
            </para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Value</th>
                  
                  <th>Description</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ltReadLock</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Other applications (or sessions) can not read from the table.</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>ltWriteLock</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>Other applications (or sessions) can not write to the table.'</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="T:DBTables.TTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TTable</class> encapsulates a database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TTable</class> to access data in a single database table using the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE). <class namespace="DBTables">TTable</class> provides direct access to every record and field in an underlying database table, whether it is from Paradox, dBASE, Access, FoxPro, an ODBC-compliant database, or an SQL database on a remote server, such as InterBase, Oracle, Sybase, MS-SQL Server, Informix, or DB2. A table component can also work with a subset of records within a database table using ranges and filters.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At design time, create, delete, update, or rename the database table connected to a <class namespace="DBTables">TTable</class> by right-clicking on the <class namespace="DBTables">TTable</class> and using the pop-up menu.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.BatchMove">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves records from a dataset into this table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">BatchMove</method> to</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy records from another table into this table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Update records in this table that occur in another table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Append records from another table to the end of this table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Delete records in this table that occur in another table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ASource is a dataset component containing the records to import or (if deleting) match. The AMode parameter indicates what operation to perform (copy, update, append, or delete). This table is the destination of the batch operation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">BatchMove</method> returns the number of records operated on.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FindKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Searches for a record containing specified field values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">FindKey</method> to search for a specific record in a dataset. KeyValues contains a comma-delimited array of field values, called a key. Each value in the key can be a literal, a variable, nil (Delphi) or NULL (C++). If the number of values passed in KeyValues is less than the number of columns in the index used for the search, the missing values are assumed to be null. KeyValues_Size specifies the index of the last value in KeyValues (one less than the total number of values supplied). In the statement below, the <method namespace="DBTables" class="TTable">FindKey</method> method is used to find the table row with the value "'Princess Island SCUBA" in the index field.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Table1.FindKey(['Princess Island SCUBA']);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TVarRec vr = ("Princess Island SCUBA");
Table1-&gt;FindKey(&amp;vr, 0);</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>In C++ code, the search values can be passed to <method namespace="DBTables" class="TTable">FindKey</method> using either a TVarRec (as above) or an ARRAYOFCONST construct. The example below performs the same search as the preceding example, but using ARRAYOFCONST.</para>
                  
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Table1-&gt;FindKey(ARRAYOFCONST(("Princess Island SCUBA")));</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For Paradox and dBASE tables, the key must always be an index, which can be specified in the <property namespace="dbtables" class="ttable">IndexName</property> property. If <property namespace="dbtables" class="ttable">IndexName</property> is empty, <method namespace="DBTables" class="TTable">FindKey</method> uses the table's primary index. Note that <method namespace="DBTables" class="TTable">FindKey</method> does not work with dBASE expression indexes. Use the <method namespace="dbtables" class="ttable">GotoKey</method> or <method namespace="dbtables" class="ttable">GotoNearest</method> method instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL tables, the key may correspond to a specified index in <property namespace="dbtables" class="ttable">IndexName</property>, or to a list of field names in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the search is successful, <method namespace="DBTables" class="TTable">FindKey</method> positions the cursor on the matching record and returns true. Otherwise the cursor is not moved, and <method namespace="DBTables" class="TTable">FindKey</method> returns false.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GotoKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves the cursor to a record specified by the current key.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="DBTables" class="TTable">GotoKey</method> to move to a record specified by key values assigned with previous calls to <method namespace="dbtables" class="ttable">SetKey</method> or <method namespace="dbtables" class="ttable">EditKey</method> and actual search values indicated in the Fields property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <method namespace="DBTables" class="TTable">GotoKey</method> finds a matching record, it positions the cursor on the record and returns true. Otherwise the current cursor position remains unchanged, and <method namespace="DBTables" class="TTable">GotoKey</method> returns false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For Paradox and dBASE tables, the key must always be an index, which can be specified in the <property namespace="dbtables" class="ttable">IndexName</property> property. If <property namespace="dbtables" class="ttable">IndexName</property> is empty, <method namespace="DBTables" class="TTable">GotoKey</method> uses the table's primary index. <method namespace="DBTables" class="TTable">GotoKey</method> works with dBASE expression indexes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL tables, the key may correspond to a specified index in <property namespace="dbtables" class="ttable">IndexName</property>, or to a list of field names in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">Create</method>s an instance of a table component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">Create</method> to instantiate a table declared in an application if it was not placed on a form or data module at design time. <method namespace="DBTables" class="TTable">Create</method> calls its inherited constructor, creates an empty index definitions list, creates an empty data link, and creates an empty list of index files.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.AddIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates a new index for the table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">AddIndex</method> to create a new index for the already-existing table associated with a dataset component. The index created with this procedure is added to the database table underlying the dataset component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Name is the name of the new index. Name must contain an index name that is valid for the particular database type used (naming rules vary from one database type to another).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fields contains the names of the fields on which the new index will be based. If more than one field is used, separate the field names in the list with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Options is a set of attributes for the index. The Options parameter may contain any one, multiple, or none of the TIndexOptions constants: ixPrimary, ixUnique, ixDescending, ixCaseInsensitive, and ixExpression. Not all database systems will necessarily support all of these options. Even within a particular table type, any given option may only be supported in certain versions of a table type. Consult the documentation for the particular database system used to determine which options are and are not supported. See the topic for the TIndexOptions type for definitions of individual constants and the implications of their use.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DescFields is a string containing a list of field names, separated by semicolons. The fields specified in DescFields are the fields in the new index for which the ordering will be descending. Fields in the index definition but not in the DescFields list use the default ascending ordering. It is possible that a single index can have fields using both ascending and descending ordering.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Table1.AddIndex('MostPaid', 'CustNo;SaleDate;AmountPaid', [ixCaseInsensitive], 'SaleDate;AmountPaid');</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TIndexOptions Options;
Options &lt;&lt; ixCaseInsensitive;
Table1-&gt;AddIndex("MostPaid", "CustNo;SaleDate;AmountPaid", Options, "SaleDate;AmountPaid");</codeBlock>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Attempting to create an index using options that are not applicable to the table type causes <method namespace="DBTables" class="TTable">AddIndex</method> to raise an exception.</para>
                  
            </warning>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">dBASE tables only support primary indexes and true unique indexes when the table level is 7 or higher (concurrent with Visual dBASE 7). dBASE tables do not support case-insensitive indexes at all. You must use the ixExpression constant when the index is based on multiple fields or uses dBASE Data Manipulation Language (DML) functions (that is, for expression indexes). Multi-field dBASE indexes cannot be created simply with a list of field names (separated by semicolons) in the Fields parameter of <method namespace="DBTables" class="TTable">AddIndex</method>. The ixExpression constant is only applicable to dBASE tables.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Paradox tables support the ixDescending option for secondary indexes if the table level is 7 or higher and ixUnique if the table level is 5 or higher. The ixDescending and ixCaseInsensitive constants are not applicable to primary indexes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For other table types, see the vendor-supplied documentation for the particular database system for details on what index options are applicable.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ApplyRange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Applies a range to the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">ApplyRange</method> to cause a range established with <method namespace="dbtables" class="ttable">SetRangeStart</method> and <method namespace="dbtables" class="ttable">SetRangeEnd</method>, or <method namespace="dbtables" class="ttable">EditRangeStart</method> and <method namespace="dbtables" class="ttable">EditRangeEnd</method>, to take effect. When a range is in effect, only those records that fall within the range are available to the application for viewing and editing.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After a call to <method namespace="DBTables" class="TTable">ApplyRange</method>, the cursor is left on the first record in the range.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CancelRange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes any ranges currently in effect for the table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">CancelRange</method> to remove a range currently applied to a table. Canceling a range reenables access to all records in the dataset.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CloseIndexFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Closes a specified dBASE non-production index file. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">CloseIndexFile</method> to shut down a specified dBASE non-production index file. IndexFileName is the name of the file to close, and is either the name of an index file previously opened with a call to <method namespace="dbtables" class="ttable">OpenIndexFile</method> or previously opened because the file's name is listed in the <property namespace="dbtables" class="ttable">IndexFiles</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Once closed, non-production index files are no longer maintained. Subsequent changes made to the dataset are not reflected in the index.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CreateTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Builds a new table using new structure information.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">CreateTable</method> at runtime to create a table using this dataset's current definitions. If the table already exists, <method namespace="DBTables" class="TTable">CreateTable</method> overwrites the table's structure and data. To avoid overwriting an existing table, check the <property namespace="dbtables" class="ttable">Exists</property> property before calling <method namespace="DBTables" class="TTable">CreateTable</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the FieldDefs property contains values, these values are used to create field definitions. Otherwise the Fields property is used. One or both of these properties must contain values in order to create a database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the <property namespace="dbtables" class="ttable">IndexDefs</property> property contain values, these values are used to create indexes on the table.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DeleteIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes a secondary index for the table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">DeleteIndex</method> to remove a secondary index for a table. Name is the name of the index to delete. <method namespace="DBTables" class="TTable">DeleteIndex</method> cannot remove a primary index.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To delete an index, an application must first open the table for exclusive access.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DeleteTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes an existing database table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">DeleteTable</method> to delete an existing database table associated with the table component through its DatabaseName and <property namespace="dbtables" class="ttable">TableName</property> properties. A table must be closed before it can be deleted.</para>
            <warning xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Deleting a table erases any data the table contains and destroys the table's structure information.</para>
                  
            </warning>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.EditKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables modification of the search key buffer.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">EditKey</method> to put the dataset in dsSetKey state while preserving the current contents of the current search key buffer. To determine current search keys, you can use the <property namespace="dbtables" class="ttable">IndexFields</property> property to iterate over the fields used by the current index.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">EditKey</method> is especially useful when performing multiple searches where only one or two field values among many change between each search.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.EditRangeEnd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables changing the ending value for an existing range.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">EditRangeEnd</method> to change the ending value for an existing range. To specify an end range value, call FieldByName after calling <method namespace="DBTables" class="TTable">EditRangeEnd</method>. After assigning a new ending value, call <method namespace="dbtables" class="ttable">ApplyRange</method> to activate the modified range.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>With Paradox or dBASE tables, <method namespace="DBTables" class="TTable">EditRangeEnd</method> works only on indexed fields. With SQL databases, <method namespace="DBTables" class="TTable">EditRangeEnd</method> also works with any columns specified in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.EditRangeStart">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables changing the starting value for an existing range.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">EditRangeStart</method> to change the starting value for an existing range. To specify a start range value, call FieldByName after calling <method namespace="DBTables" class="TTable">EditRangeStart</method>. After assigning a new ending value, call <method namespace="dbtables" class="ttable">ApplyRange</method> to activate the modified range.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>With Paradox or dBASE tables, <method namespace="DBTables" class="TTable">EditRangeStart</method> works only on indexed fields. With SQL databases, <method namespace="DBTables" class="TTable">EditRangeStart</method> also works with any columns specified in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.EmptyTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Deletes all records from the table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <method namespace="DBTables" class="TTable">EmptyTable</method> method deletes all records from the database table specified by the DatabaseName and <property namespace="dbtables" class="ttable">TableName</property> properties.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Deletion of records can fail if the user lacks sufficient privileges to perform the delete operation.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.FindNearest">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves the cursor to the record that most closely matches a specified set of key values.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">FindNearest</method> to move the cursor to a specific record in a dataset or to the first record in the dataset that is greater than the values specified in the KeyValues parameter. KeyValues contains a comma-delimited array of field values, called a key. Each value in the key can be a literal, a variable, or nil (Delphi) or NULL (C++). If the number of values passed in KeyValues is less than the number of columns in the index used for the search, the missing values are assumed to be null. KeyValues_Size specifies the index of the last value in KeyValues (one less than the total number of values supplied). In the statement below, the <method namespace="dbtables" class="ttable">FindKey</method> method is used to find the table row with the value "'Princess Island SCUBA" in the index field.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Table1.FindNearest(['Princess Island SCUBA']);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">TVarRec vr = ("Princess Island SCUBA");
Table1-&gt;FindNearest(&amp;vr, 0);</codeBlock>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>In C++ code, the search values can be passed to <method namespace="DBTables" class="TTable">FindNearest</method> using either a TVarRec (as above) or an ARRAYOFCONST construct. The example below performs the same search as the preceding example, but using ARRAYOFCONST.</para>
                  
            </note>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Table1-&gt;FindNearest(ARRAYOFCONST(("Princess Island SCUBA")));</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For Paradox and dBASE tables, the key must always be an index, which can be specified in the <property namespace="dbtables" class="ttable">IndexName</property> property. If <property namespace="dbtables" class="ttable">IndexName</property> is empty, <method namespace="DBTables" class="TTable">FindNearest</method> uses the table's primary index. Note that <method namespace="dbtables" class="ttable">FindKey</method> does not work with dBASE expression indexes. Use the <method namespace="dbtables" class="ttable">GotoKey</method> or <method namespace="dbtables" class="ttable">GotoNearest</method> method instead.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL tables, the key may correspond to a specified index in <property namespace="dbtables" class="ttable">IndexName</property>, or to a list of field names in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">FindNearest</method> positions the cursor either on a record that exactly matches the search criteria, or on the first record whose values are greater than those specified in the search criteria. If there are no records that match or exceed the specified criteria, <method namespace="DBTables" class="TTable">FindNearest</method> positions the cursor on the last record in the table. KeyExclusive affects the boundary conditions of ranges and will affect the record selected by <method namespace="DBTables" class="TTable">FindNearest</method>.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetDetailLinkFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the field components that link this dataset as a detail of a master dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">GetDetailLinkFields</method> fills two lists of TFields that define a master-detail relationship between this table and another (master) dataset. The <property namespace="dbtables" class="ttable">MasterFields</property> list is filled with fields from the master table whose values must equal the values of the fields in the DetailFields list. The DetailFields list is filled with fields from the calling dataset.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetIndexNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Retrieves a list of available indexes for a table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">GetIndexNames</method> to retrieve a list of all available indexes for a table. List is a string list object, created and maintained by the application, into which to retrieve the index names.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Table1.GetIndexNames(ListBox1.Items);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Table1-&gt;GetIndexNames(ListBox1-&gt;Items);</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GotoCurrent">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Synchronizes the current record for this table with the current record of a specified table component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">GotoCurrent</method> to synchronize the cursor position for this table with the cursor position in another dataset that uses a different data source component, but which is connected to the same underlying database table. Table is the name of the table component whose cursor position to use for synchronizing.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>This procedure works only for table components that have the same DatabaseName and <property namespace="dbtables" class="ttable">TableName</property> properties. Otherwise, <method namespace="DBTables" class="TTable">GotoCurrent</method> raises an exception.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">GotoCurrent</method> is mainly for use in applications that have two table components that are linked to the same underlying database table through different data source components. It enables an application to ensure that separate views of the data appear to be linked.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GotoNearest">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Moves the cursor to the record that most closely matches the current key.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">GotoNearest</method> to position the cursor on the record that is either the exact record specified by the current key values in the key buffer, or on the first record whose values exceed those specified. If there are no records that match or exceed the specified criteria, <method namespace="DBTables" class="TTable">GotoNearest</method> positions the cursor on the last record in the table. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Before calling <method namespace="DBTables" class="TTable">GotoNearest</method>, an application must specify key values by calling <method namespace="dbtables" class="ttable">SetKey</method> or <method namespace="dbtables" class="ttable">EditKey</method> to put the dataset is dsSetKey state, and then use FieldByName to populate the key buffer property with search values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For Paradox and dBASE tables, the key must always be an index, which can be specified in the <property namespace="dbtables" class="ttable">IndexName</property> property. If <property namespace="dbtables" class="ttable">IndexName</property> is empty, <method namespace="DBTables" class="TTable">GotoNearest</method> uses the table's primary index. <method namespace="DBTables" class="TTable">GotoNearest</method> works with dBASE expression indexes.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL tables, the key may correspond to a specified index in <property namespace="dbtables" class="ttable">IndexName</property>, or to a list of field names in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>KeyExclusive determines which records are considered part of a search range.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.LockTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Locks a Paradox or dBASE table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">LockTable</method> to lock a Paradox or dBASE table to prevent other applications from placing a particular type of lock on the table. LockType specifies the lock requested by this application.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Requesting a read lock prevents other applications from reading a table. Requesting a write lock prevents other application from writing to a table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can request both types of lock by calling <method namespace="DBTables" class="TTable">LockTable</method> twice, once for each lock type.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.OpenIndexFile">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Opens a specified dBASE non-production index file. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">OpenIndexFile</method> to open a specified dBASE non-production index file. IndexFileName is the name of the file to open. <method namespace="DBTables" class="TTable">OpenIndexFile</method> opens the file and adds its name to the list of index files in the <property namespace="dbtables" class="ttable">IndexFiles</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">While a non-production index file is open, it is maintained.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.RenameTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Renames the Paradox or dBASE table associated with this table component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">RenameTable</method> to give a new name to the Paradox or dBASE table underlying this table component. <method namespace="DBTables" class="TTable">RenameTable</method> renames the table and any support files (for example, Paradox .DB and .MB files).</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SetKey">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables setting of keys and ranges for a dataset prior to a search.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">SetKey</method> to put the dataset into ds<method namespace="DBTables" class="TTable">SetKey</method> state and clear the current contents of the key buffer. The FieldByName method can then be used to supply a new set of search values prior to conducting a search.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To modify an existing key or range, call <method namespace="dbtables" class="ttable">EditKey</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SetRange">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the starting and ending values of a range, and applies it.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">SetRange</method> to specify a range and apply it to the dataset. The new range replaces the currently applied range, if any.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">StartValues indicates the field values that designate the first record in the range. StartValues_Size specifies the index of the last value in StartValues (one less than the total number of values). </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">EndValues indicates the field values that designate the last record in the range. EndValues_Size specifies the index of the last value in EndValues (one less than the total number of values).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">SetRange</method> combines the functionality of <method namespace="DBTables" class="TTable">SetRange</method>Start, <method namespace="DBTables" class="TTable">SetRange</method>End, and <method namespace="dbtables" class="ttable">ApplyRange</method> in a single procedure call. <method namespace="DBTables" class="TTable">SetRange</method> performs the following functions:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1Puts the dataset into dsSetKey state.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2Erases any previously specified starting range values and ending range values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3Sets the start and end range values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4Applies the range to the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If either StartValues or EndValues has fewer elements than the number of fields in the current index, then the remaining entries are set to NULL.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After a call to <method namespace="DBTables" class="TTable">SetRange</method>, the cursor is left on the first record in the range.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>With Paradox or dBASE tables, <method namespace="DBTables" class="TTable">SetRange</method> works only on indexed fields. With SQL databases, <method namespace="DBTables" class="TTable">SetRange</method> also works with any columns specified in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SetRangeEnd">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates that subsequent assignments to field values specify the end of the range of rows to include in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">SetRangeEnd</method> to put the dataset into dsSetKey state, erase any previous end range values, and set them to NULL. Subsequent key buffer field assignments can be made using the FieldByName method to set the ending values for a range.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After assigning end-range values to FieldValues, call <method namespace="dbtables" class="ttable">ApplyRange</method> to activate the modified range.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>With Paradox or dBASE tables, <method namespace="DBTables" class="TTable">SetRangeEnd</method> works only on indexed fields. With SQL databases, <method namespace="DBTables" class="TTable">SetRangeEnd</method> also works with any columns specified in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SetRangeStart">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates that subsequent assignments to field values specify the start of the range of rows to include in the dataset.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">SetRangeStart</method> to put the dataset into dsSetKey state, erase any previous start range values, and set them to NULL. Subsequent field assignments to the FieldValues property indicate the actual set of starting values for a range. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After assigning start-range values to FieldValues, call <method namespace="dbtables" class="ttable">ApplyRange</method> to activate the modified range.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>With Paradox or dBASE tables, <method namespace="DBTables" class="TTable">SetRangeStart</method> works only on indexed fields. With SQL databases, <method namespace="DBTables" class="TTable">SetRangeStart</method> also works with any columns specified in the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.UnlockTable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removes a previously applied lock on a Paradox or dBASE table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TTable">UnlockTable</method> to remove a lock previously applied to a Paradox or dBASE table. LockType specifies the lock to remove.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Removing a read lock enables other applications to read a table. Removing a write lock enables other application to write to a table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can remove both types of lock by calling <method namespace="DBTables" class="TTable">UnlockTable</method> twice, once for each lock type.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TTable">Destroy</method>s the instance of a table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TTable">Destroy</method> directly. Instead, call Free, which verifies that the table is not nil before calling <method namespace="DBTables" class="TTable">Destroy</method>. <method namespace="DBTables" class="TTable">Destroy</method> frees the index files list for the table, frees its data link, frees its index definitions, and then calls its inherited destructor.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Exists">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the underlying database table exists.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBTables" class="TTable">Exists</property> at runtime to determine whether a database table exists. If the table does not exist, create a table from the field definitions and index definitions using the <method namespace="dbtables" class="ttable">CreateTable</method> method. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This property is read-only.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexFieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of fields that comprise the current key.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TTable">IndexFieldCount</property> to determine the number of fields that comprise the current index. For indexes based on a single column, <property namespace="DBTables" class="TTable">IndexFieldCount</property> returns 1. For multi-column indexes, <property namespace="DBTables" class="TTable">IndexFieldCount</property> indicates the number of fields upon which the index is based.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the fields of the current index.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TTable">IndexFields</property> is a zero-based array of field objects, each of which corresponds to a field in the current index. Index is an ordinal value indicating the position of a field in the index. The first field in the index is <property namespace="DBTables" class="TTable">IndexFields</property>[0], the second is <property namespace="DBTables" class="TTable">IndexFields</property>[1], and so on.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not set <property namespace="DBTables" class="TTable">IndexFields</property> directly. Instead use the <property namespace="dbtables" class="ttable">IndexFieldNames</property> property to order datasets on the fly at runtime.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeyExclusive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how the upper and lower boundaries for a range should be interpreted.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">KeyExclusive</property> to specify whether a range includes or excludes the records that match the starting and ending values of the range. By default, <property namespace="DBTables" class="TTable">KeyExclusive</property> is false, meaning that matching values are included.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To restrict a range to those records that are greater than the specified starting value and less than the specified ending value, set <property namespace="DBTables" class="TTable">KeyExclusive</property> to true.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeyFieldCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the number of fields to use when conducting a partial key search on a multi-field key.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">KeyFieldCount</property> to limit a search based on a multi-field key to a consecutive subset of those fields. For example, if the primary key for a dataset consists of three fields, a partial-key search can be conducted using only the first field in the key by setting <property namespace="DBTables" class="TTable">KeyFieldCount</property> to 1. If <property namespace="DBTables" class="TTable">KeyFieldCount</property> is 0, the dataset searches on all fields in the key.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Searches are only conducted based on consecutive key fields beginning with the first field in the key. For example if a key consists of three fields, an application can set <property namespace="DBTables" class="TTable">KeyFieldCount</property> to 1 to search on the first field, 2 to search on the first and second fields, or 3 to search on all fields. By default <property namespace="DBTables" class="TTable">KeyFieldCount</property> is initially set to include all fields in a search.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TableLevel">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) driver-dependent table level.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">TableLevel</property> when creating a table to specify that the table associated with this dataset requires a specific level of BDE driver. If <property namespace="DBTables" class="TTable">TableLevel</property> is 0, the default, this property is ignored.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For more information about BDE driver table level specification, see the online BDE help file, BDE32.HLP.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DefaultIndex">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies if the data in the table should be ordered on a default index when opened.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When this property is set to false, the BDE does not use an ORDER BY clause when opening a table on a SQL server. When <property namespace="DBTables" class="TTable">DefaultIndex</property> is true, the BDE attempts to order the data based on the primary key or a unique index when opening the table. <property namespace="DBTables" class="TTable">DefaultIndex</property> defaults to true.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Exclusive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Enables an application to gain sole access to a Paradox or dBASE table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">Exclusive</property> to prevent other applications from accessing a Paradox or dBASE table while it is open in this application. Before opening the table, set <property namespace="DBTables" class="TTable">Exclusive</property> to true. A table must be closed before changing the <property namespace="DBTables" class="TTable">Exclusive</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TTable">Exclusive</property> is true, then when the application successfully opens the table, no other application can access it. If the table for which the application has requested exclusive access is already in use by another application, an exception is raised. To handle such exceptions, wrap the code that opens the table in a try..catchexcept block.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not set <property namespace="DBTables" class="TTable">Exclusive</property> to true at design time if you also set the <property namespace="dbtables" class="tsession">Active</property> property to true at design time. In this case an exception is raised because the table is already in use by the IDE.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application can attempt to set <property namespace="DBTables" class="TTable">Exclusive</property> to true for SQL tables, but some SQL servers do not support exclusive table locking. Others may grant an exclusive read/write lock, but still permit read-only access to other applications. For more information about exclusive locking of database tables for a specific server, see the server's documentation.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains information about the indexes for a table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TTable">IndexDefs</property> is a collection of index definitions, each of which describes an available index for the table. Define the index definitions of a table before calling <method namespace="dbtables" class="ttable">CreateTable</method> or creating a table at design time.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Ordinarily, an application accesses or specifies indexes at runtime through the <property namespace="dbtables" class="ttable">IndexFieldNames</property> or <property namespace="dbtables" class="ttable">IndexFields</property> properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TTable">IndexDefs</property> is updated or manually edited, the <property namespace="dbtables" class="ttable">StoreDefs</property> property becomes true.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The index definitions in <property namespace="DBTables" class="TTable">IndexDefs</property> may not always reflect the current indexes available for a table. Before examining <property namespace="DBTables" class="TTable">IndexDefs</property>, call its Update method to refresh the list.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexFieldNames">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Lists the columns to use as an index for a table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">IndexFieldNames</property> as an alternative method of specifying the index to use for a table. In <property namespace="DBTables" class="TTable">IndexFieldNames</property>, specify the name of each column to use as an index for a table. Ordering of column names is significant. Separate names with semicolon.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For Paradox and dBASE any column names specified in <property namespace="DBTables" class="TTable">IndexFieldNames</property> must already be indexed. This must be a single index using the same fields in the same order as specified in <property namespace="DBTables" class="TTable">IndexFieldNames</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For SQL-based tables, the specified columns need not be indexed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The <property namespace="DBTables" class="TTable">IndexFieldNames</property> and <property namespace="dbtables" class="ttable">IndexName</property> properties are mutually exclusive. Setting one clears the other.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexFiles">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies one or more dBASE index file to use for a dBASE table that uses non-production indexes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">IndexFiles</property> to specify dBASE non-production index files and dBASE III PLUS-style .NDX indexes to use with the table. Set <property namespace="DBTables" class="TTable">IndexFiles</property> to the name of the non-production .MDX file. All index tags in the file become available for activation. This is as opposed to the index tags for a production index that become available automatically on opening the table. When using dBASE III PLUS-style .NDX indexes, add individual files to the list in the <property namespace="DBTables" class="TTable">IndexFiles</property> property. Both types of indexes become accessible through such means as the <property namespace="dbtables" class="ttable">IndexName</property> property and the <method namespace="dbtables" class="ttable">GetIndexNames</method> method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When index files are added to the list of available indexes, the table component opens them. The indexes are updated as data is added to, changed in, or deleted from the table. When files are removed from the list, the table component closes them, and they are no longer maintained.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time, use the Object Inspector to add or remove index file names for the <property namespace="DBTables" class="TTable">IndexFiles</property> property. At runtime, set <property namespace="DBTables" class="TTable">IndexFiles</property> as a string list.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.IndexName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies a secondary index for the table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">IndexName</property> to specify an alternative index for a table. If <property namespace="DBTables" class="TTable">IndexName</property> is empty, a table's sort order is based on its default index, or, for dBASE tables, on its physical record order.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TTable">IndexName</property> contains a valid index name, then that index determines the sort order of records. For dBASE tables, an index name supplied to the <property namespace="DBTables" class="TTable">IndexName</property> property must either reside in the table's master index file, or in another index file already specified in the <property namespace="dbtables" class="ttable">IndexFiles</property> property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>IndexFieldNames and <property namespace="DBTables" class="TTable">IndexName</property> are mutually exclusive. Setting one clears the other.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.MasterFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies one or more fields in a master table to link with corresponding fields in this table in order to establish a master-detail relationship between the tables.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">MasterFields</property> after setting the <property namespace="dbtables" class="ttable">MasterSource</property> property to specify the names of one or more fields to use in establishing a detail-master relationship between this table and the one specified in <property namespace="dbtables" class="ttable">MasterSource</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TTable">MasterFields</property> is a string containing one or more field names in the master table. Separate field names with semicolons.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each time the current record in the master table changes, the new values in those fields are used to select corresponding records in this table for display.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time, use the Field Link designer to establish the master-detail relationship between two tables.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.MasterSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of the data source for a dataset to use as a master table in establishing a detail-master relationship between this table and another one.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">MasterSource</property> to specify the name of the data source component whose DataSet property identifies a dataset to use as a master table in establishing a detail-master relationship between this table and another one.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time choose an available data source from the <property namespace="DBTables" class="TTable">MasterSource</property> property's drop-down list in the Object Inspector.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After setting the <property namespace="DBTables" class="TTable">MasterSource</property> property, specify which fields to use in the master table by setting the <property namespace="dbtables" class="ttable">MasterFields</property> property. At runtime each time the current record in the master table changes, the new values in those fields are used to select corresponding records in this table for display.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>At design time, use the Field Link designer to establish the master-detail relationship between two tables.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ReadOnly">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether a table is read-only for this application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use the <property namespace="DBTables" class="TTable">ReadOnly</property> property to prevent users from updating, inserting, or deleting data in the table. By default, <property namespace="DBTables" class="TTable">ReadOnly</property> is false, meaning users can potentially alter a table's data.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Even if <property namespace="DBTables" class="TTable">ReadOnly</property> is false, users may not be able to modify or add data to a table. Other factors, such as insufficient SQL privileges for the application or its current user may prevent successful alterations.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To guarantee that users cannot modify or add data to a table,</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1Set the <property namespace="dbtables" class="tsession">Active</property> property to false.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2Set <property namespace="DBTables" class="TTable">ReadOnly</property> to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When <property namespace="DBTables" class="TTable">ReadOnly</property> is true, the table's <property namespace="dbtables" class="ttable">CanModify</property> property is false.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.StoreDefs">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether the table's field and index definitions persist with the data module or form.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TTable">StoreDefs</property> is true, the table's index and field definitions are stored with the data module or form. Setting <property namespace="DBTables" class="TTable">StoreDefs</property> to true makes the <method namespace="dbtables" class="ttable">CreateTable</method> method into a one-step procedure that creates fields, indexes, and validity checks at runtime.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TTable">StoreDefs</property> is false by default. It becomes true whenever FieldDefs or <property namespace="dbtables" class="ttable">IndexDefs</property> is updated or edited manually; to prevent edited (or imported) definitions from being stored, reset <property namespace="DBTables" class="TTable">StoreDefs</property> to false.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the name of the database table that this component encapsulates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">TableName</property> to specify the name of the database table this component encapsulates. To set <property namespace="DBTables" class="TTable">TableName</property> to a meaningful value, the DatabaseName property should already be set. If DatabaseName is set at design time, then select a valid table name from the <property namespace="DBTables" class="TTable">TableName</property> drop-down list in the Object Inspector.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To set <property namespace="DBTables" class="TTable">TableName</property>, the <property namespace="dbtables" class="tsession">Active</property> property must be false.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.TableType">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the database table structure for the table that this component represents.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TTable">TableType</property> to specify the database table structure for a dBASE, Paradox, FoxPro or ASCII table. <property namespace="DBTables" class="TTable">TableType</property> does not apply to tables for remote SQL servers. <property namespace="DBTables" class="TTable">TableType</property> can be set to any of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ttDefault</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>(Default) Determine table type based on file extension for the table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ttParadox</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Table is a Paradox table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ttDBase</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Table is a dBASE table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ttFoxPro</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Table is a FoxPro table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ttASCII</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Table is a text file with comma-delimited, quoted strings for each field</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DB or none</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Paradox table</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DBF</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>dBASE table</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>TXT</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>ASCII table</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TTable">TableType</property> is set to ttDefault, the table's file-name extension determines the table type:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Extension</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DB or none</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Paradox table</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>DBF</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>dBASE table</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>TXT</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>ASCII table</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TTable">TableType</property> is ttParadox, ttDBase, ttFoxPro or ttASCII, the table type is assumed to be of the type specified, regardless of the table's file name extension.</para>
         </comments>
      </member>
      <member name="T:DBTables.TBatchMove">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TBatchMove</class> performs database operations on groups of records or entire tables. </para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use a <class namespace="DBTables">TBatchMove</class> object to </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Add the records in a dataset to a database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Delete the records in a dataset from a database table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copy a dataset to create a new database table or overwrite an existing table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the <property namespace="dbtables" class="tbatchmove">Mode</property> property to specify the desired operation. The <property namespace="dbtables" class="tbatchmove">Source</property> and <property namespace="dbtables" class="tbatchmove">Destination</property> properties indicate the datasets whose records are added, deleted, or copied. Other properties further specify how to perform the operation and how to handle problems that <class namespace="DBTables">TBatchMove</class> encounters when performing its operation. Once you have set properties to indicate what you want to do, call the <method namespace="dbtables" class="tbatchmove">Execute</method> method to perform the actual operation. </para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>TTable objects can also perform the same batch operations, but only using the options specified by the default <class namespace="DBTables">TBatchMove</class> property values.</para>
            
            </note>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Applications can use a <class namespace="dbtables">TBDECallback</class> object to further refine the response to problems that arise.</para>
            
            </tip>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBatchMove">Create</method>s an instance of <method namespace="DBTables" class="TBatchMove">TBatchMove</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TBatchMove">Create</method> to create an instance of <method namespace="DBTables" class="TBatchMove">TBatchMove</method> for performing a batch operation. <method namespace="DBTables" class="TBatchMove">Create</method> allocates the memory for the <method namespace="DBTables" class="TBatchMove">TBatchMove</method> object and</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets <property namespace="dbtables" class="tbatchmove">AbortOnKeyViol</property> to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets <property namespace="dbtables" class="tbatchmove">AbortOnProblem</property> to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets <property namespace="dbtables" class="tbatchmove">Transliterate</property> to true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBatchMove">Create</method>s a TStringList object to hold the <property namespace="dbtables" class="tbatchmove">Mappings</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The property settings made by <method namespace="DBTables" class="TBatchMove">Create</method> are the values used when a <class namespace="dbtables">TTable</class> object performs batch operations using its <method namespace="dbtables" class="ttable">BatchMove</method> method.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Execute">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Performs the batch operation specified by <property namespace="dbtables" class="tbatchmove">Mode</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After setting properties to indicate what batch operation should be performed and how, call <method namespace="DBTables" class="TBatchMove">Execute</method> to perform the operation. As a minimum, the <property namespace="dbtables" class="tbatchmove">Mode</property>, <property namespace="dbtables" class="tbatchmove">Source</property>, and <property namespace="dbtables" class="tbatchmove">Destination</property> properties must be set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">After calling <method namespace="DBTables" class="TBatchMove">Execute</method>, the values of the <property namespace="dbtables" class="tbatchmove">ChangedCount</property>, <property namespace="dbtables" class="tbatchmove">KeyViolCount</property>, <property namespace="dbtables" class="tbatchmove">MovedCount</property>, <property namespace="dbtables" class="tbatchmove">ProblemCount</property>, and <property namespace="dbtables" class="tbatchmove">RecordCount</property> properties will become available. These properties will give an indication of what happened as a result of the call to <method namespace="DBTables" class="TBatchMove">Execute</method>. Additional information about the batch operation will be available through the creation of a changed table, a keyviol table, and/or a problems table if it was requested.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TBatchMove">Destroy</method>s an instance of <method namespace="DBTables" class="TBatchMove">TBatchMove</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TBatchMove">Destroy</method> directly in an application. Instead, call Free, which checks that the <method namespace="DBTables" class="TBatchMove">TBatchMove</method> object is not nil before calling <method namespace="DBTables" class="TBatchMove">Destroy</method>.Before calling the inherited destructor, <method namespace="DBTables" class="TBatchMove">Destroy</method> frees the TStringList object that implements the <property namespace="dbtables" class="tbatchmove">Mappings</property> property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ChangedCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of records from the <property namespace="dbtables" class="tbatchmove">Destination</property> table that are altered as a result of the batch operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">ChangedCount</property> to learn the number of records in the <property namespace="dbtables" class="tbatchmove">Destination</property> table that are updated if the <property namespace="dbtables" class="tbatchmove">Mode</property> is batUpdate or batAppendUpdate, or to learn the number that are deleted if the <property namespace="dbtables" class="tbatchmove">Mode</property> is batDelete. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set the <property namespace="dbtables" class="tbatchmove">ChangedTableName</property> property to save the unchanged versions of the altered records to a separate table. <property namespace="DBTables" class="TBatchMove">ChangedCount</property> is then the number of records in that separate table.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeyViolCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reports the number of records which could not be replaced, added, or deleted from <property namespace="dbtables" class="tbatchmove">Destination</property> because of integrity or key violations.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">KeyViolCount</property> to learn the number of records form the <property namespace="dbtables" class="tbatchmove">Source</property> table that could not be applied to the <property namespace="dbtables" class="tbatchmove">Destination</property> table because of integrity or key violations. To obtain a table of the offending records from the <property namespace="dbtables" class="tbatchmove">Source</property> table, specify a <property namespace="dbtables" class="tbatchmove">KeyViolTableName</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Key violations occur when appending records to a table that has a primary key. On a table with a primary key, no two records may have the same values on all of the key fields. If a record that is being appended has the same values on all the key fields as a record in the destination table, it cannot be appended.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Integrity violations occur when deleting, appending or updating records to a table that has a referential integrity specification. A referential integrity specification requires that certain fields in one table must have values that exist in a particular field of another table. If a record that is being added does not match the restrictions imposed by referential integrity, it cannot be added. If deleting record would cause tighter referential integrity restrictions that another table cannot meet, it cannot be deleted.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <property namespace="dbtables" class="tbatchmove">AbortOnKeyViol</property> is true, <property namespace="DBTables" class="TBatchMove">KeyViolCount</property> will never be greater than one, because the first violation will cause the batch operation to terminate.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.MovedCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Reports the number of records form the <property namespace="dbtables" class="tbatchmove">Source</property> which were applied to the destination.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBTables" class="TBatchMove">MovedCount</property> to learn the number of records from the <property namespace="dbtables" class="tbatchmove">Source</property> that were read during the <method namespace="dbtables" class="tbatchmove">Execute</method> method. The <property namespace="DBTables" class="TBatchMove">MovedCount</property> value includes any records which caused key or integrity violations, or which were trimmed.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ProblemCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of records which could not be added to <property namespace="dbtables" class="tbatchmove">Destination</property> without loss of data due to a field type mismatch.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Read <property namespace="DBTables" class="TBatchMove">ProblemCount</property> to learn the number of records from the <property namespace="dbtables" class="tbatchmove">Source</property> that had field values which could not be mapped to destination fields without being "trimmed". If a <property namespace="dbtables" class="tbatchmove">ProblemTableName</property> is specified, <property namespace="DBTables" class="TBatchMove">ProblemCount</property> is the number of records in that table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming a field means converting its value to a value compatible with the destination field type. For example, if a field in the destination table holds a string of size 10 characters, and the corresponding field in the source table holds a string of size 15 characters, any values from the source table longer than 10 characters must be truncated. Values that cannot be converted will cause <property namespace="DBTables" class="TBatchMove">TBatchMove</property> to raise an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming does not occur when the <property namespace="dbtables" class="tbatchmove">Mode</property> property is set to batCopy. Trimming fields on a delete operation means that records in the destination table may be deleted that do not exactly match the values from the source table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <property namespace="dbtables" class="tbatchmove">AbortOnProblem</property> is true, then <property namespace="DBTables" class="TBatchMove">ProblemCount</property> will be at most one, because the operation aborts when the problem occurs.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.AbortOnKeyViol">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the batch operation is terminated immediately when integrity or key violations occur.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">AbortOnKeyViol</property> to true to cancel the batch operation when it causes integrity or key violations in the destination table. Set <property namespace="DBTables" class="TBatchMove">AbortOnKeyViol</property> to false to cause records that would cause integrity or key violations to be posted to a key violations table instead. Provide a <property namespace="dbtables" class="tbatchmove">KeyViolTableName</property> when setting <property namespace="DBTables" class="TBatchMove">AbortOnKeyViol</property> to false. If there is no <property namespace="dbtables" class="tbatchmove">KeyViolTableName</property>, <property namespace="DBTables" class="TBatchMove">AbortOnKeyViol</property> may still be set to false, in which case problem records are counted but not saved in a table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Key violations occur when appending records to a table that has a primary key. On a table with a primary key, no two records may have the same values on all of the key fields. If a record that is being appended has the same values on all the key fields as a record in the destination table, it cannot be appended.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Integrity violations occur when deleting, appending or updating records to a table that has a referential integrity specification. A referential integrity specification requires that certain fields in one table must have values that exist in a particular field of another table. If a record that is being added does not match the restrictions imposed by referential integrity, it cannot be added. If deleting record would cause tighter referential integrity restrictions that another table cannot meet, it cannot be deleted.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.AbortOnProblem">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the batch operation is terminated immediately when it is necessary to truncate data to make it fit in the specified <property namespace="dbtables" class="tbatchmove">Destination</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">AbortOnProblem</property> to true to cancel the batch operation when types of the fields in the <property namespace="dbtables" class="tbatchmove">Source</property> table records do not match the types of the fields in the <property namespace="dbtables" class="tbatchmove">Destination</property> table records. Set <property namespace="DBTables" class="TBatchMove">AbortOnProblem</property> to false to cause the mismatched fields to be "trimmed". When <property namespace="DBTables" class="TBatchMove">AbortOnProblem</property> is false, set the <property namespace="dbtables" class="tbatchmove">ProblemTableName</property> to have all the untrimmed versions of records that were trimmed saved to a separate table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming a field means converting its value to a value compatible with the destination field type. For example, if a field in the destination table holds a string of size 10 characters, and the corresponding field in the source table holds a string of size 15 characters, any values from the source table longer than 10 characters must be truncated. Values that cannot be converted will cause <property namespace="DBTables" class="TBatchMove">TBatchMove</property> to raise an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming does not occur when the <property namespace="dbtables" class="tbatchmove">Mode</property> property is set to batCopy. Trimming fields on a delete operation means that records in the destination table may be deleted that do not exactly match the values from the source table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To allow trimming on a field by field basis, use a <class namespace="dbtables">TBDECallback</class> object.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.CommitCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies how many records are batch moved before a commit occurs.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">CommitCount</property> to chunk batch operations into smaller operations. <property namespace="DBTables" class="TBatchMove">CommitCount</property> allows an application to accommodate server transaction logs that are not big enough to handle the entire batch. Setting <property namespace="DBTables" class="TBatchMove">CommitCount</property> to 0 will cause chunking into the number of records that will fit in 32Kb.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If the <method namespace="dbtables" class="tbatchmove">Execute</method> method is called within an explicit transaction on the database containing the tables, <property namespace="DBTables" class="TBatchMove">CommitCount</property> is ignored.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ChangedTableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of a local Paradox table that is created to hold copies of all records from the destination table changed by the batch operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">ChangedTableName</property> to create a table that saves all unchanged versions of records that are changed by the batch operation. <property namespace="DBTables" class="TBatchMove">ChangedTableName</property> must specify the name of a Paradox table. Setting <property namespace="DBTables" class="TBatchMove">ChangedTableName</property> ensures that no information in the <property namespace="dbtables" class="tbatchmove">Destination</property> table gets lost when the records are altered or deleted.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the <property namespace="dbtables" class="tbatchmove">Mode</property> property is batUpdate or batAppendUpdate, the new table will hold all records that were updated. When the <property namespace="dbtables" class="tbatchmove">Mode</property> property is batDelete, the new table will hold all records that were deleted.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="dbtables" class="tbatchmove">ChangedCount</property> property specifies the number of records in the new table.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Destination">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the <class namespace="dbtables">TTable</class> object for the database table that is the destination of the batch operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">Destination</property> to indicate the database table that will be created or altered by the batch operation. The batch operation affects the <property namespace="DBTables" class="TBatchMove">Destination</property> differently depending on the <property namespace="dbtables" class="tbatchmove">Mode</property>:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Mode</th>
                        
                  <th>Effect on Destination</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppend</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records are added to the destination table. No pre-existing records are altered. Destination table must already exist.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table with key fields matching the corresponding fields in the source are changed to match the source records. No new records are added. Destination table must already exist and must have an index defined.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppendUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table with key fields matching the corresponding fields in the source are changed to match the source. Source records that do not match key fields are added to the destination table. Destination table must already exist and must have an index defined.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table that match the records in the source are deleted. Destination table must already exist and must have an index defined.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batCopy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Destination table is created to match the records in the source. If <property namespace="dbtables" class="tbatchmove">Destination</property> already exists, it is replaced by the copy of the source.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.KeyViolTableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of a Paradox table that will be created to contain all records from the <property namespace="dbtables" class="tbatchmove">Source</property> that cannot participate in the batch operation because of integrity or key violations.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">KeyViolTableName</property> to obtain a table of records that could not be applied to the <property namespace="dbtables" class="tbatchmove">Destination</property> table because of integrity or key violations. KeyViolCount has the number of records in the table that is created.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Key violations occur when appending records to a table that has a primary key. On a table with a primary key, no two records may have the same values on all of the key fields. If a record that is being appended has the same values on all the key fields as a record in the destination table, it cannot be appended.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Integrity violations occur when deleting, appending or updating records to a table that has a referential integrity specification. A referential integrity specification requires that certain fields in one table must have values that exist in a particular field of another table. If a record that is being added does not match the restrictions imposed by referential integrity, it cannot be added. If deleting record would cause tighter referential integrity restrictions that another table cannot meet, it cannot be deleted.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <property namespace="dbtables" class="tbatchmove">AbortOnKeyViol</property> is true, then there will be at most one record in this table because the operation aborts with that first record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Mappings">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the column mappings for a batch operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">Mappings</property> to specify the correspondence between fields in the <property namespace="dbtables" class="tbatchmove">Source</property> and fields in the <property namespace="dbtables" class="tbatchmove">Destination</property>. By default <property namespace="DBTables" class="TBatchMove">TBatchMove</property> matches fields based on their position in the source and destination tables. That is, the first column in the source is matched with the first column in the destination, and so on. <property namespace="DBTables" class="TBatchMove">Mappings</property> enables an application to override this default.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TBatchMove">Mappings</property> is a list of column mappings (one per line) in one of two forms. To map the column ColName in the source table to the column of the same name in the destination table, use:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ColName</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To map the column named SourceColName in the source table to the column named DestColName in the destination table, use:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DestColName=SourceColName</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When adding or appending records, fields in <property namespace="dbtables" class="tbatchmove">Destination</property> which have no entry in <property namespace="DBTables" class="TBatchMove">Mappings</property> will be set to NULL. When copying a dataset, fields in <property namespace="dbtables" class="tbatchmove">Destination</property> which have no entry in <property namespace="DBTables" class="TBatchMove">Mappings</property> will not appear as columns in the copy of the table.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If source and destination column data types are not the same, <property namespace="DBTables" class="TBatchMove">TBatchMove</property> can either cancel the batch operation or perform a "best fit". If <property namespace="dbtables" class="tbatchmove">AbortOnProblem</property> is true, type mismatches will terminate the batch move. Otherwise, the field values from the <property namespace="dbtables" class="tbatchmove">Source</property> will be converted, if possible, to be compatible with the <property namespace="dbtables" class="tbatchmove">Destination</property>.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Mode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies what the <property namespace="DBTables" class="TBatchMove">TBatchMove</property> object does when the <method namespace="dbtables" class="tbatchmove">Execute</method> method is called.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">Mode</property> to indicate whether the <property namespace="DBTables" class="TBatchMove">TBatchMove</property> object should add records, replace records, delete records, or copy the <property namespace="dbtables" class="tbatchmove">Source</property>. These are the possible values for <property namespace="DBTables" class="TBatchMove">Mode</property>:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppend</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Append the records in the source to the destination table. The destination table must already exist, and the two tables must not have records with duplicate keys. This is the default mode.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Replace records in the destination table with matching records from the source table. The destination table must exist and must have an index defined to match records.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppendUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>If a matching record exists in the destination table, replace it. Otherwise, append records to the destination table. The destination table must exist and must have an index defined to match records.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batCopy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Create the destination table based on the structure of the source table. If the destination already exists, the operation will delete it, and replace it with the new copy of the source.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Delete records in the destination table that match records in the source table. The destination table must already exist and must have an index defined.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ProblemTableName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the name of a Paradox table that will be created to contain all records from the <property namespace="dbtables" class="tbatchmove">Source</property> that contain fields which were trimmed to match the corresponding field type in the <property namespace="dbtables" class="tbatchmove">Destination</property> table.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">ProblemTableName</property> to create a table that holds records from the <property namespace="dbtables" class="tbatchmove">Source</property> that contain fields that had to be trimmed to be applied to the <property namespace="dbtables" class="tbatchmove">Destination</property>. ProblemCount will have the number of records placed in the new table. If <property namespace="DBTables" class="TBatchMove">ProblemTableName</property> is not specified, the data in the record is still trimmed when applied to the destination table, but there will be no easy way to tell which fields were trimmed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming a field means converting its value to a value compatible with the destination field type. For example, if a field in the destination table holds a string of size 10 characters, and the corresponding field in the source table holds a string of size 15 characters, any values from the source table longer than 10 characters must be truncated. Values that cannot be converted will cause <property namespace="DBTables" class="TBatchMove">TBatchMove</property> to raise an exception.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Trimming does not occur when the <property namespace="dbtables" class="tbatchmove">Mode</property> property is set to batCopy. Trimming fields on a delete operation means that records in the destination table may be deleted that do not exactly match the values from the source table.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <property namespace="dbtables" class="tbatchmove">AbortOnProblem</property> is true, then there will be at most one record in this table because the operation aborts with the first record that has a problem.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.RecordCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the maximum number of records that are applied to the <property namespace="dbtables" class="tbatchmove">Destination</property> when <method namespace="dbtables" class="tbatchmove">Execute</method> is called.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">RecordCount</property> to limit the number of <property namespace="dbtables" class="tbatchmove">Source</property> records that are applied to the <property namespace="dbtables" class="tbatchmove">Destination</property>. If zero, all records are added, subtracted, or copied, beginning with the first record in <property namespace="dbtables" class="tbatchmove">Source</property>. If <property namespace="DBTables" class="TBatchMove">RecordCount</property> is greater than zero, up to <property namespace="DBTables" class="TBatchMove">RecordCount</property> records are applied to the <property namespace="dbtables" class="tbatchmove">Destination</property>, starting with the current record in the dataset. If <property namespace="DBTables" class="TBatchMove">RecordCount</property> exceeds the number of records remaining in <property namespace="dbtables" class="tbatchmove">Source</property>, no wraparound occurs; the operation is terminated.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Source">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the dataset that is the source of the batch operation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TBatchMove">Source</property> to indicate the dataset that contains the records that will be added to, subtracted from, or copied to the <property namespace="dbtables" class="tbatchmove">Destination</property>. If <property namespace="DBTables" class="TBatchMove">Source</property> is a <class namespace="dbtables">TQuery</class> component, the query is executed before the move is executed. If a filter is currently in effect on <property namespace="DBTables" class="TBatchMove">Source</property>, the filter conditions are respected when the batch move executes. The <property namespace="dbtables" class="tbatchmove">Mode</property> property indicates how the <property namespace="DBTables" class="TBatchMove">Source</property> records are applied to the <property namespace="dbtables" class="tbatchmove">Destination</property>:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Mode</th>
                        
                  <th>Effect on Destination</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppend</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records are added to the destination table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table with key fields matching the corresponding fields in the source are changed to match the source records.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batAppendUpdate</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table with key fields matching the corresponding fields in the source are changed to match the source. Source records that do not match key fields are added to the destination table.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Records in the destination table that match the records in the source are deleted.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>batCopy</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Destination table is created to match the records in the source.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Transliterate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the data in the <property namespace="dbtables" class="tbatchmove">Source</property> records should be converted form the locale of the <property namespace="dbtables" class="tbatchmove">Source</property> to the locale of the <property namespace="dbtables" class="tbatchmove">Destination</property> when the <method namespace="dbtables" class="tbatchmove">Execute</method> method is called.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TBatchMove">Transliterate</property> to true when the <property namespace="dbtables" class="tbatchmove">Source</property> dataset and the <property namespace="dbtables" class="tbatchmove">Destination</property> table use different language drivers and the data may contain extended ascii characters. Set <property namespace="DBTables" class="TBatchMove">Transliterate</property> to false to avoid the overhead of the character set conversion when both the <property namespace="dbtables" class="tbatchmove">Source</property> and the <property namespace="dbtables" class="tbatchmove">Destination</property> use the same language driver or the data does not contain extended ascii characters.</para>
         </comments>
      </member>
      <member name="T:DBTables.TStoredProc">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TStoredProc</class> encapsulates a stored procedure in a BDE-based application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use a <class namespace="DBTables">TStoredProc</class> object in BDE-based applications to use a stored procedure on a database server. A stored procedure is a grouped set of statements, stored as part of a database server's metadata (just like tables, indexes, and domains), that performs a frequently repeated, database-related task on the server and passes results to the client.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>Not all database servers support stored procedures. See a specific server's documentation to determine if it supports stored procedures.</para>
            
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Many stored procedures require a series of input arguments, or parameters, that are used during processing. <class namespace="DBTables">TStoredProc</class> provides a <property namespace="dbtables" class="tstoredproc">Params</property> property that enables an application to set these parameters before executing the stored procedure.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TStoredProc</class> reuses the <property namespace="dbtables" class="tstoredproc">Params</property> property to hold the results returned by a stored procedure. Params is an array of values. Depending on server implementation, a stored procedure can return either a single set of values, or a result set similar to the result set returned by a query.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.DescriptionsAvailable">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines if parameter information is available from the stored procedure on the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">DescriptionsAvailable</method> to determine if a stored procedure on a server can return parameter information to the application. If <method namespace="DBTables" class="TStoredProc">DescriptionsAvailable</method> returns true, parameter information is available from the server. If <method namespace="DBTables" class="TStoredProc">DescriptionsAvailable</method> returns false, parameter information is not available.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If <method namespace="DBTables" class="TStoredProc">DescriptionsAvailable</method> returns false, the application must still provide correct parameter information to the stored procedure on the server. It is up to the application developer to know the necessary parameters at design time.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ParamByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Accesses parameter information based on a specified parameter name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">ParamByName</method> to return parameter information for a specific parameter based on its name. Value is the name of the parameter for which to retrieve information. Typically <method namespace="DBTables" class="TStoredProc">ParamByName</method> is used to set an input parameter's value at runtime, or to retrieve the value of an output parameter. The following command line assigns the value "Jane Smith" as the value for the parameter named Contact:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">StoredProc1.ParamByName('Contact').AsString := 'Jane Smith';</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">StoredProc1-&gt;ParamByName("Contact")-&gt;AsString = "Jane Smith";</codeBlock>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TStoredProc">Create</method>s an instance of a stored procedure component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">Create</method> to instantiate a stored procedure declared in an application. <method namespace="DBTables" class="TStoredProc">Create</method> calls its inherited <method namespace="DBTables" class="TStoredProc">Create</method> constructor, creates an empty parameter list for the newly instantiated stored procedure, and initializes its parameter, server, and record buffers to nil (Delphi) or NULL (C++).</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.CopyParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Copies a stored procedure's parameters into another parameter list.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">CopyParams</method> to copy this stored procedure's parameters into a separate parameter list object. Value is the parameter list into which to assign this stored procedure's parameters. Value can be the parameter list of another stored procedure. For example:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">TStoredProc1.CopyParams(TStoredProc2.Params);</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">StoredProc1-&gt;CopyParams(StoredProc2-&gt;Params);</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the stored procedure is not prepared when an application calls <method namespace="DBTables" class="TStoredProc">CopyParams</method>, <method namespace="DBTables" class="TStoredProc">CopyParams</method> calls <method namespace="dbtables" class="tstoredproc">Prepare</method> before assigning the parameters to the target parameters list, and then calls <method namespace="dbtables" class="tstoredproc">UnPrepare</method> to return the stored procedure to its previous state.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ExecProc">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes the stored procedure on the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">ExecProc</method> to execute a stored procedure on the server. Before calling <method namespace="DBTables" class="TStoredProc">ExecProc</method>:</para>
            <list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" type="number">
                     
               <item>
                        
                  <para>Provide any input parameters in the <property namespace="dbtables" class="tstoredproc">Params</property> property. At design time, a developer can provide parameters using the Parameters editor. At runtime an application must access <property namespace="dbtables" class="tstoredproc">Params</property> directly.</para>
                     
               </item>
                     
               <item>
                        
                  <para>Call <method namespace="dbtables" class="tstoredproc">Prepare</method> to bind the parameters.</para>
                     
               </item>
                     
               <item>
                        
                  <para>If a stored procedure returns output parameters, they are stored in the <property namespace="dbtables" class="tstoredproc">Params</property> property when <method namespace="DBTables" class="TStoredProc">ExecProc</method> returns control to the application. An application can access the output parameters by indexing into the <property namespace="dbtables" class="tstoredproc">Params</property> list, or by using the <method namespace="dbtables" class="tstoredproc">ParamByName</method> method.</para>
                     
               </item>
                  
            </list>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an application is only interested in the result set returned by a stored procedure, call its <method namespace="dbtables" class="tsession">Open</method> method or set its <property namespace="dbtables" class="tsession">Active</property> property to true.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Prepare">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TStoredProc">Prepare</method>s a stored procedure for execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">Prepare</method> to bind a stored procedure's parameters before calling <method namespace="dbtables" class="tstoredproc">ExecProc</method> to execute the procedure. <method namespace="DBTables" class="TStoredProc">Prepare</method> readies a stored procedure's parameters, initializes the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE), and informs the server of the stored procedure's readiness. These steps allocate system resources and optimize the query for server performance.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an application attempts to execute a stored procedure that has not been prepared, the library automatically prepares the procedure before executing it, and then unprepares it when execution is complete. If a stored procedure will be executed more than once, it is more efficient for an application to call <method namespace="DBTables" class="TStoredProc">Prepare</method> explicitly once to avoid repeated and unnecessary preparing and unpreparing of the stored procedure, and then call Un<method namespace="DBTables" class="TStoredProc">Prepare</method> when the stored procedure is no longer needed.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetResults">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the output parameter values from a Sybase or MSSQL stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">GetResults</method> to force a Sybase or MSSQL stored procedure to return its result set, if any, to the client. For stored procedures on all other servers, result sets are automatically flushed to the client, but Sybase and MSSQL stored procedures do not return a result set until the cursor is positioned at the end of the set. <method namespace="DBTables" class="TStoredProc">GetResults</method> forces the cursor to the end of the set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If a stored procedure returns a result set and output parameters in response to <method namespace="DBTables" class="TStoredProc">GetResults</method>, the output parameters are stored in the <property namespace="dbtables" class="tstoredproc">Params</property> property. An application can access the output parameters by indexing into the <property namespace="dbtables" class="tstoredproc">Params</property> list, or by using the <method namespace="dbtables" class="tstoredproc">ParamByName</method> method.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an application is only interested in the result set returned by a stored procedure, call <method namespace="dbtables" class="tsession">Open</method> or set the <property namespace="dbtables" class="tsession">Active</property> property to true.</para>
                  
            </tip>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.UnPrepare">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees the resources allocated for a previously prepared stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TStoredProc">UnPrepare</method> to free the resources allocated for a previously prepared stored procedure on the server and client sides.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TStoredProc">Destroy</method>s the instance of a stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TStoredProc">Destroy</method> directly. Instead, call Free, which verifies that the stored procedure is not nil before calling <method namespace="DBTables" class="TStoredProc">Destroy</method>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TStoredProc">Destroy</method> disconnects from the server, frees the parameter list, and calls its inherited <method namespace="DBTables" class="TStoredProc">Destroy</method> destructor.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Handle">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) cursor handle for the stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TStoredProc">Handle</property> only to bypass <property namespace="DBTables" class="TStoredProc">TStoredProc</property> methods and call directly into the BDE. Many BDE function calls require a cursor handle parameter. <property namespace="DBTables" class="TStoredProc">Handle</property> is assigned an initial value when a stored procedure is executed. If used with a BDE call that changes the current record position, call Resync immediately after returning from the BDE call.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not use this property unless an application requires BDE functionality not available through built-in components.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ParamCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the number of parameters for the stored procedure component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TStoredProc">ParamCount</property> to determine the number of parameters currently stored in the <property namespace="dbtables" class="tstoredproc">Params</property> property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Prepared">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether or not a stored procedure is prepared for execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TStoredProc">Prepared</property> to determine if a stored procedure is already prepared for execution. If <property namespace="DBTables" class="TStoredProc">Prepared</property> is true, the stored procedure is prepared, and if <property namespace="DBTables" class="TStoredProc">Prepared</property> is false, the procedure is not prepared. A stored procedure must be prepared before it can be executed.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>The library automatically prepares a stored procedure if it is unprepared when the application calls <method namespace="dbtables" class="tstoredproc">ExecProc</method> and unprepares it afterwards. If a procedure will be executed a number of times, it is more efficient for the application to prepare the stored procedure once, and unprepare it when it is no longer needed.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can change the current setting of <property namespace="DBTables" class="TStoredProc">Prepared</property> to prepare or unprepare a stored procedure. If <property namespace="DBTables" class="TStoredProc">Prepared</property> is true, setting it to false calls the <method namespace="dbtables" class="tstoredproc">Unprepare</method> method to unprepare the stored procedure. If <property namespace="DBTables" class="TStoredProc">Prepared</property> is false, setting it to true calls the <method namespace="dbtables" class="tstoredproc">Prepare</method> method to prepare the procedure. Generally, however, it is better programming practice to call <method namespace="dbtables" class="tstoredproc">Prepare</method> and <method namespace="dbtables" class="tstoredproc">Unprepare</method> directly. These methods automatically update the <property namespace="DBTables" class="TStoredProc">Prepared</property> property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.StoredProcName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the name of the stored procedure on the server for which this object is an encapsulation.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TStoredProc">StoredProcName</property> to specify the name of the stored procedure to call on the server. If <property namespace="DBTables" class="TStoredProc">StoredProcName</property> does not match the name of an existing stored procedure on the server, then when the application attempts to prepare the procedure prior to execution, an exception is raised.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Overload">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies which Oracle overloaded stored procedure to execute.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TStoredProc">Overload</property> to specify which overloaded stored procedure to execute on an Oracle server. An Oracle overloaded stored procedure is one that shares a name with one or more other stored procedures. Oracle distinguishes among overloaded stored procedures by assigning each procedure a unique numeric identifier. An application can specify this identifier using the <property namespace="DBTables" class="TStoredProc">Overload</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">By default, <property namespace="DBTables" class="TStoredProc">Overload</property> is zero, which assumes there is no procedure overloading. For all servers except Oracle, do not change this value. If an application attempts to access an Oracle overloaded procedure without setting <property namespace="DBTables" class="TStoredProc">Overload</property>, the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) accesses the lowest numbered, or first, overloaded procedure on the server.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TStoredProc">Overload</property> is 1, the BDE executes the first overloaded procedure on the server. If <property namespace="DBTables" class="TStoredProc">Overload</property> is 2, it executes the second, and so on.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>While Oracle overloaded procedures share names, their parameter lists are unique. An application must ensure that it passes the correct parameter list to an overloaded procedure.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Params">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Stores the input and output parameters for a stored procedure.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access <property namespace="DBTables" class="TStoredProc">Params</property> at runtime to set input parameter names, values, and data types dynamically (at design time use the Parameters editor to set parameter information). <property namespace="DBTables" class="TStoredProc">Params</property> is an array of parameter values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application can also access <property namespace="DBTables" class="TStoredProc">Params</property> after executing a stored procedure to retrieve the output parameters returned to the procedure by the server.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ParamBindMode">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines the order in which a component's parameters are assigned to the parameter list for the stored procedure on the server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine or set <property namespace="DBTables" class="TStoredProc">ParamBindMode</property> to determine the order in which parameters in the <property namespace="dbtables" class="tstoredproc">Params</property> property are matched to the parameters used by the stored procedure on the server. <property namespace="DBTables" class="TStoredProc">ParamBindMode</property> can be one of the following:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Ordering</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>pbByName</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Parameters specified in the <property namespace="dbtables" class="tstoredproc">Params</property> property are matched to identically named parameters on the server. This is the default.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>pbByNumber</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Parameters in <property namespace="dbtables" class="tstoredproc">Params</property> are assigned one-by-one to the next available parameter on the server (for example, the first parameter in <property namespace="dbtables" class="tstoredproc">Params</property> is assigned to the first parameter used by the stored procedure, and so on).</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Whenever possible, <property namespace="DBTables" class="TStoredProc">ParamBindMode</property> should be pbByName. This guarantees that parameters are matched to the correct parameters used by the stored procedure regardless of physical ordering in <property namespace="dbtables" class="tstoredproc">Params</property>. At design time, the names of known parameters appear in the Parameters editor.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In some cases stored procedures on the server (for example, Informix) do not provide the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) with parameter names. If parameter names as they exist on the server side are not known at design or runtime, it may be necessary to set <property namespace="DBTables" class="TStoredProc">ParamBindMode</property> to pbByNumber. In this case, however, it is necessary to know the correct data type for each parameter in sequence. Otherwise an exception may be raised on execution.</para>
         </comments>
      </member>
      <member name="T:DBTables.TQuery">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TQuery</class> represents a dataset with a result set that is based on an SQL statement.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="DBTables">TQuery</class> to access one or more tables in a database using SQL statements. Query components can be used with remote database servers (such as Sybase, SQL Server, Oracle, Informix, DB2, and InterBase), with local tables (Paradox, InterBase, dBASE, Access, and FoxPro), and with ODBC-compliant databases.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Query components are useful because they can</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access more than one table at a time (called a "join" in SQL).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Automatically access a subset of rows and columns in its underlying table(s), rather than always returning all rows and columns.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <para>
                  
                  <class namespace="DBTables">TQuery</class> is of particular importance to the development of scalable database applications. If there is any chance that an application built to run against local databases will be scaled to a remote SQL database server in the future, use <class namespace="DBTables">TQuery</class> components from the start to ensure easier scaling later.</para>
            
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ParamByName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Accesses parameter information based on a specified parameter name.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TQuery">ParamByName</method> to set or use parameter information for a specific parameter based on its name.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Value is the name of the parameter for which to retrieve information.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TQuery">ParamByName</method> is primarily used to set an parameter's value at runtime. For example, the following statement retrieves the current value of a parameter called "Contact" into an edit box:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">Edit1.Text := Query1.ParamByName('Contact').AsString;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Edit1-&gt;Text = Query1-&gt;ParamByName("Contact")-&gt;AsString;</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Parameters used in SELECT statements cannot be NULL, but they can be NULL for UPDATE and INSERT statements.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TQuery">Create</method>s an instance of a query component.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TQuery">Create</method> to instantiate a query at runtime. Query components placed in forms or data modules at design time are created automatically.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">AOwner is the component that is responsible for freeing the query. It becomes the value of the Owner property.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ExecSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes the SQL statement for the query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TQuery">ExecSQL</method> to execute the SQL statement currently assigned to the SQL property. Use <method namespace="DBTables" class="TQuery">ExecSQL</method> to execute queries that do not return a cursor to data (such as INSERT, UPDATE, DELETE, and CREATE TABLE).</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>For SELECT statements, call <method namespace="dbtables" class="tsession">Open</method> instead of <method namespace="DBTables" class="TQuery">ExecSQL</method>.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TQuery">ExecSQL</method> prepares the statement in SQL property for execution if it has not already been prepared. To speed performance, an application should ordinarily call <method namespace="dbtables" class="tquery">Prepare</method> before calling <method namespace="DBTables" class="TQuery">ExecSQL</method> for the first time.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.GetDetailLinkFields">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Fills lists with the master and detail fields of the link.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Creates two lists of TFields from the master-detail relationship between two tables; one containing the master fields, and the other containing the detail fields.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Prepare">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sends a query to the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) and the server for optimization prior to execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TQuery">Prepare</method> to have the BDE and a remote database server allocate resources for the query and to perform additional optimizations. Preparing a query consumes some database resources, so it is good practice to call Un<method namespace="DBTables" class="TQuery">Prepare</method> once the query is no longer needed.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the query will only be executed once, the application does not need to explicitly call <method namespace="DBTables" class="TQuery">Prepare</method> or Un<method namespace="DBTables" class="TQuery">Prepare</method>. Executing an unprepared query generates these calls automatically. However, if the same query is to be executed repeatedly, it is more efficient to prevent these automatic calls by calling <method namespace="DBTables" class="TQuery">Prepare</method> and Un<method namespace="DBTables" class="TQuery">Prepare</method> explicitly.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When you change the text of a query at runtime, the query is automatically closed and unprepared.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.UnPrepare">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees the resources allocated for a previously prepared query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TQuery">UnPrepare</method> to free the resources allocated for a previously prepared query on the server and client sides.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Preparing a query consumes some database resources, so it is good practice for an application to unprepare a query once it is done using it. The <method namespace="DBTables" class="TQuery">UnPrepare</method> method unprepares a query.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>When you change the text of a query at runtime, the query is automatically closed and unprepared.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TQuery">Destroy</method>s the instance of a query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TQuery">Destroy</method> directly. Instead, call Free, which checks that the <method namespace="DBTables" class="TQuery">TQuery</method> is not nil before calling <method namespace="DBTables" class="TQuery">Destroy</method>. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TQuery">Destroy</method> disconnects from the server, frees the SQL statement list, the parameter list, and the data link and SQL binary storage area, and then calls its inherited destructor.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Prepared">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether or not a query is prepared for execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Examine <property namespace="DBTables" class="TQuery">Prepared</property> to determine if a query is already prepared for execution. If <property namespace="DBTables" class="TQuery">Prepared</property> is true, the query is prepared, and if <property namespace="DBTables" class="TQuery">Prepared</property> is false, the query is not prepared. While a query need not be prepared before execution, execution performance is enhanced if the query is prepared beforehand, particularly if it is a parameterized query that is executed more than once using the same parameter values.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An application can change the current setting of <property namespace="DBTables" class="TQuery">Prepared</property> to prepare or unprepare a query. If <property namespace="DBTables" class="TQuery">Prepared</property> is true, setting it to false calls the <method namespace="dbtables" class="tquery">UnPrepare</method> method to unprepare the query. If <property namespace="DBTables" class="TQuery">Prepared</property> is false, setting it to true calls the <method namespace="dbtables" class="tquery">Prepare</method> method to prepare the query. Generally, however, it is better programming practice to call <method namespace="dbtables" class="tquery">Prepare</method> and <method namespace="dbtables" class="tquery">UnPrepare</method> directly. These methods automatically update the <property namespace="DBTables" class="TQuery">Prepared</property> property.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ParamCount">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates the current number of parameters for the query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DBTables" class="TQuery">ParamCount</property> to determine how many parameters are in the <property namespace="dbtables" class="tquery">Params</property> property. If the <property namespace="dbtables" class="tquery">ParamCheck</property> property is true, <property namespace="DBTables" class="TQuery">ParamCount</property> always corresponds to the number of actual parameters in the SQL statement for the query.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Local">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether a query references one or more Paradox or dBASE tables rather than SQL tables on a remote server.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Check <property namespace="DBTables" class="TQuery">Local</property> to determine if a query accesses one or more Paradox or dBASE tables rather than SQL tables. If <property namespace="DBTables" class="TQuery">Local</property> is true, then the query only accesses dBASE or Paradox tables. Otherwise <property namespace="DBTables" class="TQuery">Local</property> is false. <property namespace="DBTables" class="TQuery">Local</property> is set automatically when an application calls the query's <method namespace="dbtables" class="tquery">Prepare</method> method prior to executing the query.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Some query component settings, such as <property namespace="dbtables" class="tquery">Constrained</property>, are only meaningful for queries against Paradox and dBASE tables. Others are only meaningful for queries against remote SQL servers. <property namespace="DBTables" class="TQuery">Local</property> can provide useful information for branching logic in code based on the type of database accessed. It can also be used to determine whether or not the BDE parsed a query using its local query engine rather than passing SQL statements directly to a remote server.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Text">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the actual text of the SQL query passed to the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE).</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TQuery">Text</property> is a read-only property that can be examined to determine the actual contents of SQL statement passed to the BDE. For parameterized queries, <property namespace="DBTables" class="TQuery">Text</property> contains the SQL statement with parameters replaced by the parameter substitution symbol (?) in place of actual parameter values.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In general there should be no need to examine the <property namespace="DBTables" class="TQuery">Text</property> property. To access or change the SQL statement for the query, use the SQL property. To examine or modify parameters, use the <property namespace="dbtables" class="tquery">Params</property> property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.RowsAffected">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the number of rows operated upon by the latest query execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Inspect <property namespace="DBTables" class="TQuery">RowsAffected</property> to determine how many rows were updated or deleted by the last query operation. If no rows were updated or deleted, <property namespace="DBTables" class="TQuery">RowsAffected</property> has a value of zero. <property namespace="DBTables" class="TQuery">RowsAffected</property> will have a value of –1 if the execution of the SQL statement could not be executed due to an error condition. This latter situation would typically follow the raising of an exception.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SQLBinary">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Points to the binary data stream that represents an SQL query statement or result set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not access <property namespace="DBTables" class="TQuery">SQLBinary</property>. It is an internal binary data stream used by the query component to communicate directly with the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine. To access or set the SQL statement that this query component executes, use the SQL property. To access or set the parameters used in a parameterized SQL statement, use the <property namespace="dbtables" class="tquery">Params</property> property.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Constrained">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Indicates whether updates and inserts that don't conform to the result set generated by a SELECT statement are permitted for Paradox and dBASE tables</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TQuery">Constrained</property> to determine whether or not edits and insertions are permitted to a Paradox or dBASE table underlying a result set when the UPDATE or INSERT statements contain one or more values that do not comply with the WHERE clause conditions of the SELECT statement that generated the result set. <property namespace="DBTables" class="TQuery">Constrained</property> only applies to live result sets. Constraints are enforced during the editing process.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If <property namespace="DBTables" class="TQuery">Constrained</property> is false (the default), updates and inserts are permitted regardless of the SELECT statement criteria. If true, updates and inserts are not permitted if they violate the criteria of the SELECT statement that generated the result set.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">For example, if <property namespace="DBTables" class="TQuery">Constrained</property> is true and a query component's SQL property is</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT *
FROM CUSTOMERS
WHERE (CUSTNO &gt; 1400) AND (CUSTNO &lt; 1500)</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">then the user would not be allowed to enter a value for CustNo that fell outside this range of values.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DataSource">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the data source component from which to extract current field values to use with same-name parameters in the query's SQL statement.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TQuery">DataSource</property> to automatically fill parameters in a query with fields values from another dataset. Parameters that have the same name as fields in the other dataset are filled with the field values. Parameters with names that are not the same as fields in the other dataset do not automatically get values, and must be programmatically set. For example, if the SQL property of the <property namespace="DBTables" class="TQuery">TQuery</property> contains the SQL statement below and the dataset referenced through <property namespace="DBTables" class="TQuery">DataSource</property> has a CustNo field, the value from the current record in that other dataset is used in the CustNo parameter.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SELECT *
FROM Orders O
WHERE (O.CustNo = :CustNo)</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TQuery">DataSource</property> must point to a T<property namespace="DBTables" class="TQuery">DataSource</property> component linked to another dataset component; it cannot point to this query's data source component.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The dataset specified in <property namespace="DBTables" class="TQuery">DataSource</property> must be created, populated, and opened before attempting to bind parameters. Parameters are bound by calling the query's <method namespace="dbtables" class="tquery">Prepare</method> method prior to executing the query.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>
                        
                  <property namespace="DBTables" class="TQuery">DataSource</property> is especially of use when creating a master-detail relationship between tables using a linked query. It is also of use to guarantee binding for parameters that are not already set in the <property namespace="dbtables" class="tquery">Params</property> property or through a call to the <method namespace="dbtables" class="tquery">ParamByName</method> method.</para>
                  
            </tip>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the SQL statement used by a query does not contain parameters, or all parameters are bound by the application using the <property namespace="dbtables" class="tquery">Params</property> property or the <method namespace="dbtables" class="tquery">ParamByName</method> method, <property namespace="DBTables" class="TQuery">DataSource</property> need not be assigned. The example below shows setting the <property namespace="DBTables" class="TQuery">DataSource</property> property of Query2 to the data source for Query1, preparing Query2, and activating Query2.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">with Query2 do begin
  DataSource := DataSource1;
  Prepare;
  Open;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Query2-&gt;DataSource = DataSource1;
Query2-&gt;Prepare();
Query2-&gt;Open();</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the SQL statement in the <property namespace="DBTables" class="TQuery">TQuery</property> is a SELECT query, the query is executed using the new field values each time the record pointer in the other dataset is changed. It is not necessary to call the <method namespace="dbtables" class="tsession">Open</method> method of the <property namespace="DBTables" class="TQuery">TQuery</property> each time. This makes using the <property namespace="DBTables" class="TQuery">DataSource</property> property to dynamically filter a query result set useful for establishing Master-Detail relationships. Set the <property namespace="DBTables" class="TQuery">DataSource</property> property in the Detail query to the T<property namespace="DBTables" class="TQuery">DataSource</property> component for the Master dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the SQL statement uses other than a SELECT query (such as INSERT or UPDATE), the parameters with the same name as fields in the other dataset still get values, but the query must be explicitly executed each time the other dataset's record pointer moves. For example, the SQL statement below uses the INSERT statement and has the parameters CustNo and CompanyName.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">INSERT INTO Customer
(CustNo, Company)
VALUES (:CustNo, :CompanyName)</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Another dataset, Query1 and <property namespace="DBTables" class="TQuery">DataSource</property>1, has a CustNo field but no CompanyName field. If this dataset is used through the <property namespace="DBTables" class="TQuery">DataSource</property> property, the CompanyName parameter must be programmatically assigned a value. Because Query1 has a CustNo field and Query1 is referenced through the <property namespace="DBTables" class="TQuery">DataSource</property> property, the CustNo parameter automatically receives a value.</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="Delphi">with Query2 do begin
  DataSource := DataSource1;
  ParamByName('CompanyName').AsString := Edit1.Text;
  Prepare;
  ExecSQL;
end;</codeBlock>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" language="CBuilder">Query2-&gt;DataSource = DataSource1;
Query2-&gt;ParamByName("CompanyName")-&gt;AsString = Edit1-&gt;Text;
Query2-&gt;Prepare();
Query2-&gt;ExecSQL();</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the SQL statement contains parameters with the same name as fields in the other dataset, do not manually set values for these parameters. Any values programmatically set, such as by using the <property namespace="dbtables" class="tquery">Params</property> property or the <method namespace="dbtables" class="tquery">ParamByName</method> method, will be overridden with automatic values. Parameters of other names must be programmatically given values. These parameters are unaffected by setting <property namespace="DBTables" class="TQuery">DataSource</property>.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TQuery">DataSource</property> can be set at runtime or at design-time using the Object Inspector. At design-time, select the desired T<property namespace="DBTables" class="TQuery">DataSource</property> from the drop-down list or type in the name.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ParamCheck">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies whether the parameter list for a query is regenerated if the SQL property changes at runtime.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TQuery">ParamCheck</property> to specify whether or not the <property namespace="dbtables" class="tquery">Params</property> property is cleared and regenerated if an application modifies the query's SQL property at runtime. By default <property namespace="DBTables" class="TQuery">ParamCheck</property> is true, meaning that the <property namespace="dbtables" class="tquery">Params</property> property is automatically regenerated at runtime. When <property namespace="DBTables" class="TQuery">ParamCheck</property> is true, the proper number of parameters is guaranteed to be generated for the current SQL statement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">This property is useful for data definition language (DDL) statements that contain parameters as part of the DDL statement and that are not parameters for the <property namespace="DBTables" class="TQuery">TQuery</property>. For example, the DDL statement to create a stored procedure may contain parameter statements that are part of the stored procedure. Set <property namespace="DBTables" class="TQuery">ParamCheck</property> to false to prevent these parameters from being mistaken for parameters of the <property namespace="DBTables" class="TQuery">TQuery</property> executing the DDL statement.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">An application that does not use parameterized queries may choose to set <property namespace="DBTables" class="TQuery">ParamCheck</property> to false, but otherwise <property namespace="DBTables" class="TQuery">ParamCheck</property> should be true.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.RequestLive">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Requests an updatable query result set from the database.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TQuery">RequestLive</property> is a request that a SELECT query returns an updatable (or live) or read-only result set from the database back-end. A false value for <property namespace="DBTables" class="TQuery">RequestLive</property> (the default) causes the result set to always be read-only. No request is made to the database back-end to return an updatable result set. A true value for <property namespace="DBTables" class="TQuery">RequestLive</property> is a request to database back-end to return an updatable result set. An updatable result set can be made available to the application's user for direct data editing through visual data controls.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A true value for <property namespace="DBTables" class="TQuery">RequestLive</property> is a request for an updatable result set. It does not guarantee that the database back-end will return an updatable result set. See the documentation for the specific database system used for the criteria needed for a live query result set. If the database cannot return an updatable result set, a read-only result set is returned instead. This is done automatically and usually without error. Some database systems may raise an exception on requests for live result sets that cannot be fulfilled. Check the success of the request by inspecting the dataset component's CanModify property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the SQL statement used in a <property namespace="DBTables" class="TQuery">TQuery</property> is a general, multi-row SELECT statement, <property namespace="DBTables" class="TQuery">RequestLive</property> can be used with either a true or a false value. For all other SQL statements issued from the <property namespace="DBTables" class="TQuery">TQuery</property>, <property namespace="DBTables" class="TQuery">RequestLive</property> should only be set to false. These other statements include noncursor single-row SELECT statements (more commonly found in stored procedure programming), noncursor Data Manipulation Language (DML) statements like UPDATE or DELETE, and Data Definition Language (DDL) statements like CREATE TABLE and DROP INDEX.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>All multi-table queries return read-only result sets. Other conditions may cause a query to return a read-only result set. For local tables (such as dBASE and Paradox), see the local SQL help file for rules governing live result sets (updatable queries). For other table types (such as InterBase, Oracle, and Sybase), consult the documentation for the specific database system.</para>
                  
            </note>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Some SQL database systems require strict case-sensitivity for names of metadata objects in SQL statements. These SQL databases typically have problems with the way metadata names are passed by the BDE in live queries and an exception is raised. A workaround that helps in most cases is to enclose the metadata object references (like table and column names) in quotation marks.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the text of the <property namespace="DBTables" class="TQuery">SQL</property> statement to execute for the query.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <property namespace="DBTables" class="TQuery">SQL</property> to provide the <property namespace="DBTables" class="TQuery">SQL</property> statement that a query component executes when its Exec<property namespace="DBTables" class="TQuery">SQL</property> or <method namespace="dbtables" class="tsession">Open</method> method is called. At design time the <property namespace="DBTables" class="TQuery">SQL</property> property can be edited by invoking the String <property namespace="dbtables" class="tsessionlist">List</property> editor in the Object Inspector.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBTables" class="TQuery">SQL</property> property may contain only one complete <property namespace="DBTables" class="TQuery">SQL</property> statement at a time. In general, multiple "batch" statements are not allowed unless a particular server supports them.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBTables" class="TQuery">SQL</property> property can be used to access</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Paradox or dBASE tables, using local <property namespace="DBTables" class="TQuery">SQL</property>. The allowable syntax is a subset of <property namespace="DBTables" class="TQuery">SQL</property>-92. See the local <property namespace="DBTables" class="TQuery">SQL</property> help file for information on supported syntax. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Databases on the <property namespace="dbtables" class="tquery">Local</property> InterBase Server, using standard <property namespace="DBTables" class="TQuery">SQL</property>-92 and specific InterBase extensions to <property namespace="DBTables" class="TQuery">SQL</property> syntax. For information on syntax and limitations, see the InterBase Language Reference and online help.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Databases on remote database servers using the appropriate <property namespace="DBTables" class="TQuery">SQL</property> Links driver or ODBC (not available in all versions). Any standard statement in the server's <property namespace="DBTables" class="TQuery">SQL</property> dialect is allowed. For information on <property namespace="DBTables" class="TQuery">SQL</property> syntax and limitations, see the server documentation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The <property namespace="DBTables" class="TQuery">SQL</property> statement in the <property namespace="DBTables" class="TQuery">SQL</property> property may contain replaceable parameters, following standard <property namespace="DBTables" class="TQuery">SQL</property>-92 syntax conventions. Parameters are created and stored in the <property namespace="dbtables" class="tquery">Params</property> property.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Developers with advanced versions can also invoke the Visual <property namespace="dbtables" class="tupdatesql">Query</property> Builder to create an <property namespace="DBTables" class="TQuery">SQL</property> statement for execution. Right-click the <property namespace="DBTables" class="TQuery">TQuery</property> icon on the form in the IDE and select the command from the context menu.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Params">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Contains the parameters for a query's SQL statement.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Access <property namespace="DBTables" class="TQuery">Params</property> at runtime to view and set parameter names, values, and data types dynamically (at design time use the collection editor for the <property namespace="DBTables" class="TQuery">Params</property> property to set parameter information). <property namespace="DBTables" class="TQuery">Params</property> is a zero-based array of T<property namespace="DBTables" class="TQuery">Params</property> parameter records. Index specifies the array element to access.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>An easier way to set and retrieve parameter values when the name of each parameter is known is to call <method namespace="dbtables" class="tquery">ParamByName</method>. ParamByName cannot, however, be used to change a parameter's data type or name.</para>
                  
            </note>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Parameters used in SELECT statements cannot be NULL, but they can be NULL for UPDATE and INSERT statements.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.UniDirectional">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether or not Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) bidirectional cursors are enabled for a query's result set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TQuery">UniDirectional</property> to control whether or not a BDE cursor can move forward and backward through a result set. By default <property namespace="DBTables" class="TQuery">UniDirectional</property> is false, enabling forward and backward navigation.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Traditionally SQL cursors are unidirectional. They can travel only forward through a dataset. The BDE, however, permits bidirectional travel by caching records. If an application does not need bidirectional access to records in a result set, set <property namespace="DBTables" class="TQuery">UniDirectional</property> to true. When <property namespace="DBTables" class="TQuery">UniDirectional</property> is true, an application requires less memory and performance is improved.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not confuse the <property namespace="DBTables" class="TQuery">UniDirectional</property> property, which indicates whether the BDE cursor is unidirectional, with the Is<property namespace="DBTables" class="TQuery">UniDirectional</property> property inherited from TDataSet. Is<property namespace="DBTables" class="TQuery">UniDirectional</property>, which implies additional restrictions such as a lack of buffering, is always false for <property namespace="DBTables" class="TQuery">TQuery</property>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TUpdateSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TUpdateSQL</class> applies cached updates on behalf of queries or stored procedures that can't post updates directly.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use a <class namespace="DBTables">TUpdateSQL</class> object to provide SQL statements used to update read-only datasets represented by <class namespace="dbtables">TQuery</class> or <class namespace="dbtables">TStoredProc</class> components when cached updates are enabled. A dataset is read-only either by design or circumstance. If a dataset is read-only by design, the application itself does not provide a user interface for updating data, but may institute a programmatic scheme behind the scenes. If a dataset is read-only by circumstance, it indicates that the Borland <property namespace="dbtables" class="tdbdataset">Database</property> Engine (BDE) returned a read-only result set. This usually happens for queries made against multiple tables. Such queries are, by SQL-92 definitions, read-only. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="DBTables">TUpdateSQL</class> provides a mechanism for circumventing what some developers consider an SQL-92 limitation. It enables a developer to provide INSERT, UPDATE, and DELETE statements for performing separate update queries on otherwise read-only result sets in such a manner that the separate update queries are transparent to the end user.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">In practical application, a <class namespace="DBTables">TUpdateSQL</class> object is placed on a data module or form, and linked to a <class namespace="dbtables">TQuery</class> or <class namespace="dbtables">TStoredProc</class> component through that component's <property namespace="dbtables" class="tbdedataset">UpdateObject</property> property. If the <property namespace="dbtables" class="tbdedataset">UpdateObject</property> property points to a valid <class namespace="DBTables">TUpdateSQL</class> object, the SQL statements belonging to the update object are automatically applied when cached updates are applied.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TUpdateSQL">Create</method>s an instance of an update object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TUpdateSQL">Create</method> to instantiate an update object at run time. You do not need to call <method namespace="DBTables" class="TUpdateSQL">Create</method> for update objects placed in a data module or form at design time. Delphi automatically handles these objects.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Apply">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sets the parameters for a specified SQL statement type, and executes the resulting statement.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TUpdateSQL">Apply</method> to set parameters for an SQL statement and execute it to update a record. UpdateKind indicates which SQL statement to bind and execute, and can be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind and execute the SQL statement in the <property namespace="dbtables" class="tupdatesql">DeleteSQL</property> property</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind and execute the SQL statement in the <property namespace="dbtables" class="tupdatesql">InsertSQL</property> property</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukModify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind and execute the SQL statement in the <property namespace="dbtables" class="tupdatesql">ModifySQL</property> property</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="DBTables" class="TUpdateSQL">Apply</method> is primarily intended for manually executing update statements from an <event namespace="dbtables" class="tbdedataset">OnUpdateRecord</event> event handler.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If an SQL statement does not contain parameters, it is more efficient to call <method namespace="dbtables" class="tupdatesql">ExecSQL</method> instead of <method namespace="DBTables" class="TUpdateSQL">Apply</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.ExecSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Executes a specified type of SQL statement to perform an update for an otherwise read-only results set when cached updates is enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TUpdateSQL">ExecSQL</method> to execute the SQL statement necessary for updating the records belonging to a read-only result set when cached updates is enabled. UpdateKind specifies the statement to execute, and can be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Execute the SQL statement used to delete records in the dataset (DeleteSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Execute the SQL statement used to insert new records into the dataset (InsertSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukModify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Execute the SQL statement used to update records in the dataset (ModifySQL).</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If the statement to execute contains any parameters, an application must call <method namespace="dbtables" class="tupdatesql">SetParams</method> to bind the parameters before calling <method namespace="DBTables" class="TUpdateSQL">ExecSQL</method>. To determine if a statement contains parameters, examine the appropriate <property namespace="dbtables" class="tupdatesql">ModifySQL</property>, <property namespace="dbtables" class="tupdatesql">InsertSQL</property>, or <property namespace="dbtables" class="tupdatesql">DeleteSQL</property> property, depending on the statement type intended for execution.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>To both bind parameters and execute a statement, call <method namespace="dbtables" class="tupdatesql">Apply</method>.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.SetParams">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Binds parameters in an SQL statement prior to statement execution.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="DBTables" class="TUpdateSQL">SetParams</method> to bind parameters in an SQL statement associated with the update object prior to executing the statement. UpdateKind indicates the type of statement for which to bind parameters, and can be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind parameters for the SQL statement used to delete records (DeleteSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind parameters for the SQL statement used to insert new records (InsertSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukModify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Bind parameters for SQL statement used to update records (ModifySQL).</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Parameters are indicated in an SQL statement by a colon. Except for the leading colon in the parameter name, the parameter name must exactly match the name of an existing field name for the dataset.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Parameter names can be prefaced by the 'OLD_' indicator. If so, the old value of the field is used to perform the update instead of any updates in the cache.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Frees an instance of an update object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="DBTables" class="TUpdateSQL">Destroy</method> directly in an application. Usually destruction of update objects is handled automatically by Delphi. If an application creates its own instance of an update object, however, the application should call Free, which verifies that the update object is not nil before calling <method namespace="DBTables" class="TUpdateSQL">Destroy</method>
                  
            </para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DatabaseName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the database to which updates are applied.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the <property namespace="dbtables" class="tupdatesql">DataSet</property> property is not a BDE-enabled dataset, you must set <property namespace="DBTables" class="TUpdateSQL">DatabaseName</property> to identify the database to which updates are applied. <property namespace="DBTables" class="TUpdateSQL">DatabaseName</property> should be the same as the <property namespace="DBTables" class="TUpdateSQL">DatabaseName</property> property of the source dataset (the dataset that fetches data from the database server). This property is used to set the <property namespace="DBTables" class="TUpdateSQL">DatabaseName</property> property of the internal queries that apply the updates. </para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DataSet">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the dataset that holds the updated data that the update object applies.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TUpdateSQL">TUpdateSQL</property> uses the <property namespace="DBTables" class="TUpdateSQL">DataSet</property> property for two purposes:</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">It fetches the original and updated field values from this dataset when performing parameter substitution.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If this dataset is a TDB<property namespace="DBTables" class="TUpdateSQL">DataSet</property> descendant, it uses its <property namespace="dbtables" class="tupdatesql">DatabaseName</property> and <property namespace="dbtables" class="tupdatesql">SessionName</property> properties to identify the database and session that it uses when performing its update queries.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you are using a single update object, then the <property namespace="DBTables" class="TUpdateSQL">DataSet</property> property is set automatically when you set the source dataset's <property namespace="dbtables" class="tbdedataset">UpdateObject</property> property.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">If you are using multiple update objects, you must set the <property namespace="DBTables" class="TUpdateSQL">DataSet</property> property at runtime in a BeforeUpdateRecord or <event namespace="dbtables" class="tbdedataset">OnUpdateRecord</event> event handler. If you are using the source dataset to cache its own updates, set <property namespace="DBTables" class="TUpdateSQL">DataSet</property> to the source dataset in an <event namespace="dbtables" class="tbdedataset">OnUpdateRecord</event> event handler. If you are using a client dataset to cache updates, set <property namespace="DBTables" class="TUpdateSQL">DataSet</property> to the DeltaDS parameter of the BeforeUpdateRecord event handler.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Query">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the query object used to perform a specified kind of update.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <property namespace="DBTables" class="TUpdateSQL">Query</property> is a read-only property that provides a reference to the internal T<property namespace="DBTables" class="TUpdateSQL">Query</property> that executes the SQL that applies the cached data updates. Use properties and methods of T<property namespace="DBTables" class="TUpdateSQL">Query</property> to work with this reference.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Using one of the TUpdateKind constants as an index for the <property namespace="DBTables" class="TUpdateSQL">Query</property> property, the internal T<property namespace="DBTables" class="TUpdateSQL">Query</property> object will have the SQL specified in the corresponding update SQL property: <property namespace="dbtables" class="tupdatesql">DeleteSQL</property>, <property namespace="dbtables" class="tupdatesql">InsertSQL</property>, or <property namespace="dbtables" class="tupdatesql">ModifySQL</property>. UpdateKind can be one of the following:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute DELETE statements (DeleteSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute INSERT statements (InsertSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukModify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute UPDATE statements (ModifySQL).</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Each query object executes a particular kind of SQL statement. The contents of the SQL statements executed by these objects can be accessed directly using the <property namespace="dbtables" class="tupdatesql">ModifySQL</property>, <property namespace="dbtables" class="tupdatesql">InsertSQL</property>, and <property namespace="dbtables" class="tupdatesql">DeleteSQL</property> properties.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The main purpose of <property namespace="DBTables" class="TUpdateSQL">Query</property> is to provide a a way for an application to set the properties for an update query object or to call the query object's methods.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>If a particular kind of update statement is not provided, then its corresponding query object is nil (Delphi) or NULL (C++). For example, if an application does not provide an SQL statement for the <property namespace="dbtables" class="tupdatesql">DeleteSQL</property> property, then setting <property namespace="DBTables" class="TUpdateSQL">Query</property>[ukDelete] returns nil (Delphi) or NULL (C++).</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns a specified <property namespace="DBTables" class="TUpdateSQL">SQL</property> statement used when applying cached updates.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Returns the <property namespace="DBTables" class="TUpdateSQL">SQL</property> statement in the Modify<property namespace="DBTables" class="TUpdateSQL">SQL</property>, Insert<property namespace="DBTables" class="TUpdateSQL">SQL</property>, or Delete<property namespace="DBTables" class="TUpdateSQL">SQL</property> property, depending on the setting of the UpdateKind index. UpdateKind can be any of the following:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukDelete</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute DELETE statements (DeleteSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukInsert</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute INSERT statements (InsertSQL).</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>ukModify</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Return the query object used to execute UPDATE statements (ModifySQL).</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.SessionName">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Identifies the session under which updates are applied.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">When the <property namespace="dbtables" class="tupdatesql">DataSet</property> property is not a BDE-enabled dataset, you must set <property namespace="DBTables" class="TUpdateSQL">SessionName</property> to identify the session under which updates are applied. <property namespace="DBTables" class="TUpdateSQL">SessionName</property> should be the same as the <property namespace="DBTables" class="TUpdateSQL">SessionName</property> property of the source dataset (the dataset that fetches data from the database server). This property is used to set the <property namespace="DBTables" class="TUpdateSQL">SessionName</property> property of the internal queries that apply the updates. </para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.ModifySQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the SQL UPDATE statement to use when applying an update to a record and cached updates is enabled.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TUpdateSQL">ModifySQL</property> to the SQL UPDATE statement to use when applying an updated record to a dataset. Statements can be parameterized queries. To create a UPDATE statement at design time, use the UpdateSQL editor to create statements, such as:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UPDATE "Country.db"
SET Name = :Name, Capital = :Capital, Continent = :Continent
WHERE Name = :OLD_Name</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At run time, an application can write a statement directly to this property to set or change the UPDATE statement.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>As the example illustrates, <property namespace="DBTables" class="TUpdateSQL">ModifySQL</property> supports an extension to normal parameter binding. To retrieve the value of a field as it exists prior to application of cached updates, the field name with 'OLD_'. This is especially useful when doing field comparisons in the WHERE clause of the statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.InsertSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the SQL INSERT statement to use when applying a cached insertion of a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TUpdateSQL">InsertSQL</property> to the SQL INSERT statement to use when applying an insertion to a dataset. Statements can be parameterized queries. To create a INSERT statement at design time, use the UpdateSQL editor to create statements, such as:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">INSERT INTO "Country.db"
(Name, Capital, Continent)
VALUES (:Name, :Capital, :Continent)
WHERE :OLD_Name = "Rangoon"</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At run time, an application can write a statement directly to this property to set or change the INSERT statement.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>As the example illustrates, <property namespace="DBTables" class="TUpdateSQL">InsertSQL</property> supports an extension to normal parameter binding. To retrieve the value of a field as it exists prior to application of cached updates, the field name with 'OLD_'. This is especially useful when doing field comparisons in the WHERE clause of the statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.DeleteSQL">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Specifies the SQL DELETE statement to use when applying a cached deletion of a record.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Set <property namespace="DBTables" class="TUpdateSQL">DeleteSQL</property> to the SQL DELETE statement to use when applying a deletion to a record. Statements can be parameterized queries. To create a DELETE statement at design time, use the UpdateSQL editor to create statements, such as:</para>
            <codeBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DELETE FROM "Country.db"
WHERE Name = :OLD_Name</codeBlock>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">At run time, an application can write a statement directly to this property to set or change the DELETE statement.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>As the example illustrates, <property namespace="DBTables" class="TUpdateSQL">DeleteSQL</property> supports an extension to normal parameter binding. To retrieve the value of a field as it exists prior to application of cached updates, the field name with 'OLD_'. This is especially useful when doing field comparisons in the WHERE clause of the statement.</para>
                  
            </note>
         </comments>
      </member>
      <member name="T:DBTables.TBlobStream">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">TBlobStream</class> is a stream object that provides services which allow applications to read from or write to field objects that represent Binary large object (BLOB) fields.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <class namespace="dbtables">TBlobStream</class> to access or modify the value of a BLOB field in a BDE-enabled dataset. TBlob stream works with persistent TBlobField objects (including descendants of TBlobField such as TGraphicField and TMemoField). BLOB fields use BLOB streams to read data from and write data to the dataset.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <class namespace="dbtables">TBlobStream</class> allows objects that have no specialized knowledge of how data is stored in a BLOB field to read or write such data by employing the uniform stream mechanism.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">To use a BLOB stream, create an instance of <class namespace="dbtables">TBlobStream</class>, use the methods of the stream to read or write the data, and then free the BLOB stream. Do not use the same instance of <class namespace="dbtables">TBlobStream</class> to access data from more than one record. Instead, create a new <class namespace="dbtables">TBlobStream</class> object every time you need to read or write BLOB data on a new record.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Read">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Read</method>s up to <property namespace="dbtables" class="tsessionlist">Count</property> bytes from the current position in the field's data into <property namespace="dbtables" class="tparamlist">Buffer</property>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbtables" class="TBlobStream">Read</method> to read data from the BLOB field when the number of bytes in the field's data is not known.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Buffer is the target container for <method namespace="dbtables" class="TBlobStream">Read</method> and must be of type PChar (Delphi), char * (C++), or equivalent. Buffer must have at least <property namespace="dbtables" class="tsessionlist">Count</property> bytes allocated to hold the data that was read from the field. <method namespace="dbtables" class="TBlobStream">Read</method> transfers up to <property namespace="dbtables" class="tsessionlist">Count</property> bytes from the BLOB data into <property namespace="dbtables" class="tparamlist">Buffer</property>, starting in the current position, and then advances the current position by the number of bytes actually transferred. <method namespace="dbtables" class="TBlobStream">Read</method> returns the number of bytes actually transferred (which may be less than the number requested in <property namespace="dbtables" class="tsessionlist">Count</property>).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Read</method> checks the <property namespace="dbtables" class="tbatchmove">Transliterate</property> property of the field, and converts the data into ANSI from the character set specified by the dataset if <property namespace="dbtables" class="tbatchmove">Transliterate</property> is true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">All the other data-reading methods of a BLOB stream (<method namespace="dbtables" class="TBlobStream">Read</method>Buffer, <method namespace="dbtables" class="TBlobStream">Read</method>Component) call <method namespace="dbtables" class="TBlobStream">Read</method> to do their actual reading.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not call <method namespace="dbtables" class="TBlobStream">Read</method> when the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> was created in bmWrite mode.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Write">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Write</method>s <property namespace="dbtables" class="tsessionlist">Count</property> bytes from <property namespace="dbtables" class="tparamlist">Buffer</property> to the current position in the field and updates the current position by <property namespace="dbtables" class="tsessionlist">Count</property> bytes.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="dbtables" class="TBlobStream">Write</method> to write <property namespace="dbtables" class="tsessionlist">Count</property> bytes to the BLOB field, starting at the current position. The <method namespace="dbtables" class="TBlobStream">Write</method> method for <method namespace="dbtables" class="TBlobStream">TBlobStream</method> always writes the entire <property namespace="dbtables" class="tsessionlist">Count</property> bytes, as BLOB data does not necessarily include a termination character. Thus, <method namespace="dbtables" class="TBlobStream">Write</method> is equivalent to the <method namespace="dbtables" class="TBlobStream">Write</method>Buffer method.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Buffer is the source container for <method namespace="dbtables" class="TBlobStream">Write</method> and must be of type PChar (Delphi), char * (C++), or equivalent. <method namespace="dbtables" class="TBlobStream">Write</method> transfers up to <property namespace="dbtables" class="tsessionlist">Count</property> bytes from <property namespace="dbtables" class="tparamlist">Buffer</property> into the BLOB field, starting in the current position, and then advances the current position by the number of bytes actually transferred. <method namespace="dbtables" class="TBlobStream">Write</method> returns the number of bytes actually transferred (which may be less than the number requested in <property namespace="dbtables" class="tsessionlist">Count</property>).</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Write</method> checks the <property namespace="dbtables" class="tbatchmove">Transliterate</property> property of the field, and converts the data from ANSI into the character set of the dataset if <property namespace="dbtables" class="tbatchmove">Transliterate</property> is true.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">All the other data-writing methods of a BLOB stream (<method namespace="dbtables" class="TBlobStream">Write</method>Buffer, <method namespace="dbtables" class="TBlobStream">Write</method>Component) call <method namespace="dbtables" class="TBlobStream">Write</method> to do their actual writing.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not call <method namespace="dbtables" class="TBlobStream">Write</method> when the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> was created in bmRead mode.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Seek">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Resets the current position of the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> object.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="dbtables" class="TBlobStream">Seek</method> to move the current position within the BLOB data by the indicated offset. <method namespace="dbtables" class="TBlobStream">Seek</method> allows an application to read from or write to a particular location within the BLOB data.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Origin parameter indicates how to interpret the Offset parameter. Origin should be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>soFromBeginning</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Offset is from the beginning of the BLOB data. Seek moves to the position Offset. Offset must be &gt;= 0.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>soFromCurrent</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Offset is from the current position in the BLOB data. Seek moves to Position + Offset.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>soFromEnd</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>Offset is from the end of the BLOB data. Offset must be &lt;= 0 to indicate a number of bytes before the end of the BLOB.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Seek</method> returns the new value of the Position property, the new current position in the BLOB data.</para>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Create">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Create</method>s an instance of <method namespace="dbtables" class="TBlobStream">TBlobStream</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <method namespace="dbtables" class="TBlobStream">Create</method> to obtain an instance of <method namespace="dbtables" class="TBlobStream">TBlobStream</method> for reading from or writing to a specific TBlobField object.</para>
            <tip xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Different types of dataset use different classes of BLOB streams. It is usually a better idea to call the dataset's <method namespace="dbtables" class="TBlobStream">Create</method>BlobStream method than to call the BLOB stream constructor.</para>
                  
            </tip>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Create</method> links the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> to the field object specified by the Field parameter. Mode specifies whether the BLOB stream will be used to read data (bmRead), write data (bmWrite) or modify data (bmReadWrite). Mode must be one of the following values:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <tr>
                        
                  <th>Value</th>
                        
                  <th>Meaning</th>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>bmRead</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The BLOB stream can read data from the field.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>bmWrite</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The BLOB stream can replace the data in the field.</para>
                        
                  </td>
                     
               </tr>
                     
               <tr>
                        
                  <td>
                           
                     <para>bmReadWrite</para>
                        
                  </td>
                        
                  <td>
                           
                     <para>The BLOB stream can modify the data in the field.</para>
                        
                  </td>
                     
               </tr>
                  
            </table>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>: A <method namespace="dbtables" class="TBlobStream">TBlobStream</method> object should always be destroyed before navigating to a new record. <method namespace="dbtables" class="TBlobStream">Create</method> a new instance of <method namespace="dbtables" class="TBlobStream">TBlobStream</method> for the new record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Truncate">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Discards all data in the BLOB field from the current position on.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <method namespace="dbtables" class="TBlobStream">Truncate</method> to limit the size of the BLOB data. Calling <method namespace="dbtables" class="TBlobStream">Truncate</method> when the current position is 0 will clear the contents of the BLOB field.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>Do not call <method namespace="dbtables" class="TBlobStream">Truncate</method> when the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> was created in bmRead mode.</para>
                  
            </note>
         </comments>
      </member>
      <member name="M:DBTables.DBTables.Destroy">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Destroy</method>s an instance of <method namespace="dbtables" class="TBlobStream">TBlobStream</method>.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Do not call <method namespace="dbtables" class="TBlobStream">Destroy</method> directly in an application. Instead call Free. Free verifies that the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> object is not nil and only then calls <method namespace="dbtables" class="TBlobStream">Destroy</method>. <method namespace="dbtables" class="TBlobStream">Destroy</method> the <method namespace="dbtables" class="TBlobStream">TBlobStream</method> object when it is no longer needed for reading from or writing to the BLOB field.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <method namespace="dbtables" class="TBlobStream">Destroy</method> triggers an OnDataChange event if the BLOB stream was used to overwrite or modify the data in the field. <method namespace="dbtables" class="TBlobStream">Destroy</method> then frees any buffers that were allocated to handle the data.</para>
            <note xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                     
               <para>: A <method namespace="dbtables" class="TBlobStream">TBlobStream</method> object should always be destroyed before navigating to a new record. Create a new instance of <method namespace="dbtables" class="TBlobStream">TBlobStream</method> for the new record.</para>
                  
            </note>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Session">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Maintains database components used by an application.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <variable namespace="Dbtables">Session</variable> is responsible for maintaining all of the database components used by an application. It is created automatically as part of an application's initialization and destroyed as part of the application's termination. The <variable namespace="Dbtables">Session</variable> variable must remain active at all times; it can not be destroyed and recreated.</para>
         </comments>
      </member>
      <member name="P:DBTables.DBTables.Sessions">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Provides access to TSessionList methods and properties.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <variable namespace="Dbtables">Sessions</variable> is a way to access TSessionList methods and properties for manipulating sessions. The DB unit automatically creates and destroys <variable namespace="Dbtables">Sessions</variable> for you; you don't need to do anything but use it.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The Session variable, on the other hand, is responsible for maintaining all of the database components used by your application. It is created automatically as part of your application's initialization and destroyed as part of your application's termination. The Session variable must remain active at all times; it can not be destroyed and recreated.</para>
         </comments>
      </member>
      <member name="M:DBTables.AnsiToNative">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string from the ANSI character set to the character set associated with a given locale.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Dbtables">AnsiToNative</routine> to convert a string represented in the ANSI character set (used internally) to the character set associated with the database locale specified by the Locale parameter. The resulting string is copied into the buffer pointed to by the NativeStr parameter. Use the MaxLen parameter to specify the size of this buffer. If the buffer is too small to contain all characters in the converted version of AnsiStr, the returned value is truncated. <routine namespace="Dbtables">AnsiToNative</routine> returns a pointer to NativeStr.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="Dbtables">AnsiToNative</routine> to convert strings typed by the user into the character set used by a database table.</para>
         </comments>
      </member>
      <member name="M:DBTables.NativeToAnsi">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string from the character set of the given locale to the ANSI character set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Dbtables">NativeToAnsi</routine> to convert a string represented in the character set of the Locale parameter to the ANSI character set (used internally). The resulting string is returned as the AnsiStr parameter. </para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="Dbtables">NativeToAnsi</routine> to convert strings retrieved from a database table into strings that can be displayed in the user interface.</para>
         </comments>
      </member>
      <member name="M:DBTables.AnsiToNativeBuf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string from the ANSI character set to the character set associated with a given locale.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Dbtables">AnsiToNativeBuf</routine> to convert a null-terminated string in the ANSI character set (used internally by Windows) to the character set associated with the database locale specified by the Locale parameter. The resulting string is copied into the buffer pointed to by the Dest parameter. Use the Len parameter to specify the size of this buffer.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="Dbtables">AnsiToNativeBuf</routine> to convert strings typed by the user into the character set used by a database table.</para>
         </comments>
      </member>
      <member name="M:DBTables.NativeToAnsiBuf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Converts a string from the character set of a specified locale into the ANSI character set.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Call <routine namespace="Dbtables">NativeToAnsiBuf</routine> to convert a null-terminated string in the character set of the Locale parameter to the ANSI character set (used internally). The resulting string is copied into the buffer pointed to by the Dest parameter. Use the Len parameter to specify the size of this buffer.</para>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Use <routine namespace="Dbtables">NativeToAnsiBuf</routine> to convert strings from a database table into the ANSI character set so that they can be displayed in the user interface.</para>
         </comments>
      </member>
      <member name="M:DBTables.NativeCompareStr">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compares strings based on a database locale case sensitively.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Dbtables">NativeCompareStr</routine> compares S1 to S2, up to a length of Len characters. If the Len parameter is 0, <routine namespace="Dbtables">NativeCompareStr</routine> compares the strings up to their entire length. The comparison is performed with case sensitivity. The compare operation is controlled by the database locale specified as the Locale parameter. The return value is:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Condition</th>
                  
                  <th>Return Value</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 &gt; S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>&gt; 0</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 &lt; S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>&lt; 0</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 = S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>= 0</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="M:DBTables.NativeCompareStrBuf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compares null-terminated strings based on a database locale case sensitively.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Dbtables">NativeCompareStrBuf</routine> compares up to the first Len characters of S1 to those of S2, with case sensitivity. If the Len parameter is 0, <routine namespace="Dbtables">NativeCompareStrBuf</routine> compares the strings up to their entire length. The compare operation is controlled by the database locale specified as the Locale parameter. The return value is:</para>
            <table xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <tr>
                  
                  <th>Condition</th>
                  
                  <th>Return Value</th>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 &gt; S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>&gt; 0</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 &lt; S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>&lt; 0</para>
                  
                  </td>
               
               </tr>
               
               <tr>
                  
                  <td>
                     
                     <para>S1 = S2</para>
                  
                  </td>
                  
                  <td>
                     
                     <para>= 0</para>
                  
                  </td>
               
               </tr>
            
            </table>
         </comments>
      </member>
      <member name="M:DBTables.NativeCompareText">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compares strings based on a database locale without case sensitivity.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Dbtables">NativeCompareText</routine> compares up to the first Len characters of S1 to those of S2, without case sensitivity. If the Len parameter is 0, <routine namespace="Dbtables">NativeCompareText</routine> compares the strings up to their entire length. The compare operation is controlled by the database locale specified as the Locale parameter. <routine namespace="Dbtables">NativeCompareText</routine> returns a value less than 0 if S1 &lt; S2, a value greater than 0 if S1 &gt; S2, and returns 0 if S1 = S2. </para>
         </comments>
      </member>
      <member name="M:DBTables.NativeCompareTextBuf">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Compares null-terminated strings based on a database locale and is not case sensitive.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
               
               <routine namespace="Dbtables">NativeCompareTextBuf</routine> compares up to the first Len characters of S1 to those of S2, without case sensitivity. If the Len parameter is 0, <routine namespace="Dbtables">NativeCompareTextBuf</routine> compares the strings up to their entire length. The compare operation is controlled by the database locale specified as the Locale parameter. <routine namespace="Dbtables">NativeCompareTextBuf</routine> returns a value less than 0 if S1 &lt; S2, a value greater than 0 if S1 &gt; S2, and returns 0 if S1 = S2. </para>
         </comments>
      </member>
      <member name="M:DBTables.Check">
         <summary>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Determines whether a value returned from the Borland Database Engine (BDE) represents an error condition.</para>
         </summary>
         <comments>
            <para xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Pass the return code from a direct BDE API call as the Status parameter when calling <routine namespace="Dbtables">Check</routine>. <routine namespace="Dbtables">Check</routine> determines whether Status indicates an error condition, and if so, calls DbiError to raise an exception.</para>
         </comments>
      </member>
   </members>
</doc>